MODULE CtlExcel8;
(**
    project    = "BlackBox"
    organization    = "www.oberon.ch"
    contributors    = "Oberon microsystems"
    version    = "System/Rsrc/About"
    copyright    = "System/Rsrc/About"
    license    = "Docu/BB-License"
    changes    = ""
    issues    = ""

**)

    (* Microsoft Excel 8.0 Object Library, help: E:\MsOffice\Office\VBAXL8.HLP, id: 65535 *)
    (* guid: {00020813-0000-0000-C000-000000000046}, lcid: 0, syskind: win32, version: 1.2 *)

    IMPORT CtlT, CtlC, CtlOffice, CtlVBIDE;

    CONST
        (* Constants *)
            xlAll* = -4104;
            xlAutomatic* = -4105;
            xlBoth* = 1;
            xlCenter* = -4108;
            xlChecker* = 9;
            xlCircle* = 8;
            xlCorner* = 2;
            xlCrissCross* = 16;
            xlCross* = 4;
            xlDiamond* = 2;
            xlDistributed* = -4117;
            xlDoubleAccounting* = 5;
            xlFixedValue* = 1;
            xlFormats* = -4122;
            xlGray16* = 17;
            xlGray8* = 18;
            xlGrid* = 15;
            xlHigh* = -4127;
            xlInside* = 2;
            xlJustify* = -4130;
            xlLightDown* = 13;
            xlLightHorizontal* = 11;
            xlLightUp* = 14;
            xlLightVertical* = 12;
            xlLow* = -4134;
            xlManual* = -4135;
            xlMinusValues* = 3;
            xlModule* = -4141;
            xlNextToAxis* = 4;
            xlNone* = -4142;
            xlNotes* = -4144;
            xlOff* = -4146;
            xlOn* = 1;
            xlPercent* = 2;
            xlPlus* = 9;
            xlPlusValues* = 2;
            xlSemiGray75* = 10;
            xlShowLabel* = 4;
            xlShowLabelAndPercent* = 5;
            xlShowPercent* = 3;
            xlShowValue* = 2;
            xlSimple* = -4154;
            xlSingle* = 2;
            xlSingleAccounting* = 4;
            xlSolid* = 1;
            xlSquare* = 1;
            xlStar* = 5;
            xlStError* = 4;
            xlToolbarButton* = 2;
            xlTriangle* = 3;
            xlGray25* = -4124;
            xlGray50* = -4125;
            xlGray75* = -4126;
            xlBottom* = -4107;
            xlLeft* = -4131;
            xlRight* = -4152;
            xlTop* = -4160;
            xl3DBar* = -4099;
            xl3DSurface* = -4103;
            xlBar* = 2;
            xlColumn* = 3;
            xlCombination* = -4111;
            xlCustom* = -4114;
            xlDefaultAutoFormat* = -1;
            xlMaximum* = 2;
            xlMinimum* = 4;
            xlOpaque* = 3;
            xlTransparent* = 2;
            xlBidi* = -5000;
            xlLatin* = -5001;
            xlContext* = -5002;
            xlLTR* = -5003;
            xlRTL* = -5004;
            xlVisualCursor* = 2;
            xlLogicalCursor* = 1;
            xlSystem* = 1;
            xlPartial* = 3;
            xlHindiNumerals* = 3;
            xlBidiCalendar* = 3;
            xlGregorian* = 2;
            xlComplete* = 4;
            xlScale* = 3;
            xlClosed* = 3;
            xlColor1* = 7;
            xlColor2* = 8;
            xlColor3* = 9;
            xlConstants* = 2;
            xlContents* = 2;
            xlBelow* = 1;
            xlCascade* = 7;
            xlCenterAcrossSelection* = 7;
            xlChart4* = 2;
            xlChartSeries* = 17;
            xlChartShort* = 6;
            xlChartTitles* = 18;
            xlClassic1* = 1;
            xlClassic2* = 2;
            xlClassic3* = 3;
            xl3DEffects1* = 13;
            xl3DEffects2* = 14;
            xlAbove* = 0;
            xlAccounting1* = 4;
            xlAccounting2* = 5;
            xlAccounting3* = 6;
            xlAccounting4* = 17;
            xlAdd* = 2;
            xlDebugCodePane* = 13;
            xlDesktop* = 9;
            xlDirect* = 1;
            xlDivide* = 5;
            xlDoubleClosed* = 5;
            xlDoubleOpen* = 4;
            xlDoubleQuote* = 1;
            xlEntireChart* = 20;
            xlExcelMenus* = 1;
            xlExtended* = 3;
            xlFill* = 5;
            xlFirst* = 0;
            xlFloating* = 5;
            xlFormula* = 5;
            xlGeneral* = 1;
            xlGridline* = 22;
            xlIcons* = 1;
            xlImmediatePane* = 12;
            xlInteger* = 2;
            xlLast* = 1;
            xlLastCell* = 11;
            xlList1* = 10;
            xlList2* = 11;
            xlList3* = 12;
            xlLocalFormat1* = 15;
            xlLocalFormat2* = 16;
            xlLong* = 3;
            xlLotusHelp* = 2;
            xlMacrosheetCell* = 7;
            xlMixed* = 2;
            xlMultiply* = 4;
            xlNarrow* = 1;
            xlNoDocuments* = 3;
            xlOpen* = 2;
            xlOutside* = 3;
            xlReference* = 4;
            xlSemiautomatic* = 2;
            xlShort* = 1;
            xlSingleQuote* = 2;
            xlStrict* = 2;
            xlSubtract* = 3;
            xlTextBox* = 16;
            xlTiled* = 1;
            xlTitleBar* = 8;
            xlToolbar* = 1;
            xlVisible* = 12;
            xlWatchPane* = 11;
            xlWide* = 3;
            xlWorkbookTab* = 6;
            xlWorksheet4* = 1;
            xlWorksheetCell* = 3;
            xlWorksheetShort* = 5;
            xlAllExceptBorders* = 6;
            xlLeftToRight* = 2;
            xlTopToBottom* = 1;
            xlVeryHidden* = 2;
            xlDrawingObject* = 14;
        (* XlCreator *)
            xlCreatorCode* = 1480803660;
        (* XlChartGallery *)
            xlBuiltIn* = 21;
            xlUserDefined* = 22;
            xlAnyGallery* = 23;
        (* XlColorIndex *)
            xlColorIndexAutomatic* = -4105;
            xlColorIndexNone* = -4142;
        (* XlEndStyleCap *)
            xlCap* = 1;
            xlNoCap* = 2;
        (* XlRowCol *)
            xlColumns* = 2;
            xlRows* = 1;
        (* XlScaleType *)
            xlScaleLinear* = -4132;
            xlScaleLogarithmic* = -4133;
        (* XlDataSeriesType *)
            xlAutoFill* = 4;
            xlChronological* = 3;
            xlGrowth* = 2;
            xlDataSeriesLinear* = -4132;
        (* XlAxisCrosses *)
            xlAxisCrossesAutomatic* = -4105;
            xlAxisCrossesCustom* = -4114;
            xlAxisCrossesMaximum* = 2;
            xlAxisCrossesMinimum* = 4;
        (* XlAxisGroup *)
            xlPrimary* = 1;
            xlSecondary* = 2;
        (* XlBackground *)
            xlBackgroundAutomatic* = -4105;
            xlBackgroundOpaque* = 3;
            xlBackgroundTransparent* = 2;
        (* XlWindowState *)
            xlMaximized* = -4137;
            xlMinimized* = -4140;
            xlNormal* = -4143;
        (* XlAxisType *)
            xlCategory* = 1;
            xlSeriesAxis* = 3;
            xlValue* = 2;
        (* XlArrowHeadLength *)
            xlArrowHeadLengthLong* = 3;
            xlArrowHeadLengthMedium* = -4138;
            xlArrowHeadLengthShort* = 1;
        (* XlVAlign *)
            xlVAlignBottom* = -4107;
            xlVAlignCenter* = -4108;
            xlVAlignDistributed* = -4117;
            xlVAlignJustify* = -4130;
            xlVAlignTop* = -4160;
        (* XlTickMark *)
            xlTickMarkCross* = 4;
            xlTickMarkInside* = 2;
            xlTickMarkNone* = -4142;
            xlTickMarkOutside* = 3;
        (* XlErrorBarDirection *)
            xlX* = -4168;
            xlY* = 1;
        (* XlErrorBarInclude *)
            xlErrorBarIncludeBoth* = 1;
            xlErrorBarIncludeMinusValues* = 3;
            xlErrorBarIncludeNone* = -4142;
            xlErrorBarIncludePlusValues* = 2;
        (* XlDisplayBlanksAs *)
            xlInterpolated* = 3;
            xlNotPlotted* = 1;
            xlZero* = 2;
        (* XlArrowHeadStyle *)
            xlArrowHeadStyleClosed* = 3;
            xlArrowHeadStyleDoubleClosed* = 5;
            xlArrowHeadStyleDoubleOpen* = 4;
            xlArrowHeadStyleNone* = -4142;
            xlArrowHeadStyleOpen* = 2;
        (* XlArrowHeadWidth *)
            xlArrowHeadWidthMedium* = -4138;
            xlArrowHeadWidthNarrow* = 1;
            xlArrowHeadWidthWide* = 3;
        (* XlHAlign *)
            xlHAlignCenter* = -4108;
            xlHAlignCenterAcrossSelection* = 7;
            xlHAlignDistributed* = -4117;
            xlHAlignFill* = 5;
            xlHAlignGeneral* = 1;
            xlHAlignJustify* = -4130;
            xlHAlignLeft* = -4131;
            xlHAlignRight* = -4152;
        (* XlTickLabelPosition *)
            xlTickLabelPositionHigh* = -4127;
            xlTickLabelPositionLow* = -4134;
            xlTickLabelPositionNextToAxis* = 4;
            xlTickLabelPositionNone* = -4142;
        (* XlLegendPosition *)
            xlLegendPositionBottom* = -4107;
            xlLegendPositionCorner* = 2;
            xlLegendPositionLeft* = -4131;
            xlLegendPositionRight* = -4152;
            xlLegendPositionTop* = -4160;
        (* XlChartPictureType *)
            xlStackScale* = 3;
            xlStack* = 2;
            xlStretch* = 1;
        (* XlChartPicturePlacement *)
            xlSides* = 1;
            xlEnd* = 2;
            xlEndSides* = 3;
            xlFront* = 4;
            xlFrontSides* = 5;
            xlFrontEnd* = 6;
            xlAllFaces* = 7;
        (* XlOrientation *)
            xlDownward* = -4170;
            xlHorizontal* = -4128;
            xlUpward* = -4171;
            xlVertical* = -4166;
        (* XlTickLabelOrientation *)
            xlTickLabelOrientationAutomatic* = -4105;
            xlTickLabelOrientationDownward* = -4170;
            xlTickLabelOrientationHorizontal* = -4128;
            xlTickLabelOrientationUpward* = -4171;
            xlTickLabelOrientationVertical* = -4166;
        (* XlBorderWeight *)
            xlHairline* = 1;
            xlMedium* = -4138;
            xlThick* = 4;
            xlThin* = 2;
        (* XlDataSeriesDate *)
            xlDay* = 1;
            xlMonth* = 3;
            xlWeekday* = 2;
            xlYear* = 4;
        (* XlUnderlineStyle *)
            xlUnderlineStyleDouble* = -4119;
            xlUnderlineStyleDoubleAccounting* = 5;
            xlUnderlineStyleNone* = -4142;
            xlUnderlineStyleSingle* = 2;
            xlUnderlineStyleSingleAccounting* = 4;
        (* XlErrorBarType *)
            xlErrorBarTypeCustom* = -4114;
            xlErrorBarTypeFixedValue* = 1;
            xlErrorBarTypePercent* = 2;
            xlErrorBarTypeStDev* = -4155;
            xlErrorBarTypeStError* = 4;
        (* XlTrendlineType *)
            xlExponential* = 5;
            xlLinear* = -4132;
            xlLogarithmic* = -4133;
            xlMovingAvg* = 6;
            xlPolynomial* = 3;
            xlPower* = 4;
        (* XlLineStyle *)
            xlContinuous* = 1;
            xlDash* = -4115;
            xlDashDot* = 4;
            xlDashDotDot* = 5;
            xlDot* = -4118;
            xlDouble* = -4119;
            xlSlantDashDot* = 13;
            xlLineStyleNone* = -4142;
        (* XlDataLabelsType *)
            xlDataLabelsShowNone* = -4142;
            xlDataLabelsShowValue* = 2;
            xlDataLabelsShowPercent* = 3;
            xlDataLabelsShowLabel* = 4;
            xlDataLabelsShowLabelAndPercent* = 5;
            xlDataLabelsShowBubbleSizes* = 6;
        (* XlMarkerStyle *)
            xlMarkerStyleAutomatic* = -4105;
            xlMarkerStyleCircle* = 8;
            xlMarkerStyleDash* = -4115;
            xlMarkerStyleDiamond* = 2;
            xlMarkerStyleDot* = -4118;
            xlMarkerStyleNone* = -4142;
            xlMarkerStylePicture* = -4147;
            xlMarkerStylePlus* = 9;
            xlMarkerStyleSquare* = 1;
            xlMarkerStyleStar* = 5;
            xlMarkerStyleTriangle* = 3;
            xlMarkerStyleX* = -4168;
        (* XlPictureConvertorType *)
            xlBMP* = 1;
            xlCGM* = 7;
            xlDRW* = 4;
            xlDXF* = 5;
            xlEPS* = 8;
            xlHGL* = 6;
            xlPCT* = 13;
            xlPCX* = 10;
            xlPIC* = 11;
            xlPLT* = 12;
            xlTIF* = 9;
            xlWMF* = 2;
            xlWPG* = 3;
        (* XlPattern *)
            xlPatternAutomatic* = -4105;
            xlPatternChecker* = 9;
            xlPatternCrissCross* = 16;
            xlPatternDown* = -4121;
            xlPatternGray16* = 17;
            xlPatternGray25* = -4124;
            xlPatternGray50* = -4125;
            xlPatternGray75* = -4126;
            xlPatternGray8* = 18;
            xlPatternGrid* = 15;
            xlPatternHorizontal* = -4128;
            xlPatternLightDown* = 13;
            xlPatternLightHorizontal* = 11;
            xlPatternLightUp* = 14;
            xlPatternLightVertical* = 12;
            xlPatternNone* = -4142;
            xlPatternSemiGray75* = 10;
            xlPatternSolid* = 1;
            xlPatternUp* = -4162;
            xlPatternVertical* = -4166;
        (* XlChartSplitType *)
            xlSplitByPosition* = 1;
            xlSplitByPercentValue* = 3;
            xlSplitByCustomSplit* = 4;
            xlSplitByValue* = 2;
        (* XlDataLabelPosition *)
            xlLabelPositionCenter* = -4108;
            xlLabelPositionAbove* = 0;
            xlLabelPositionBelow* = 1;
            xlLabelPositionLeft* = -4131;
            xlLabelPositionRight* = -4152;
            xlLabelPositionOutsideEnd* = 2;
            xlLabelPositionInsideEnd* = 3;
            xlLabelPositionInsideBase* = 4;
            xlLabelPositionBestFit* = 5;
            xlLabelPositionMixed* = 6;
            xlLabelPositionCustom* = 7;
        (* XlTimeUnit *)
            xlDays* = 0;
            xlMonths* = 1;
            xlYears* = 2;
        (* XlCategoryType *)
            xlCategoryScale* = 2;
            xlTimeScale* = 3;
            xlAutomaticScale* = -4105;
        (* XlBarShape *)
            xlBox* = 0;
            xlPyramidToPoint* = 1;
            xlPyramidToMax* = 2;
            xlCylinder* = 3;
            xlConeToPoint* = 4;
            xlConeToMax* = 5;
        (* XlChartType *)
            xlColumnClustered* = 51;
            xlColumnStacked* = 52;
            xlColumnStacked100* = 53;
            xl3DColumnClustered* = 54;
            xl3DColumnStacked* = 55;
            xl3DColumnStacked100* = 56;
            xlBarClustered* = 57;
            xlBarStacked* = 58;
            xlBarStacked100* = 59;
            xl3DBarClustered* = 60;
            xl3DBarStacked* = 61;
            xl3DBarStacked100* = 62;
            xlLineStacked* = 63;
            xlLineStacked100* = 64;
            xlLineMarkers* = 65;
            xlLineMarkersStacked* = 66;
            xlLineMarkersStacked100* = 67;
            xlPieOfPie* = 68;
            xlPieExploded* = 69;
            xl3DPieExploded* = 70;
            xlBarOfPie* = 71;
            xlXYScatterSmooth* = 72;
            xlXYScatterSmoothNoMarkers* = 73;
            xlXYScatterLines* = 74;
            xlXYScatterLinesNoMarkers* = 75;
            xlAreaStacked* = 76;
            xlAreaStacked100* = 77;
            xl3DAreaStacked* = 78;
            xl3DAreaStacked100* = 79;
            xlDoughnutExploded* = 80;
            xlRadarMarkers* = 81;
            xlRadarFilled* = 82;
            xlSurface* = 83;
            xlSurfaceWireframe* = 84;
            xlSurfaceTopView* = 85;
            xlSurfaceTopViewWireframe* = 86;
            xlBubble* = 15;
            xlBubble3DEffect* = 87;
            xlStockHLC* = 88;
            xlStockOHLC* = 89;
            xlStockVHLC* = 90;
            xlStockVOHLC* = 91;
            xlCylinderColClustered* = 92;
            xlCylinderColStacked* = 93;
            xlCylinderColStacked100* = 94;
            xlCylinderBarClustered* = 95;
            xlCylinderBarStacked* = 96;
            xlCylinderBarStacked100* = 97;
            xlCylinderCol* = 98;
            xlConeColClustered* = 99;
            xlConeColStacked* = 100;
            xlConeColStacked100* = 101;
            xlConeBarClustered* = 102;
            xlConeBarStacked* = 103;
            xlConeBarStacked100* = 104;
            xlConeCol* = 105;
            xlPyramidColClustered* = 106;
            xlPyramidColStacked* = 107;
            xlPyramidColStacked100* = 108;
            xlPyramidBarClustered* = 109;
            xlPyramidBarStacked* = 110;
            xlPyramidBarStacked100* = 111;
            xlPyramidCol* = 112;
            xl3DColumn* = -4100;
            xlLine* = 4;
            xl3DLine* = -4101;
            xl3DPie* = -4102;
            xlPie* = 5;
            xlXYScatter* = -4169;
            xl3DArea* = -4098;
            xlArea* = 1;
            xlDoughnut* = -4120;
            xlRadar* = -4151;
        (* XlChartItem *)
            xlDataLabel* = 0;
            xlChartArea* = 2;
            xlSeries* = 3;
            xlChartTitle* = 4;
            xlWalls* = 5;
            xlCorners* = 6;
            xlDataTable* = 7;
            xlTrendline* = 8;
            xlErrorBars* = 9;
            xlXErrorBars* = 10;
            xlYErrorBars* = 11;
            xlLegendEntry* = 12;
            xlLegendKey* = 13;
            xlShape* = 14;
            xlMajorGridlines* = 15;
            xlMinorGridlines* = 16;
            xlAxisTitle* = 17;
            xlUpBars* = 18;
            xlPlotArea* = 19;
            xlDownBars* = 20;
            xlAxis* = 21;
            xlSeriesLines* = 22;
            xlFloor* = 23;
            xlLegend* = 24;
            xlHiLoLines* = 25;
            xlDropLines* = 26;
            xlRadarAxisLabels* = 27;
            xlNothing* = 28;
            xlLeaderLines* = 29;
        (* XlSizeRepresents *)
            xlSizeIsWidth* = 2;
            xlSizeIsArea* = 1;
        (* XlInsertShiftDirection *)
            xlShiftDown* = -4121;
            xlShiftToRight* = -4161;
        (* XlDeleteShiftDirection *)
            xlShiftToLeft* = -4159;
            xlShiftUp* = -4162;
        (* XlDirection *)
            xlDown* = -4121;
            xlToLeft* = -4159;
            xlToRight* = -4161;
            xlUp* = -4162;
        (* XlConsolidationFunction *)
            xlAverage* = -4106;
            xlCount* = -4112;
            xlCountNums* = -4113;
            xlMax* = -4136;
            xlMin* = -4139;
            xlProduct* = -4149;
            xlStDev* = -4155;
            xlStDevP* = -4156;
            xlSum* = -4157;
            xlVar* = -4164;
            xlVarP* = -4165;
        (* XlSheetType *)
            xlChart* = -4109;
            xlDialogSheet* = -4116;
            xlExcel4IntlMacroSheet* = 4;
            xlExcel4MacroSheet* = 3;
            xlWorksheet* = -4167;
        (* XlLocationInTable *)
            xlColumnHeader* = -4110;
            xlColumnItem* = 5;
            xlDataHeader* = 3;
            xlDataItem* = 7;
            xlPageHeader* = 2;
            xlPageItem* = 6;
            xlRowHeader* = -4153;
            xlRowItem* = 4;
            xlTableBody* = 8;
        (* XlFindLookIn *)
            xlFormulas* = -4123;
            xlComments* = -4144;
            xlValues* = -4163;
        (* XlWindowType *)
            xlChartAsWindow* = 5;
            xlChartInPlace* = 4;
            xlClipboard* = 3;
            xlInfo* = -4129;
            xlWorkbook* = 1;
        (* XlPivotFieldDataType *)
            xlDate* = 2;
            xlNumber* = -4145;
            xlText* = -4158;
        (* XlCopyPictureFormat *)
            xlBitmap* = 2;
            xlPicture* = -4147;
        (* XlPivotTableSourceType *)
            xlConsolidation* = 3;
            xlDatabase* = 1;
            xlExternal* = 2;
            xlPivotTable* = -4148;
        (* XlReferenceStyle *)
            xlA1* = 1;
            xlR1C1* = -4150;
        (* XlMSApplication *)
            xlMicrosoftAccess* = 4;
            xlMicrosoftFoxPro* = 5;
            xlMicrosoftMail* = 3;
            xlMicrosoftPowerPoint* = 2;
            xlMicrosoftProject* = 6;
            xlMicrosoftSchedulePlus* = 7;
            xlMicrosoftWord* = 1;
        (* XlMouseButton *)
            xlNoButton* = 0;
            xlPrimaryButton* = 1;
            xlSecondaryButton* = 2;
        (* XlCutCopyMode *)
            xlCopy* = 1;
            xlCut* = 2;
        (* XlFillWith *)
            xlFillWithAll* = -4104;
            xlFillWithContents* = 2;
            xlFillWithFormats* = -4122;
        (* XlFilterAction *)
            xlFilterCopy* = 2;
            xlFilterInPlace* = 1;
        (* XlOrder *)
            xlDownThenOver* = 1;
            xlOverThenDown* = 2;
        (* XlLinkType *)
            xlLinkTypeExcelLinks* = 1;
            xlLinkTypeOLELinks* = 2;
        (* XlApplyNamesOrder *)
            xlColumnThenRow* = 2;
            xlRowThenColumn* = 1;
        (* XlEnableCancelKey *)
            xlDisabled* = 0;
            xlErrorHandler* = 2;
            xlInterrupt* = 1;
        (* XlPageBreak *)
            xlPageBreakAutomatic* = -4105;
            xlPageBreakManual* = -4135;
        (* XlOLEType *)
            xlOLEControl* = 2;
            xlOLEEmbed* = 1;
            xlOLELink* = 0;
        (* XlPageOrientation *)
            xlLandscape* = 2;
            xlPortrait* = 1;
        (* XlLinkInfo *)
            xlEditionDate* = 2;
            xlUpdateState* = 1;
        (* XlCommandUnderlines *)
            xlCommandUnderlinesAutomatic* = -4105;
            xlCommandUnderlinesOff* = -4146;
            xlCommandUnderlinesOn* = 1;
        (* XlOLEVerb *)
            xlVerbOpen* = 2;
            xlVerbPrimary* = 1;
        (* XlCalculation *)
            xlCalculationAutomatic* = -4105;
            xlCalculationManual* = -4135;
            xlCalculationSemiautomatic* = 2;
        (* XlFileAccess *)
            xlReadOnly* = 3;
            xlReadWrite* = 2;
        (* XlEditionType *)
            xlPublisher* = 1;
            xlSubscriber* = 2;
        (* XlObjectSize *)
            xlFitToPage* = 2;
            xlFullPage* = 3;
            xlScreenSize* = 1;
        (* XlLookAt *)
            xlPart* = 2;
            xlWhole* = 1;
        (* XlMailSystem *)
            xlMAPI* = 1;
            xlNoMailSystem* = 0;
            xlPowerTalk* = 2;
        (* XlLinkInfoType *)
            xlLinkInfoOLELinks* = 2;
            xlLinkInfoPublishers* = 5;
            xlLinkInfoSubscribers* = 6;
        (* XlCVError *)
            xlErrDiv0* = 2007;
            xlErrNA* = 2042;
            xlErrName* = 2029;
            xlErrNull* = 2000;
            xlErrNum* = 2036;
            xlErrRef* = 2023;
            xlErrValue* = 2015;
        (* XlEditionFormat *)
            xlBIFF* = 2;
            xlPICT* = 1;
            xlRTF* = 4;
            xlVALU* = 8;
        (* XlLink *)
            xlExcelLinks* = 1;
            xlOLELinks* = 2;
            xlPublishers* = 5;
            xlSubscribers* = 6;
        (* XlCellType *)
            xlCellTypeBlanks* = 4;
            xlCellTypeConstants* = 2;
            xlCellTypeFormulas* = -4123;
            xlCellTypeLastCell* = 11;
            xlCellTypeComments* = -4144;
            xlCellTypeVisible* = 12;
            xlCellTypeAllFormatConditions* = -4172;
            xlCellTypeSameFormatConditions* = -4173;
            xlCellTypeAllValidation* = -4174;
            xlCellTypeSameValidation* = -4175;
        (* XlArrangeStyle *)
            xlArrangeStyleCascade* = 7;
            xlArrangeStyleHorizontal* = -4128;
            xlArrangeStyleTiled* = 1;
            xlArrangeStyleVertical* = -4166;
        (* XlMousePointer *)
            xlIBeam* = 3;
            xlDefault* = -4143;
            xlNorthwestArrow* = 1;
            xlWait* = 2;
        (* XlEditionOptionsOption *)
            xlAutomaticUpdate* = 4;
            xlCancel* = 1;
            xlChangeAttributes* = 6;
            xlManualUpdate* = 5;
            xlOpenSource* = 3;
            xlSelect* = 3;
            xlSendPublisher* = 2;
            xlUpdateSubscriber* = 2;
        (* XlAutoFillType *)
            xlFillCopy* = 1;
            xlFillDays* = 5;
            xlFillDefault* = 0;
            xlFillFormats* = 3;
            xlFillMonths* = 7;
            xlFillSeries* = 2;
            xlFillValues* = 4;
            xlFillWeekdays* = 6;
            xlFillYears* = 8;
            xlGrowthTrend* = 10;
            xlLinearTrend* = 9;
        (* XlAutoFilterOperator *)
            xlAnd* = 1;
            xlBottom10Items* = 4;
            xlBottom10Percent* = 6;
            xlOr* = 2;
            xlTop10Items* = 3;
            xlTop10Percent* = 5;
        (* XlClipboardFormat *)
            xlClipboardFormatBIFF* = 8;
            xlClipboardFormatBIFF2* = 18;
            xlClipboardFormatBIFF3* = 20;
            xlClipboardFormatBIFF4* = 30;
            xlClipboardFormatBinary* = 15;
            xlClipboardFormatBitmap* = 9;
            xlClipboardFormatCGM* = 13;
            xlClipboardFormatCSV* = 5;
            xlClipboardFormatDIF* = 4;
            xlClipboardFormatDspText* = 12;
            xlClipboardFormatEmbeddedObject* = 21;
            xlClipboardFormatEmbedSource* = 22;
            xlClipboardFormatLink* = 11;
            xlClipboardFormatLinkSource* = 23;
            xlClipboardFormatLinkSourceDesc* = 32;
            xlClipboardFormatMovie* = 24;
            xlClipboardFormatNative* = 14;
            xlClipboardFormatObjectDesc* = 31;
            xlClipboardFormatObjectLink* = 19;
            xlClipboardFormatOwnerLink* = 17;
            xlClipboardFormatPICT* = 2;
            xlClipboardFormatPrintPICT* = 3;
            xlClipboardFormatRTF* = 7;
            xlClipboardFormatScreenPICT* = 29;
            xlClipboardFormatStandardFont* = 28;
            xlClipboardFormatStandardScale* = 27;
            xlClipboardFormatSYLK* = 6;
            xlClipboardFormatTable* = 16;
            xlClipboardFormatText* = 0;
            xlClipboardFormatToolFace* = 25;
            xlClipboardFormatToolFacePICT* = 26;
            xlClipboardFormatVALU* = 1;
            xlClipboardFormatWK1* = 10;
        (* XlFileFormat *)
            xlAddIn* = 18;
            xlCSV* = 6;
            xlCSVMac* = 22;
            xlCSVMSDOS* = 24;
            xlCSVWindows* = 23;
            xlDBF2* = 7;
            xlDBF3* = 8;
            xlDBF4* = 11;
            xlDIF* = 9;
            xlExcel2* = 16;
            xlExcel2FarEast* = 27;
            xlExcel3* = 29;
            xlExcel4* = 33;
            xlExcel5* = 39;
            xlExcel7* = 39;
            xlExcel9795* = 43;
            xlExcel4Workbook* = 35;
            xlIntlAddIn* = 26;
            xlIntlMacro* = 25;
            xlWorkbookNormal* = -4143;
            xlSYLK* = 2;
            xlTemplate* = 17;
            xlCurrentPlatformText* = -4158;
            xlTextMac* = 19;
            xlTextMSDOS* = 21;
            xlTextPrinter* = 36;
            xlTextWindows* = 20;
            xlWJ2WD1* = 14;
            xlWK1* = 5;
            xlWK1ALL* = 31;
            xlWK1FMT* = 30;
            xlWK3* = 15;
            xlWK4* = 38;
            xlWK3FM3* = 32;
            xlWKS* = 4;
            xlWorks2FarEast* = 28;
            xlWQ1* = 34;
            xlWJ3* = 40;
            xlWJ3FJ3* = 41;
        (* XlApplicationInternational *)
            xl24HourClock* = 33;
            xl4DigitYears* = 43;
            xlAlternateArraySeparator* = 16;
            xlColumnSeparator* = 14;
            xlCountryCode* = 1;
            xlCountrySetting* = 2;
            xlCurrencyBefore* = 37;
            xlCurrencyCode* = 25;
            xlCurrencyDigits* = 27;
            xlCurrencyLeadingZeros* = 40;
            xlCurrencyMinusSign* = 38;
            xlCurrencyNegative* = 28;
            xlCurrencySpaceBefore* = 36;
            xlCurrencyTrailingZeros* = 39;
            xlDateOrder* = 32;
            xlDateSeparator* = 17;
            xlDayCode* = 21;
            xlDayLeadingZero* = 42;
            xlDecimalSeparator* = 3;
            xlGeneralFormatName* = 26;
            xlHourCode* = 22;
            xlLeftBrace* = 12;
            xlLeftBracket* = 10;
            xlListSeparator* = 5;
            xlLowerCaseColumnLetter* = 9;
            xlLowerCaseRowLetter* = 8;
            xlMDY* = 44;
            xlMetric* = 35;
            xlMinuteCode* = 23;
            xlMonthCode* = 20;
            xlMonthLeadingZero* = 41;
            xlMonthNameChars* = 30;
            xlNoncurrencyDigits* = 29;
            xlNonEnglishFunctions* = 34;
            xlRightBrace* = 13;
            xlRightBracket* = 11;
            xlRowSeparator* = 15;
            xlSecondCode* = 24;
            xlThousandsSeparator* = 4;
            xlTimeLeadingZero* = 45;
            xlTimeSeparator* = 18;
            xlUpperCaseColumnLetter* = 7;
            xlUpperCaseRowLetter* = 6;
            xlWeekdayNameChars* = 31;
            xlYearCode* = 19;
        (* XlPageBreakExtent *)
            xlPageBreakFull* = 1;
            xlPageBreakPartial* = 2;
        (* XlCellInsertionMode *)
            xlOverwriteCells* = 0;
            xlInsertDeleteCells* = 1;
            xlInsertEntireRows* = 2;
        (* XlFormulaLabel *)
            xlNoLabels* = -4142;
            xlRowLabels* = 1;
            xlColumnLabels* = 2;
            xlMixedLabels* = 3;
        (* XlHighlightChangesTime *)
            xlSinceMyLastSave* = 1;
            xlAllChanges* = 2;
            xlNotYetReviewed* = 3;
        (* XlCommentDisplayMode *)
            xlNoIndicator* = 0;
            xlCommentIndicatorOnly* = -1;
            xlCommentAndIndicator* = 1;
        (* XlFormatConditionType *)
            xlCellValue* = 1;
            xlExpression* = 2;
        (* XlFormatConditionOperator *)
            xlBetween* = 1;
            xlNotBetween* = 2;
            xlEqual* = 3;
            xlNotEqual* = 4;
            xlGreater* = 5;
            xlLess* = 6;
            xlGreaterEqual* = 7;
            xlLessEqual* = 8;
        (* XlEnableSelection *)
            xlNoRestrictions* = 0;
            xlUnlockedCells* = 1;
            xlNoSelection* = -4142;
        (* XlDVType *)
            xlValidateInputOnly* = 0;
            xlValidateWholeNumber* = 1;
            xlValidateDecimal* = 2;
            xlValidateList* = 3;
            xlValidateDate* = 4;
            xlValidateTime* = 5;
            xlValidateTextLength* = 6;
            xlValidateCustom* = 7;
        (* XlIMEMode *)
            xlIMEModeNoControl* = 0;
            xlIMEModeOn* = 1;
            xlIMEModeOff* = 2;
            xlIMEModeDisable* = 3;
            xlIMEModeHiragana* = 4;
            xlIMEModeKatakana* = 5;
            xlIMEModeKatakanaHalf* = 6;
            xlIMEModeAlphaFull* = 7;
            xlIMEModeAlpha* = 8;
            xlIMEModeHangulFull* = 9;
            xlIMEModeHangul* = 10;
        (* XlDVAlertStyle *)
            xlValidAlertStop* = 1;
            xlValidAlertWarning* = 2;
            xlValidAlertInformation* = 3;
        (* XlChartLocation *)
            xlLocationAsNewSheet* = 1;
            xlLocationAsObject* = 2;
            xlLocationAutomatic* = 3;
        (* XlPaperSize *)
            xlPaper10x14* = 16;
            xlPaper11x17* = 17;
            xlPaperA3* = 8;
            xlPaperA4* = 9;
            xlPaperA4Small* = 10;
            xlPaperA5* = 11;
            xlPaperB4* = 12;
            xlPaperB5* = 13;
            xlPaperCsheet* = 24;
            xlPaperDsheet* = 25;
            xlPaperEnvelope10* = 20;
            xlPaperEnvelope11* = 21;
            xlPaperEnvelope12* = 22;
            xlPaperEnvelope14* = 23;
            xlPaperEnvelope9* = 19;
            xlPaperEnvelopeB4* = 33;
            xlPaperEnvelopeB5* = 34;
            xlPaperEnvelopeB6* = 35;
            xlPaperEnvelopeC3* = 29;
            xlPaperEnvelopeC4* = 30;
            xlPaperEnvelopeC5* = 28;
            xlPaperEnvelopeC6* = 31;
            xlPaperEnvelopeC65* = 32;
            xlPaperEnvelopeDL* = 27;
            xlPaperEnvelopeItaly* = 36;
            xlPaperEnvelopeMonarch* = 37;
            xlPaperEnvelopePersonal* = 38;
            xlPaperEsheet* = 26;
            xlPaperExecutive* = 7;
            xlPaperFanfoldLegalGerman* = 41;
            xlPaperFanfoldStdGerman* = 40;
            xlPaperFanfoldUS* = 39;
            xlPaperFolio* = 14;
            xlPaperLedger* = 4;
            xlPaperLegal* = 5;
            xlPaperLetter* = 1;
            xlPaperLetterSmall* = 2;
            xlPaperNote* = 18;
            xlPaperQuarto* = 15;
            xlPaperStatement* = 6;
            xlPaperTabloid* = 3;
            xlPaperUser* = 256;
        (* XlPasteSpecialOperation *)
            xlPasteSpecialOperationAdd* = 2;
            xlPasteSpecialOperationDivide* = 5;
            xlPasteSpecialOperationMultiply* = 4;
            xlPasteSpecialOperationNone* = -4142;
            xlPasteSpecialOperationSubtract* = 3;
        (* XlPasteType *)
            xlPasteAll* = -4104;
            xlPasteAllExceptBorders* = 6;
            xlPasteFormats* = -4122;
            xlPasteFormulas* = -4123;
            xlPasteComments* = -4144;
            xlPasteValues* = -4163;
        (* XlPhoneticCharacterType *)
            xlKatakanaHalf* = 0;
            xlKatakana* = 1;
            xlHiragana* = 2;
            xlNoConversion* = 3;
        (* XlPhoneticAlignment *)
            xlPhoneticAlignNoControl* = 0;
            xlPhoneticAlignLeft* = 1;
            xlPhoneticAlignCenter* = 2;
            xlPhoneticAlignDistributed* = 3;
        (* XlPictureAppearance *)
            xlPrinter* = 2;
            xlScreen* = 1;
        (* XlPivotFieldOrientation *)
            xlColumnField* = 2;
            xlDataField* = 4;
            xlHidden* = 0;
            xlPageField* = 3;
            xlRowField* = 1;
        (* XlPivotFieldCalculation *)
            xlDifferenceFrom* = 2;
            xlIndex* = 9;
            xlNoAdditionalCalculation* = -4143;
            xlPercentDifferenceFrom* = 4;
            xlPercentOf* = 3;
            xlPercentOfColumn* = 7;
            xlPercentOfRow* = 6;
            xlPercentOfTotal* = 8;
            xlRunningTotal* = 5;
        (* XlPlacement *)
            xlFreeFloating* = 3;
            xlMove* = 2;
            xlMoveAndSize* = 1;
        (* XlPlatform *)
            xlMacintosh* = 1;
            xlMSDOS* = 3;
            xlWindows* = 2;
        (* XlPrintLocation *)
            xlPrintSheetEnd* = 1;
            xlPrintInPlace* = 16;
            xlPrintNoComments* = -4142;
        (* XlPriority *)
            xlPriorityHigh* = -4127;
            xlPriorityLow* = -4134;
            xlPriorityNormal* = -4143;
        (* XlPTSelectionMode *)
            xlLabelOnly* = 1;
            xlDataAndLabel* = 0;
            xlDataOnly* = 2;
            xlOrigin* = 3;
            xlButton* = 15;
            xlBlanks* = 4;
        (* XlRangeAutoFormat *)
            xlRangeAutoFormat3DEffects1* = 13;
            xlRangeAutoFormat3DEffects2* = 14;
            xlRangeAutoFormatAccounting1* = 4;
            xlRangeAutoFormatAccounting2* = 5;
            xlRangeAutoFormatAccounting3* = 6;
            xlRangeAutoFormatAccounting4* = 17;
            xlRangeAutoFormatClassic1* = 1;
            xlRangeAutoFormatClassic2* = 2;
            xlRangeAutoFormatClassic3* = 3;
            xlRangeAutoFormatColor1* = 7;
            xlRangeAutoFormatColor2* = 8;
            xlRangeAutoFormatColor3* = 9;
            xlRangeAutoFormatList1* = 10;
            xlRangeAutoFormatList2* = 11;
            xlRangeAutoFormatList3* = 12;
            xlRangeAutoFormatLocalFormat1* = 15;
            xlRangeAutoFormatLocalFormat2* = 16;
            xlRangeAutoFormatLocalFormat3* = 19;
            xlRangeAutoFormatLocalFormat4* = 20;
            xlRangeAutoFormatNone* = -4142;
            xlRangeAutoFormatSimple* = -4154;
        (* XlReferenceType *)
            xlAbsolute* = 1;
            xlAbsRowRelColumn* = 2;
            xlRelative* = 4;
            xlRelRowAbsColumn* = 3;
        (* XlRoutingSlipDelivery *)
            xlAllAtOnce* = 2;
            xlOneAfterAnother* = 1;
        (* XlRoutingSlipStatus *)
            xlNotYetRouted* = 0;
            xlRoutingComplete* = 2;
            xlRoutingInProgress* = 1;
        (* XlRunAutoMacro *)
            xlAutoActivate* = 3;
            xlAutoClose* = 2;
            xlAutoDeactivate* = 4;
            xlAutoOpen* = 1;
        (* XlSaveAction *)
            xlDoNotSaveChanges* = 2;
            xlSaveChanges* = 1;
        (* XlSaveAsAccessMode *)
            xlExclusive* = 3;
            xlNoChange* = 1;
            xlShared* = 2;
        (* XlSaveConflictResolution *)
            xlLocalSessionChanges* = 2;
            xlOtherSessionChanges* = 3;
            xlUserResolution* = 1;
        (* XlSearchDirection *)
            xlNext* = 1;
            xlPrevious* = 2;
        (* XlSearchOrder *)
            xlByColumns* = 2;
            xlByRows* = 1;
        (* XlSheetVisibility *)
            xlSheetVisible* = -1;
            xlSheetHidden* = 0;
            xlSheetVeryHidden* = 2;
        (* XlSortMethod *)
            xlPinYin* = 1;
            xlStroke* = 2;
        (* XlSortMethodOld *)
            xlCodePage* = 2;
            xlSyllabary* = 1;
        (* XlSortOrder *)
            xlAscending* = 1;
            xlDescending* = 2;
        (* XlSortOrientation *)
            xlSortRows* = 2;
            xlSortColumns* = 1;
        (* XlSortType *)
            xlSortLabels* = 2;
            xlSortValues* = 1;
        (* XlSpecialCellsValue *)
            xlErrors* = 16;
            xlLogical* = 4;
            xlNumbers* = 1;
            xlTextValues* = 2;
        (* XlSubscribeToFormat *)
            xlSubscribeToPicture* = -4147;
            xlSubscribeToText* = -4158;
        (* XlSummaryRow *)
            xlSummaryAbove* = 0;
            xlSummaryBelow* = 1;
        (* XlSummaryColumn *)
            xlSummaryOnLeft* = -4131;
            xlSummaryOnRight* = -4152;
        (* XlSummaryReportType *)
            xlSummaryPivotTable* = -4148;
            xlStandardSummary* = 1;
        (* XlTabPosition *)
            xlTabPositionFirst* = 0;
            xlTabPositionLast* = 1;
        (* XlTextParsingType *)
            xlDelimited* = 1;
            xlFixedWidth* = 2;
        (* XlTextQualifier *)
            xlTextQualifierDoubleQuote* = 1;
            xlTextQualifierNone* = -4142;
            xlTextQualifierSingleQuote* = 2;
        (* XlWBATemplate *)
            xlWBATChart* = -4109;
            xlWBATExcel4IntlMacroSheet* = 4;
            xlWBATExcel4MacroSheet* = 3;
            xlWBATWorksheet* = -4167;
        (* XlWindowView *)
            xlNormalView* = 1;
            xlPageBreakPreview* = 2;
        (* XlXLMMacroType *)
            xlCommand* = 2;
            xlFunction* = 1;
            xlNotXLM* = 3;
        (* XlYesNoGuess *)
            xlGuess* = 0;
            xlNo* = 2;
            xlYes* = 1;
        (* XlDisplayShapes *)
            xlDisplayShapes* = -4104;
            xlHide* = 3;
            xlPlaceholders* = 2;
        (* XlBordersIndex *)
            xlInsideHorizontal* = 12;
            xlInsideVertical* = 11;
            xlDiagonalDown* = 5;
            xlDiagonalUp* = 6;
            xlEdgeBottom* = 9;
            xlEdgeLeft* = 7;
            xlEdgeRight* = 10;
            xlEdgeTop* = 8;
        (* XlToolbarProtection *)
            xlNoButtonChanges* = 1;
            xlNoChanges* = 4;
            xlNoDockingChanges* = 3;
            xlToolbarProtectionNone* = -4143;
            xlNoShapeChanges* = 2;
        (* XlBuiltInDialog *)
            xlDialogOpen* = 1;
            xlDialogOpenLinks* = 2;
            xlDialogSaveAs* = 5;
            xlDialogFileDelete* = 6;
            xlDialogPageSetup* = 7;
            xlDialogPrint* = 8;
            xlDialogPrinterSetup* = 9;
            xlDialogArrangeAll* = 12;
            xlDialogWindowSize* = 13;
            xlDialogWindowMove* = 14;
            xlDialogRun* = 17;
            xlDialogSetPrintTitles* = 23;
            xlDialogFont* = 26;
            xlDialogDisplay* = 27;
            xlDialogProtectDocument* = 28;
            xlDialogCalculation* = 32;
            xlDialogExtract* = 35;
            xlDialogDataDelete* = 36;
            xlDialogSort* = 39;
            xlDialogDataSeries* = 40;
            xlDialogTable* = 41;
            xlDialogFormatNumber* = 42;
            xlDialogAlignment* = 43;
            xlDialogStyle* = 44;
            xlDialogBorder* = 45;
            xlDialogCellProtection* = 46;
            xlDialogColumnWidth* = 47;
            xlDialogClear* = 52;
            xlDialogPasteSpecial* = 53;
            xlDialogEditDelete* = 54;
            xlDialogInsert* = 55;
            xlDialogPasteNames* = 58;
            xlDialogDefineName* = 61;
            xlDialogCreateNames* = 62;
            xlDialogFormulaGoto* = 63;
            xlDialogFormulaFind* = 64;
            xlDialogGalleryArea* = 67;
            xlDialogGalleryBar* = 68;
            xlDialogGalleryColumn* = 69;
            xlDialogGalleryLine* = 70;
            xlDialogGalleryPie* = 71;
            xlDialogGalleryScatter* = 72;
            xlDialogCombination* = 73;
            xlDialogGridlines* = 76;
            xlDialogAxes* = 78;
            xlDialogAttachText* = 80;
            xlDialogPatterns* = 84;
            xlDialogMainChart* = 85;
            xlDialogOverlay* = 86;
            xlDialogScale* = 87;
            xlDialogFormatLegend* = 88;
            xlDialogFormatText* = 89;
            xlDialogParse* = 91;
            xlDialogUnhide* = 94;
            xlDialogWorkspace* = 95;
            xlDialogActivate* = 103;
            xlDialogCopyPicture* = 108;
            xlDialogDeleteName* = 110;
            xlDialogDeleteFormat* = 111;
            xlDialogNew* = 119;
            xlDialogRowHeight* = 127;
            xlDialogFormatMove* = 128;
            xlDialogFormatSize* = 129;
            xlDialogFormulaReplace* = 130;
            xlDialogSelectSpecial* = 132;
            xlDialogApplyNames* = 133;
            xlDialogReplaceFont* = 134;
            xlDialogSplit* = 137;
            xlDialogOutline* = 142;
            xlDialogSaveWorkbook* = 145;
            xlDialogCopyChart* = 147;
            xlDialogFormatFont* = 150;
            xlDialogNote* = 154;
            xlDialogSetUpdateStatus* = 159;
            xlDialogColorPalette* = 161;
            xlDialogChangeLink* = 166;
            xlDialogAppMove* = 170;
            xlDialogAppSize* = 171;
            xlDialogMainChartType* = 185;
            xlDialogOverlayChartType* = 186;
            xlDialogOpenMail* = 188;
            xlDialogSendMail* = 189;
            xlDialogStandardFont* = 190;
            xlDialogConsolidate* = 191;
            xlDialogSortSpecial* = 192;
            xlDialogGallery3dArea* = 193;
            xlDialogGallery3dColumn* = 194;
            xlDialogGallery3dLine* = 195;
            xlDialogGallery3dPie* = 196;
            xlDialogView3d* = 197;
            xlDialogGoalSeek* = 198;
            xlDialogWorkgroup* = 199;
            xlDialogFillGroup* = 200;
            xlDialogUpdateLink* = 201;
            xlDialogPromote* = 202;
            xlDialogDemote* = 203;
            xlDialogShowDetail* = 204;
            xlDialogObjectProperties* = 207;
            xlDialogSaveNewObject* = 208;
            xlDialogApplyStyle* = 212;
            xlDialogAssignToObject* = 213;
            xlDialogObjectProtection* = 214;
            xlDialogCreatePublisher* = 217;
            xlDialogSubscribeTo* = 218;
            xlDialogShowToolbar* = 220;
            xlDialogPrintPreview* = 222;
            xlDialogEditColor* = 223;
            xlDialogFormatMain* = 225;
            xlDialogFormatOverlay* = 226;
            xlDialogEditSeries* = 228;
            xlDialogDefineStyle* = 229;
            xlDialogGalleryRadar* = 249;
            xlDialogEditionOptions* = 251;
            xlDialogZoom* = 256;
            xlDialogInsertObject* = 259;
            xlDialogSize* = 261;
            xlDialogMove* = 262;
            xlDialogFormatAuto* = 269;
            xlDialogGallery3dBar* = 272;
            xlDialogGallery3dSurface* = 273;
            xlDialogCustomizeToolbar* = 276;
            xlDialogWorkbookAdd* = 281;
            xlDialogWorkbookMove* = 282;
            xlDialogWorkbookCopy* = 283;
            xlDialogWorkbookOptions* = 284;
            xlDialogSaveWorkspace* = 285;
            xlDialogChartWizard* = 288;
            xlDialogAssignToTool* = 293;
            xlDialogPlacement* = 300;
            xlDialogFillWorkgroup* = 301;
            xlDialogWorkbookNew* = 302;
            xlDialogScenarioCells* = 305;
            xlDialogScenarioAdd* = 307;
            xlDialogScenarioEdit* = 308;
            xlDialogScenarioSummary* = 311;
            xlDialogPivotTableWizard* = 312;
            xlDialogPivotFieldProperties* = 313;
            xlDialogOptionsCalculation* = 318;
            xlDialogOptionsEdit* = 319;
            xlDialogOptionsView* = 320;
            xlDialogAddinManager* = 321;
            xlDialogMenuEditor* = 322;
            xlDialogAttachToolbars* = 323;
            xlDialogOptionsChart* = 325;
            xlDialogVbaInsertFile* = 328;
            xlDialogVbaProcedureDefinition* = 330;
            xlDialogRoutingSlip* = 336;
            xlDialogMailLogon* = 339;
            xlDialogInsertPicture* = 342;
            xlDialogGalleryDoughnut* = 344;
            xlDialogChartTrend* = 350;
            xlDialogWorkbookInsert* = 354;
            xlDialogOptionsTransition* = 355;
            xlDialogOptionsGeneral* = 356;
            xlDialogFilterAdvanced* = 370;
            xlDialogMailNextLetter* = 378;
            xlDialogDataLabel* = 379;
            xlDialogInsertTitle* = 380;
            xlDialogFontProperties* = 381;
            xlDialogMacroOptions* = 382;
            xlDialogWorkbookUnhide* = 384;
            xlDialogWorkbookName* = 386;
            xlDialogGalleryCustom* = 388;
            xlDialogAddChartAutoformat* = 390;
            xlDialogChartAddData* = 392;
            xlDialogTabOrder* = 394;
            xlDialogSubtotalCreate* = 398;
            xlDialogWorkbookTabSplit* = 415;
            xlDialogWorkbookProtect* = 417;
            xlDialogScrollbarProperties* = 420;
            xlDialogPivotShowPages* = 421;
            xlDialogTextToColumns* = 422;
            xlDialogFormatCharttype* = 423;
            xlDialogPivotFieldGroup* = 433;
            xlDialogPivotFieldUngroup* = 434;
            xlDialogCheckboxProperties* = 435;
            xlDialogLabelProperties* = 436;
            xlDialogListboxProperties* = 437;
            xlDialogEditboxProperties* = 438;
            xlDialogOpenText* = 441;
            xlDialogPushbuttonProperties* = 445;
            xlDialogFilter* = 447;
            xlDialogFunctionWizard* = 450;
            xlDialogSaveCopyAs* = 456;
            xlDialogOptionsListsAdd* = 458;
            xlDialogSeriesAxes* = 460;
            xlDialogSeriesX* = 461;
            xlDialogSeriesY* = 462;
            xlDialogErrorbarX* = 463;
            xlDialogErrorbarY* = 464;
            xlDialogFormatChart* = 465;
            xlDialogSeriesOrder* = 466;
            xlDialogMailEditMailer* = 470;
            xlDialogStandardWidth* = 472;
            xlDialogScenarioMerge* = 473;
            xlDialogProperties* = 474;
            xlDialogSummaryInfo* = 474;
            xlDialogFindFile* = 475;
            xlDialogActiveCellFont* = 476;
            xlDialogVbaMakeAddin* = 478;
            xlDialogFileSharing* = 481;
            xlDialogAutoCorrect* = 485;
            xlDialogCustomViews* = 493;
            xlDialogInsertNameLabel* = 496;
            xlDialogSeriesShape* = 504;
            xlDialogChartOptionsDataLabels* = 505;
            xlDialogChartOptionsDataTable* = 506;
            xlDialogSetBackgroundPicture* = 509;
            xlDialogDataValidation* = 525;
            xlDialogChartType* = 526;
            xlDialogChartLocation* = 527;
            xlDialogPhonetic* = 538;
            xlDialogChartSourceData* = 541;
            xlDialogSeriesOptions* = 557;
            xlDialogPivotTableOptions* = 567;
            xlDialogPivotSolveOrder* = 568;
            xlDialogPivotCalculatedField* = 570;
            xlDialogPivotCalculatedItem* = 572;
            xlDialogConditionalFormatting* = 583;
            xlDialogInsertHyperlink* = 596;
            xlDialogProtectSharing* = 620;
        (* XlParameterType *)
            xlPrompt* = 0;
            xlConstant* = 1;
            xlRange* = 2;
        (* XlParameterDataType *)
            xlParamTypeUnknown* = 0;
            xlParamTypeChar* = 1;
            xlParamTypeNumeric* = 2;
            xlParamTypeDecimal* = 3;
            xlParamTypeInteger* = 4;
            xlParamTypeSmallInt* = 5;
            xlParamTypeFloat* = 6;
            xlParamTypeReal* = 7;
            xlParamTypeDouble* = 8;
            xlParamTypeVarChar* = 12;
            xlParamTypeDate* = 9;
            xlParamTypeTime* = 10;
            xlParamTypeTimestamp* = 11;
            xlParamTypeLongVarChar* = -1;
            xlParamTypeBinary* = -2;
            xlParamTypeVarBinary* = -3;
            xlParamTypeLongVarBinary* = -4;
            xlParamTypeBigInt* = -5;
            xlParamTypeTinyInt* = -6;
            xlParamTypeBit* = -7;
        (* XlFormControl *)
            xlButtonControl* = 0;
            xlCheckBox* = 1;
            xlDropDown* = 2;
            xlEditBox* = 3;
            xlGroupBox* = 4;
            xlLabel* = 5;
            xlListBox* = 6;
            xlOptionButton* = 7;
            xlScrollBar* = 8;
            xlSpinner* = 9;


    TYPE
        Adjustments* = POINTER TO RECORD (CtlT.Object) END;
        CalloutFormat* = POINTER TO RECORD (CtlT.Object) END;
        ColorFormat* = POINTER TO RECORD (CtlT.Object) END;
        LineFormat* = POINTER TO RECORD (CtlT.Object) END;
        ShapeNode* = POINTER TO RECORD (CtlT.Object) END;
        ShapeNodes* = POINTER TO RECORD (CtlT.Object) END;
        PictureFormat* = POINTER TO RECORD (CtlT.Object) END;
        ShadowFormat* = POINTER TO RECORD (CtlT.Object) END;
        TextEffectFormat* = POINTER TO RECORD (CtlT.Object) END;
        ThreeDFormat* = POINTER TO RECORD (CtlT.Object) END;
        FillFormat* = POINTER TO RECORD (CtlT.Object) END;
        Constants* = INTEGER;
        XlCreator* = INTEGER;
        XlChartGallery* = INTEGER;
        XlColorIndex* = INTEGER;
        XlEndStyleCap* = INTEGER;
        XlRowCol* = INTEGER;
        XlScaleType* = INTEGER;
        XlDataSeriesType* = INTEGER;
        XlAxisCrosses* = INTEGER;
        XlAxisGroup* = INTEGER;
        XlBackground* = INTEGER;
        XlWindowState* = INTEGER;
        XlAxisType* = INTEGER;
        XlArrowHeadLength* = INTEGER;
        XlVAlign* = INTEGER;
        XlTickMark* = INTEGER;
        XlErrorBarDirection* = INTEGER;
        XlErrorBarInclude* = INTEGER;
        XlDisplayBlanksAs* = INTEGER;
        XlArrowHeadStyle* = INTEGER;
        XlArrowHeadWidth* = INTEGER;
        XlHAlign* = INTEGER;
        XlTickLabelPosition* = INTEGER;
        XlLegendPosition* = INTEGER;
        XlChartPictureType* = INTEGER;
        XlChartPicturePlacement* = INTEGER;
        XlOrientation* = INTEGER;
        XlTickLabelOrientation* = INTEGER;
        XlBorderWeight* = INTEGER;
        XlDataSeriesDate* = INTEGER;
        XlUnderlineStyle* = INTEGER;
        XlErrorBarType* = INTEGER;
        XlTrendlineType* = INTEGER;
        XlLineStyle* = INTEGER;
        XlDataLabelsType* = INTEGER;
        XlMarkerStyle* = INTEGER;
        XlPictureConvertorType* = INTEGER;
        XlPattern* = INTEGER;
        XlChartSplitType* = INTEGER;
        XlDataLabelPosition* = INTEGER;
        XlTimeUnit* = INTEGER;
        XlCategoryType* = INTEGER;
        XlBarShape* = INTEGER;
        XlChartType* = INTEGER;
        XlChartItem* = INTEGER;
        XlSizeRepresents* = INTEGER;
        XlInsertShiftDirection* = INTEGER;
        XlDeleteShiftDirection* = INTEGER;
        XlDirection* = INTEGER;
        XlConsolidationFunction* = INTEGER;
        XlSheetType* = INTEGER;
        XlLocationInTable* = INTEGER;
        XlFindLookIn* = INTEGER;
        XlWindowType* = INTEGER;
        XlPivotFieldDataType* = INTEGER;
        XlCopyPictureFormat* = INTEGER;
        XlPivotTableSourceType* = INTEGER;
        XlReferenceStyle* = INTEGER;
        XlMSApplication* = INTEGER;
        XlMouseButton* = INTEGER;
        XlCutCopyMode* = INTEGER;
        XlFillWith* = INTEGER;
        XlFilterAction* = INTEGER;
        XlOrder* = INTEGER;
        XlLinkType* = INTEGER;
        XlApplyNamesOrder* = INTEGER;
        XlEnableCancelKey* = INTEGER;
        XlPageBreak* = INTEGER;
        XlOLEType* = INTEGER;
        XlPageOrientation* = INTEGER;
        XlLinkInfo* = INTEGER;
        XlCommandUnderlines* = INTEGER;
        XlOLEVerb* = INTEGER;
        XlCalculation* = INTEGER;
        XlFileAccess* = INTEGER;
        XlEditionType* = INTEGER;
        XlObjectSize* = INTEGER;
        XlLookAt* = INTEGER;
        XlMailSystem* = INTEGER;
        XlLinkInfoType* = INTEGER;
        XlCVError* = INTEGER;
        XlEditionFormat* = INTEGER;
        XlLink* = INTEGER;
        XlCellType* = INTEGER;
        XlArrangeStyle* = INTEGER;
        XlMousePointer* = INTEGER;
        XlEditionOptionsOption* = INTEGER;
        XlAutoFillType* = INTEGER;
        XlAutoFilterOperator* = INTEGER;
        XlClipboardFormat* = INTEGER;
        XlFileFormat* = INTEGER;
        XlApplicationInternational* = INTEGER;
        XlPageBreakExtent* = INTEGER;
        XlCellInsertionMode* = INTEGER;
        XlFormulaLabel* = INTEGER;
        XlHighlightChangesTime* = INTEGER;
        XlCommentDisplayMode* = INTEGER;
        XlFormatConditionType* = INTEGER;
        XlFormatConditionOperator* = INTEGER;
        XlEnableSelection* = INTEGER;
        XlDVType* = INTEGER;
        XlIMEMode* = INTEGER;
        XlDVAlertStyle* = INTEGER;
        XlChartLocation* = INTEGER;
        XlPaperSize* = INTEGER;
        XlPasteSpecialOperation* = INTEGER;
        XlPasteType* = INTEGER;
        XlPhoneticCharacterType* = INTEGER;
        XlPhoneticAlignment* = INTEGER;
        XlPictureAppearance* = INTEGER;
        XlPivotFieldOrientation* = INTEGER;
        XlPivotFieldCalculation* = INTEGER;
        XlPlacement* = INTEGER;
        XlPlatform* = INTEGER;
        XlPrintLocation* = INTEGER;
        XlPriority* = INTEGER;
        XlPTSelectionMode* = INTEGER;
        XlRangeAutoFormat* = INTEGER;
        XlReferenceType* = INTEGER;
        XlRoutingSlipDelivery* = INTEGER;
        XlRoutingSlipStatus* = INTEGER;
        XlRunAutoMacro* = INTEGER;
        XlSaveAction* = INTEGER;
        XlSaveAsAccessMode* = INTEGER;
        XlSaveConflictResolution* = INTEGER;
        XlSearchDirection* = INTEGER;
        XlSearchOrder* = INTEGER;
        XlSheetVisibility* = INTEGER;
        XlSortMethod* = INTEGER;
        XlSortMethodOld* = INTEGER;
        XlSortOrder* = INTEGER;
        XlSortOrientation* = INTEGER;
        XlSortType* = INTEGER;
        XlSpecialCellsValue* = INTEGER;
        XlSubscribeToFormat* = INTEGER;
        XlSummaryRow* = INTEGER;
        XlSummaryColumn* = INTEGER;
        XlSummaryReportType* = INTEGER;
        XlTabPosition* = INTEGER;
        XlTextParsingType* = INTEGER;
        XlTextQualifier* = INTEGER;
        XlWBATemplate* = INTEGER;
        XlWindowView* = INTEGER;
        XlXLMMacroType* = INTEGER;
        XlYesNoGuess* = INTEGER;
        XlDisplayShapes* = INTEGER;
        XlBordersIndex* = INTEGER;
        XlToolbarProtection* = INTEGER;
        XlBuiltInDialog* = INTEGER;
        XlParameterType* = INTEGER;
        XlParameterDataType* = INTEGER;
        XlFormControl* = INTEGER;
        _Application* = POINTER TO RECORD (CtlT.Object) END;
        _Chart* = POINTER TO RECORD (CtlT.Object) END;
        Sheets* = POINTER TO RECORD (CtlT.Object) END;
        _Worksheet* = POINTER TO RECORD (CtlT.Object) END;
        _Global* = POINTER TO RECORD (CtlT.Object) END;
        _Workbook* = POINTER TO RECORD (CtlT.Object) END;
        Workbooks* = POINTER TO RECORD (CtlT.Object) END;
        Font* = POINTER TO RECORD (CtlT.Object) END;
        Window* = POINTER TO RECORD (CtlT.Object) END;
        Windows* = POINTER TO RECORD (CtlT.Object) END;
        AppEvents* = POINTER TO ABSTRACT RECORD (CtlT.OutObject) END;
        WorksheetFunction* = POINTER TO RECORD (CtlT.Object) END;
        Range* = POINTER TO RECORD (CtlT.Object) END;
        ChartEvents* = POINTER TO ABSTRACT RECORD (CtlT.OutObject) END;
        VPageBreak* = POINTER TO RECORD (CtlT.Object) END;
        HPageBreak* = POINTER TO RECORD (CtlT.Object) END;
        HPageBreaks* = POINTER TO RECORD (CtlT.Object) END;
        VPageBreaks* = POINTER TO RECORD (CtlT.Object) END;
        RecentFile* = POINTER TO RECORD (CtlT.Object) END;
        RecentFiles* = POINTER TO RECORD (CtlT.Object) END;
        DocEvents* = POINTER TO ABSTRACT RECORD (CtlT.OutObject) END;
        Style* = POINTER TO RECORD (CtlT.Object) END;
        Styles* = POINTER TO RECORD (CtlT.Object) END;
        Borders* = POINTER TO RECORD (CtlT.Object) END;
        AddIn* = POINTER TO RECORD (CtlT.Object) END;
        AddIns* = POINTER TO RECORD (CtlT.Object) END;
        Toolbar* = POINTER TO RECORD (CtlT.Object) END;
        Toolbars* = POINTER TO RECORD (CtlT.Object) END;
        ToolbarButton* = POINTER TO RECORD (CtlT.Object) END;
        ToolbarButtons* = POINTER TO RECORD (CtlT.Object) END;
        Areas* = POINTER TO RECORD (CtlT.Object) END;
        WorkbookEvents* = POINTER TO ABSTRACT RECORD (CtlT.OutObject) END;
        MenuBars* = POINTER TO RECORD (CtlT.Object) END;
        MenuBar* = POINTER TO RECORD (CtlT.Object) END;
        Menus* = POINTER TO RECORD (CtlT.Object) END;
        Menu* = POINTER TO RECORD (CtlT.Object) END;
        MenuItems* = POINTER TO RECORD (CtlT.Object) END;
        MenuItem* = POINTER TO RECORD (CtlT.Object) END;
        Charts* = POINTER TO RECORD (CtlT.Object) END;
        DrawingObjects* = POINTER TO RECORD (CtlT.Object) END;
        PivotCache* = POINTER TO RECORD (CtlT.Object) END;
        PivotCaches* = POINTER TO RECORD (CtlT.Object) END;
        PivotFormula* = POINTER TO RECORD (CtlT.Object) END;
        PivotFormulas* = POINTER TO RECORD (CtlT.Object) END;
        PivotTable* = POINTER TO RECORD (CtlT.Object) END;
        PivotTables* = POINTER TO RECORD (CtlT.Object) END;
        PivotField* = POINTER TO RECORD (CtlT.Object) END;
        PivotFields* = POINTER TO RECORD (CtlT.Object) END;
        CalculatedFields* = POINTER TO RECORD (CtlT.Object) END;
        PivotItem* = POINTER TO RECORD (CtlT.Object) END;
        PivotItems* = POINTER TO RECORD (CtlT.Object) END;
        CalculatedItems* = POINTER TO RECORD (CtlT.Object) END;
        Characters* = POINTER TO RECORD (CtlT.Object) END;
        Dialogs* = POINTER TO RECORD (CtlT.Object) END;
        Dialog* = POINTER TO RECORD (CtlT.Object) END;
        SoundNote* = POINTER TO RECORD (CtlT.Object) END;
        Button* = POINTER TO RECORD (CtlT.Object) END;
        Buttons* = POINTER TO RECORD (CtlT.Object) END;
        CheckBox* = POINTER TO RECORD (CtlT.Object) END;
        CheckBoxes* = POINTER TO RECORD (CtlT.Object) END;
        OptionButton* = POINTER TO RECORD (CtlT.Object) END;
        OptionButtons* = POINTER TO RECORD (CtlT.Object) END;
        EditBox* = POINTER TO RECORD (CtlT.Object) END;
        EditBoxes* = POINTER TO RECORD (CtlT.Object) END;
        ScrollBar* = POINTER TO RECORD (CtlT.Object) END;
        ScrollBars* = POINTER TO RECORD (CtlT.Object) END;
        ListBox* = POINTER TO RECORD (CtlT.Object) END;
        ListBoxes* = POINTER TO RECORD (CtlT.Object) END;
        GroupBox* = POINTER TO RECORD (CtlT.Object) END;
        GroupBoxes* = POINTER TO RECORD (CtlT.Object) END;
        DropDown* = POINTER TO RECORD (CtlT.Object) END;
        DropDowns* = POINTER TO RECORD (CtlT.Object) END;
        Spinner* = POINTER TO RECORD (CtlT.Object) END;
        Spinners* = POINTER TO RECORD (CtlT.Object) END;
        DialogFrame* = POINTER TO RECORD (CtlT.Object) END;
        Label* = POINTER TO RECORD (CtlT.Object) END;
        Labels* = POINTER TO RECORD (CtlT.Object) END;
        Panes* = POINTER TO RECORD (CtlT.Object) END;
        Pane* = POINTER TO RECORD (CtlT.Object) END;
        Scenarios* = POINTER TO RECORD (CtlT.Object) END;
        Scenario* = POINTER TO RECORD (CtlT.Object) END;
        GroupObject* = POINTER TO RECORD (CtlT.Object) END;
        GroupObjects* = POINTER TO RECORD (CtlT.Object) END;
        Line* = POINTER TO RECORD (CtlT.Object) END;
        Lines* = POINTER TO RECORD (CtlT.Object) END;
        Rectangle* = POINTER TO RECORD (CtlT.Object) END;
        Rectangles* = POINTER TO RECORD (CtlT.Object) END;
        Oval* = POINTER TO RECORD (CtlT.Object) END;
        Ovals* = POINTER TO RECORD (CtlT.Object) END;
        Arc* = POINTER TO RECORD (CtlT.Object) END;
        Arcs* = POINTER TO RECORD (CtlT.Object) END;
        OLEObjectEvents* = POINTER TO ABSTRACT RECORD (CtlT.OutObject) END;
        _OLEObject* = POINTER TO RECORD (CtlT.Object) END;
        OLEObjects* = POINTER TO RECORD (CtlT.Object) END;
        TextBox* = POINTER TO RECORD (CtlT.Object) END;
        TextBoxes* = POINTER TO RECORD (CtlT.Object) END;
        Picture* = POINTER TO RECORD (CtlT.Object) END;
        Pictures* = POINTER TO RECORD (CtlT.Object) END;
        Drawing* = POINTER TO RECORD (CtlT.Object) END;
        Drawings* = POINTER TO RECORD (CtlT.Object) END;
        RoutingSlip* = POINTER TO RECORD (CtlT.Object) END;
        Outline* = POINTER TO RECORD (CtlT.Object) END;
        Module* = POINTER TO RECORD (CtlT.Object) END;
        Modules* = POINTER TO RECORD (CtlT.Object) END;
        DialogSheet* = POINTER TO RECORD (CtlT.Object) END;
        DialogSheets* = POINTER TO RECORD (CtlT.Object) END;
        Worksheets* = POINTER TO RECORD (CtlT.Object) END;
        PageSetup* = POINTER TO RECORD (CtlT.Object) END;
        Names* = POINTER TO RECORD (CtlT.Object) END;
        Name* = POINTER TO RECORD (CtlT.Object) END;
        ChartObject* = POINTER TO RECORD (CtlT.Object) END;
        ChartObjects* = POINTER TO RECORD (CtlT.Object) END;
        Mailer* = POINTER TO RECORD (CtlT.Object) END;
        CustomViews* = POINTER TO RECORD (CtlT.Object) END;
        CustomView* = POINTER TO RECORD (CtlT.Object) END;
        FormatConditions* = POINTER TO RECORD (CtlT.Object) END;
        FormatCondition* = POINTER TO RECORD (CtlT.Object) END;
        Comments* = POINTER TO RECORD (CtlT.Object) END;
        Comment* = POINTER TO RECORD (CtlT.Object) END;
        RefreshEvents* = POINTER TO ABSTRACT RECORD (CtlT.OutObject) END;
        _QueryTable* = POINTER TO RECORD (CtlT.Object) END;
        QueryTables* = POINTER TO RECORD (CtlT.Object) END;
        Parameter* = POINTER TO RECORD (CtlT.Object) END;
        Parameters* = POINTER TO RECORD (CtlT.Object) END;
        ODBCError* = POINTER TO RECORD (CtlT.Object) END;
        ODBCErrors* = POINTER TO RECORD (CtlT.Object) END;
        Validation* = POINTER TO RECORD (CtlT.Object) END;
        Hyperlinks* = POINTER TO RECORD (CtlT.Object) END;
        Hyperlink* = POINTER TO RECORD (CtlT.Object) END;
        AutoFilter* = POINTER TO RECORD (CtlT.Object) END;
        Filters* = POINTER TO RECORD (CtlT.Object) END;
        Filter* = POINTER TO RECORD (CtlT.Object) END;
        AutoCorrect* = POINTER TO RECORD (CtlT.Object) END;
        Border* = POINTER TO RECORD (CtlT.Object) END;
        Interior* = POINTER TO RECORD (CtlT.Object) END;
        ChartFillFormat* = POINTER TO RECORD (CtlT.Object) END;
        ChartColorFormat* = POINTER TO RECORD (CtlT.Object) END;
        Axis* = POINTER TO RECORD (CtlT.Object) END;
        ChartTitle* = POINTER TO RECORD (CtlT.Object) END;
        AxisTitle* = POINTER TO RECORD (CtlT.Object) END;
        ChartGroup* = POINTER TO RECORD (CtlT.Object) END;
        ChartGroups* = POINTER TO RECORD (CtlT.Object) END;
        Axes* = POINTER TO RECORD (CtlT.Object) END;
        Points* = POINTER TO RECORD (CtlT.Object) END;
        Point* = POINTER TO RECORD (CtlT.Object) END;
        Series* = POINTER TO RECORD (CtlT.Object) END;
        SeriesCollection* = POINTER TO RECORD (CtlT.Object) END;
        DataLabel* = POINTER TO RECORD (CtlT.Object) END;
        DataLabels* = POINTER TO RECORD (CtlT.Object) END;
        LegendEntry* = POINTER TO RECORD (CtlT.Object) END;
        LegendEntries* = POINTER TO RECORD (CtlT.Object) END;
        LegendKey* = POINTER TO RECORD (CtlT.Object) END;
        Trendlines* = POINTER TO RECORD (CtlT.Object) END;
        Trendline* = POINTER TO RECORD (CtlT.Object) END;
        Corners* = POINTER TO RECORD (CtlT.Object) END;
        SeriesLines* = POINTER TO RECORD (CtlT.Object) END;
        HiLoLines* = POINTER TO RECORD (CtlT.Object) END;
        Gridlines* = POINTER TO RECORD (CtlT.Object) END;
        DropLines* = POINTER TO RECORD (CtlT.Object) END;
        LeaderLines* = POINTER TO RECORD (CtlT.Object) END;
        UpBars* = POINTER TO RECORD (CtlT.Object) END;
        DownBars* = POINTER TO RECORD (CtlT.Object) END;
        Floor* = POINTER TO RECORD (CtlT.Object) END;
        Walls* = POINTER TO RECORD (CtlT.Object) END;
        TickLabels* = POINTER TO RECORD (CtlT.Object) END;
        PlotArea* = POINTER TO RECORD (CtlT.Object) END;
        ChartArea* = POINTER TO RECORD (CtlT.Object) END;
        Legend* = POINTER TO RECORD (CtlT.Object) END;
        ErrorBars* = POINTER TO RECORD (CtlT.Object) END;
        DataTable* = POINTER TO RECORD (CtlT.Object) END;
        Phonetic* = POINTER TO RECORD (CtlT.Object) END;
        Shape* = POINTER TO RECORD (CtlT.Object) END;
        Shapes* = POINTER TO RECORD (CtlT.Object) END;
        ShapeRange* = POINTER TO RECORD (CtlT.Object) END;
        GroupShapes* = POINTER TO RECORD (CtlT.Object) END;
        TextFrame* = POINTER TO RECORD (CtlT.Object) END;
        ConnectorFormat* = POINTER TO RECORD (CtlT.Object) END;
        FreeformBuilder* = POINTER TO RECORD (CtlT.Object) END;
        ControlFormat* = POINTER TO RECORD (CtlT.Object) END;
        OLEFormat* = POINTER TO RECORD (CtlT.Object) END;
        LinkFormat* = POINTER TO RECORD (CtlT.Object) END;
        QueryTable* = _QueryTable;
        Application* = _Application;
        Chart* = _Chart;
        Worksheet* = _Worksheet;
        Global* = _Global;
        Workbook* = _Workbook;
        OLEObject* = _OLEObject;


    PROCEDURE ThisAdjustments* (v: CtlT.Any): Adjustments;
        VAR new: Adjustments;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0310-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAdjustments;

    PROCEDURE IsAdjustments* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0310-0000-0000-C000-000000000046}")
    END IsAdjustments;

    PROCEDURE ThisCalloutFormat* (v: CtlT.Any): CalloutFormat;
        VAR new: CalloutFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0311-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCalloutFormat;

    PROCEDURE IsCalloutFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0311-0000-0000-C000-000000000046}")
    END IsCalloutFormat;

    PROCEDURE ThisColorFormat* (v: CtlT.Any): ColorFormat;
        VAR new: ColorFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0312-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisColorFormat;

    PROCEDURE IsColorFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0312-0000-0000-C000-000000000046}")
    END IsColorFormat;

    PROCEDURE ThisLineFormat* (v: CtlT.Any): LineFormat;
        VAR new: LineFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0317-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLineFormat;

    PROCEDURE IsLineFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0317-0000-0000-C000-000000000046}")
    END IsLineFormat;

    PROCEDURE ThisShapeNode* (v: CtlT.Any): ShapeNode;
        VAR new: ShapeNode;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0318-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisShapeNode;

    PROCEDURE IsShapeNode* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0318-0000-0000-C000-000000000046}")
    END IsShapeNode;

    PROCEDURE ThisShapeNodes* (v: CtlT.Any): ShapeNodes;
        VAR new: ShapeNodes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0319-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisShapeNodes;

    PROCEDURE IsShapeNodes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0319-0000-0000-C000-000000000046}")
    END IsShapeNodes;

    PROCEDURE ThisPictureFormat* (v: CtlT.Any): PictureFormat;
        VAR new: PictureFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C031A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPictureFormat;

    PROCEDURE IsPictureFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C031A-0000-0000-C000-000000000046}")
    END IsPictureFormat;

    PROCEDURE ThisShadowFormat* (v: CtlT.Any): ShadowFormat;
        VAR new: ShadowFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C031B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisShadowFormat;

    PROCEDURE IsShadowFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C031B-0000-0000-C000-000000000046}")
    END IsShadowFormat;

    PROCEDURE ThisTextEffectFormat* (v: CtlT.Any): TextEffectFormat;
        VAR new: TextEffectFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C031F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTextEffectFormat;

    PROCEDURE IsTextEffectFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C031F-0000-0000-C000-000000000046}")
    END IsTextEffectFormat;

    PROCEDURE ThisThreeDFormat* (v: CtlT.Any): ThreeDFormat;
        VAR new: ThreeDFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0321-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisThreeDFormat;

    PROCEDURE IsThreeDFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0321-0000-0000-C000-000000000046}")
    END IsThreeDFormat;

    PROCEDURE ThisFillFormat* (v: CtlT.Any): FillFormat;
        VAR new: FillFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000C0314-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFillFormat;

    PROCEDURE IsFillFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000C0314-0000-0000-C000-000000000046}")
    END IsFillFormat;

    PROCEDURE This_Application* (v: CtlT.Any): _Application;
        VAR new: _Application;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D5-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_Application;

    PROCEDURE Is_Application* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D5-0000-0000-C000-000000000046}")
    END Is_Application;

    PROCEDURE This_Chart* (v: CtlT.Any): _Chart;
        VAR new: _Chart;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D6-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_Chart;

    PROCEDURE Is_Chart* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D6-0000-0000-C000-000000000046}")
    END Is_Chart;

    PROCEDURE ThisSheets* (v: CtlT.Any): Sheets;
        VAR new: Sheets;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D7-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSheets;

    PROCEDURE IsSheets* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D7-0000-0000-C000-000000000046}")
    END IsSheets;

    PROCEDURE This_Worksheet* (v: CtlT.Any): _Worksheet;
        VAR new: _Worksheet;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D8-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_Worksheet;

    PROCEDURE Is_Worksheet* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D8-0000-0000-C000-000000000046}")
    END Is_Worksheet;

    PROCEDURE This_Global* (v: CtlT.Any): _Global;
        VAR new: _Global;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D9-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_Global;

    PROCEDURE Is_Global* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D9-0000-0000-C000-000000000046}")
    END Is_Global;

    PROCEDURE This_Workbook* (v: CtlT.Any): _Workbook;
        VAR new: _Workbook;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208DA-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_Workbook;

    PROCEDURE Is_Workbook* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208DA-0000-0000-C000-000000000046}")
    END Is_Workbook;

    PROCEDURE ThisWorkbooks* (v: CtlT.Any): Workbooks;
        VAR new: Workbooks;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208DB-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWorkbooks;

    PROCEDURE IsWorkbooks* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208DB-0000-0000-C000-000000000046}")
    END IsWorkbooks;

    PROCEDURE ThisFont* (v: CtlT.Any): Font;
        VAR new: Font;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002084D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFont;

    PROCEDURE IsFont* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002084D-0000-0000-C000-000000000046}")
    END IsFont;

    PROCEDURE ThisWindow* (v: CtlT.Any): Window;
        VAR new: Window;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020893-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWindow;

    PROCEDURE IsWindow* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020893-0000-0000-C000-000000000046}")
    END IsWindow;

    PROCEDURE ThisWindows* (v: CtlT.Any): Windows;
        VAR new: Windows;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020892-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWindows;

    PROCEDURE IsWindows* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020892-0000-0000-C000-000000000046}")
    END IsWindows;

    PROCEDURE ThisWorksheetFunction* (v: CtlT.Any): WorksheetFunction;
        VAR new: WorksheetFunction;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020845-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWorksheetFunction;

    PROCEDURE IsWorksheetFunction* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020845-0000-0000-C000-000000000046}")
    END IsWorksheetFunction;

    PROCEDURE ThisRange* (v: CtlT.Any): Range;
        VAR new: Range;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020846-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRange;

    PROCEDURE IsRange* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020846-0000-0000-C000-000000000046}")
    END IsRange;

    PROCEDURE ThisVPageBreak* (v: CtlT.Any): VPageBreak;
        VAR new: VPageBreak;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024402-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisVPageBreak;

    PROCEDURE IsVPageBreak* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024402-0000-0000-C000-000000000046}")
    END IsVPageBreak;

    PROCEDURE ThisHPageBreak* (v: CtlT.Any): HPageBreak;
        VAR new: HPageBreak;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024401-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisHPageBreak;

    PROCEDURE IsHPageBreak* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024401-0000-0000-C000-000000000046}")
    END IsHPageBreak;

    PROCEDURE ThisHPageBreaks* (v: CtlT.Any): HPageBreaks;
        VAR new: HPageBreaks;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024404-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisHPageBreaks;

    PROCEDURE IsHPageBreaks* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024404-0000-0000-C000-000000000046}")
    END IsHPageBreaks;

    PROCEDURE ThisVPageBreaks* (v: CtlT.Any): VPageBreaks;
        VAR new: VPageBreaks;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024405-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisVPageBreaks;

    PROCEDURE IsVPageBreaks* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024405-0000-0000-C000-000000000046}")
    END IsVPageBreaks;

    PROCEDURE ThisRecentFile* (v: CtlT.Any): RecentFile;
        VAR new: RecentFile;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024407-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRecentFile;

    PROCEDURE IsRecentFile* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024407-0000-0000-C000-000000000046}")
    END IsRecentFile;

    PROCEDURE ThisRecentFiles* (v: CtlT.Any): RecentFiles;
        VAR new: RecentFiles;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024406-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRecentFiles;

    PROCEDURE IsRecentFiles* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024406-0000-0000-C000-000000000046}")
    END IsRecentFiles;

    PROCEDURE ThisStyle* (v: CtlT.Any): Style;
        VAR new: Style;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020852-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisStyle;

    PROCEDURE IsStyle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020852-0000-0000-C000-000000000046}")
    END IsStyle;

    PROCEDURE ThisStyles* (v: CtlT.Any): Styles;
        VAR new: Styles;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020853-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisStyles;

    PROCEDURE IsStyles* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020853-0000-0000-C000-000000000046}")
    END IsStyles;

    PROCEDURE ThisBorders* (v: CtlT.Any): Borders;
        VAR new: Borders;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020855-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisBorders;

    PROCEDURE IsBorders* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020855-0000-0000-C000-000000000046}")
    END IsBorders;

    PROCEDURE ThisAddIn* (v: CtlT.Any): AddIn;
        VAR new: AddIn;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020857-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAddIn;

    PROCEDURE IsAddIn* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020857-0000-0000-C000-000000000046}")
    END IsAddIn;

    PROCEDURE ThisAddIns* (v: CtlT.Any): AddIns;
        VAR new: AddIns;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020858-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAddIns;

    PROCEDURE IsAddIns* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020858-0000-0000-C000-000000000046}")
    END IsAddIns;

    PROCEDURE ThisToolbar* (v: CtlT.Any): Toolbar;
        VAR new: Toolbar;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbar;

    PROCEDURE IsToolbar* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085C-0000-0000-C000-000000000046}")
    END IsToolbar;

    PROCEDURE ThisToolbars* (v: CtlT.Any): Toolbars;
        VAR new: Toolbars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbars;

    PROCEDURE IsToolbars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085D-0000-0000-C000-000000000046}")
    END IsToolbars;

    PROCEDURE ThisToolbarButton* (v: CtlT.Any): ToolbarButton;
        VAR new: ToolbarButton;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbarButton;

    PROCEDURE IsToolbarButton* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085E-0000-0000-C000-000000000046}")
    END IsToolbarButton;

    PROCEDURE ThisToolbarButtons* (v: CtlT.Any): ToolbarButtons;
        VAR new: ToolbarButtons;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbarButtons;

    PROCEDURE IsToolbarButtons* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085F-0000-0000-C000-000000000046}")
    END IsToolbarButtons;

    PROCEDURE ThisAreas* (v: CtlT.Any): Areas;
        VAR new: Areas;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020860-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAreas;

    PROCEDURE IsAreas* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020860-0000-0000-C000-000000000046}")
    END IsAreas;

    PROCEDURE ThisMenuBars* (v: CtlT.Any): MenuBars;
        VAR new: MenuBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020863-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuBars;

    PROCEDURE IsMenuBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020863-0000-0000-C000-000000000046}")
    END IsMenuBars;

    PROCEDURE ThisMenuBar* (v: CtlT.Any): MenuBar;
        VAR new: MenuBar;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020864-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuBar;

    PROCEDURE IsMenuBar* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020864-0000-0000-C000-000000000046}")
    END IsMenuBar;

    PROCEDURE ThisMenus* (v: CtlT.Any): Menus;
        VAR new: Menus;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020865-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenus;

    PROCEDURE IsMenus* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020865-0000-0000-C000-000000000046}")
    END IsMenus;

    PROCEDURE ThisMenu* (v: CtlT.Any): Menu;
        VAR new: Menu;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020866-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenu;

    PROCEDURE IsMenu* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020866-0000-0000-C000-000000000046}")
    END IsMenu;

    PROCEDURE ThisMenuItems* (v: CtlT.Any): MenuItems;
        VAR new: MenuItems;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020867-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuItems;

    PROCEDURE IsMenuItems* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020867-0000-0000-C000-000000000046}")
    END IsMenuItems;

    PROCEDURE ThisMenuItem* (v: CtlT.Any): MenuItem;
        VAR new: MenuItem;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020868-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuItem;

    PROCEDURE IsMenuItem* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020868-0000-0000-C000-000000000046}")
    END IsMenuItem;

    PROCEDURE ThisCharts* (v: CtlT.Any): Charts;
        VAR new: Charts;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCharts;

    PROCEDURE IsCharts* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086D-0000-0000-C000-000000000046}")
    END IsCharts;

    PROCEDURE ThisDrawingObjects* (v: CtlT.Any): DrawingObjects;
        VAR new: DrawingObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDrawingObjects;

    PROCEDURE IsDrawingObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086F-0000-0000-C000-000000000046}")
    END IsDrawingObjects;

    PROCEDURE ThisPivotCache* (v: CtlT.Any): PivotCache;
        VAR new: PivotCache;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002441C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotCache;

    PROCEDURE IsPivotCache* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002441C-0000-0000-C000-000000000046}")
    END IsPivotCache;

    PROCEDURE ThisPivotCaches* (v: CtlT.Any): PivotCaches;
        VAR new: PivotCaches;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002441D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotCaches;

    PROCEDURE IsPivotCaches* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002441D-0000-0000-C000-000000000046}")
    END IsPivotCaches;

    PROCEDURE ThisPivotFormula* (v: CtlT.Any): PivotFormula;
        VAR new: PivotFormula;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002441E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotFormula;

    PROCEDURE IsPivotFormula* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002441E-0000-0000-C000-000000000046}")
    END IsPivotFormula;

    PROCEDURE ThisPivotFormulas* (v: CtlT.Any): PivotFormulas;
        VAR new: PivotFormulas;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002441F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotFormulas;

    PROCEDURE IsPivotFormulas* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002441F-0000-0000-C000-000000000046}")
    END IsPivotFormulas;

    PROCEDURE ThisPivotTable* (v: CtlT.Any): PivotTable;
        VAR new: PivotTable;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020872-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotTable;

    PROCEDURE IsPivotTable* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020872-0000-0000-C000-000000000046}")
    END IsPivotTable;

    PROCEDURE ThisPivotTables* (v: CtlT.Any): PivotTables;
        VAR new: PivotTables;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020873-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotTables;

    PROCEDURE IsPivotTables* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020873-0000-0000-C000-000000000046}")
    END IsPivotTables;

    PROCEDURE ThisPivotField* (v: CtlT.Any): PivotField;
        VAR new: PivotField;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020874-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotField;

    PROCEDURE IsPivotField* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020874-0000-0000-C000-000000000046}")
    END IsPivotField;

    PROCEDURE ThisPivotFields* (v: CtlT.Any): PivotFields;
        VAR new: PivotFields;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020875-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotFields;

    PROCEDURE IsPivotFields* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020875-0000-0000-C000-000000000046}")
    END IsPivotFields;

    PROCEDURE ThisCalculatedFields* (v: CtlT.Any): CalculatedFields;
        VAR new: CalculatedFields;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024420-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCalculatedFields;

    PROCEDURE IsCalculatedFields* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024420-0000-0000-C000-000000000046}")
    END IsCalculatedFields;

    PROCEDURE ThisPivotItem* (v: CtlT.Any): PivotItem;
        VAR new: PivotItem;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020876-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotItem;

    PROCEDURE IsPivotItem* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020876-0000-0000-C000-000000000046}")
    END IsPivotItem;

    PROCEDURE ThisPivotItems* (v: CtlT.Any): PivotItems;
        VAR new: PivotItems;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020877-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotItems;

    PROCEDURE IsPivotItems* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020877-0000-0000-C000-000000000046}")
    END IsPivotItems;

    PROCEDURE ThisCalculatedItems* (v: CtlT.Any): CalculatedItems;
        VAR new: CalculatedItems;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024421-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCalculatedItems;

    PROCEDURE IsCalculatedItems* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024421-0000-0000-C000-000000000046}")
    END IsCalculatedItems;

    PROCEDURE ThisCharacters* (v: CtlT.Any): Characters;
        VAR new: Characters;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020878-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCharacters;

    PROCEDURE IsCharacters* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020878-0000-0000-C000-000000000046}")
    END IsCharacters;

    PROCEDURE ThisDialogs* (v: CtlT.Any): Dialogs;
        VAR new: Dialogs;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020879-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogs;

    PROCEDURE IsDialogs* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020879-0000-0000-C000-000000000046}")
    END IsDialogs;

    PROCEDURE ThisDialog* (v: CtlT.Any): Dialog;
        VAR new: Dialog;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialog;

    PROCEDURE IsDialog* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087A-0000-0000-C000-000000000046}")
    END IsDialog;

    PROCEDURE ThisSoundNote* (v: CtlT.Any): SoundNote;
        VAR new: SoundNote;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSoundNote;

    PROCEDURE IsSoundNote* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087B-0000-0000-C000-000000000046}")
    END IsSoundNote;

    PROCEDURE ThisButton* (v: CtlT.Any): Button;
        VAR new: Button;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisButton;

    PROCEDURE IsButton* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087D-0000-0000-C000-000000000046}")
    END IsButton;

    PROCEDURE ThisButtons* (v: CtlT.Any): Buttons;
        VAR new: Buttons;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisButtons;

    PROCEDURE IsButtons* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087E-0000-0000-C000-000000000046}")
    END IsButtons;

    PROCEDURE ThisCheckBox* (v: CtlT.Any): CheckBox;
        VAR new: CheckBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCheckBox;

    PROCEDURE IsCheckBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087F-0000-0000-C000-000000000046}")
    END IsCheckBox;

    PROCEDURE ThisCheckBoxes* (v: CtlT.Any): CheckBoxes;
        VAR new: CheckBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020880-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCheckBoxes;

    PROCEDURE IsCheckBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020880-0000-0000-C000-000000000046}")
    END IsCheckBoxes;

    PROCEDURE ThisOptionButton* (v: CtlT.Any): OptionButton;
        VAR new: OptionButton;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020881-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOptionButton;

    PROCEDURE IsOptionButton* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020881-0000-0000-C000-000000000046}")
    END IsOptionButton;

    PROCEDURE ThisOptionButtons* (v: CtlT.Any): OptionButtons;
        VAR new: OptionButtons;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020882-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOptionButtons;

    PROCEDURE IsOptionButtons* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020882-0000-0000-C000-000000000046}")
    END IsOptionButtons;

    PROCEDURE ThisEditBox* (v: CtlT.Any): EditBox;
        VAR new: EditBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020883-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisEditBox;

    PROCEDURE IsEditBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020883-0000-0000-C000-000000000046}")
    END IsEditBox;

    PROCEDURE ThisEditBoxes* (v: CtlT.Any): EditBoxes;
        VAR new: EditBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020884-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisEditBoxes;

    PROCEDURE IsEditBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020884-0000-0000-C000-000000000046}")
    END IsEditBoxes;

    PROCEDURE ThisScrollBar* (v: CtlT.Any): ScrollBar;
        VAR new: ScrollBar;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020885-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScrollBar;

    PROCEDURE IsScrollBar* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020885-0000-0000-C000-000000000046}")
    END IsScrollBar;

    PROCEDURE ThisScrollBars* (v: CtlT.Any): ScrollBars;
        VAR new: ScrollBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020886-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScrollBars;

    PROCEDURE IsScrollBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020886-0000-0000-C000-000000000046}")
    END IsScrollBars;

    PROCEDURE ThisListBox* (v: CtlT.Any): ListBox;
        VAR new: ListBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020887-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisListBox;

    PROCEDURE IsListBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020887-0000-0000-C000-000000000046}")
    END IsListBox;

    PROCEDURE ThisListBoxes* (v: CtlT.Any): ListBoxes;
        VAR new: ListBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020888-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisListBoxes;

    PROCEDURE IsListBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020888-0000-0000-C000-000000000046}")
    END IsListBoxes;

    PROCEDURE ThisGroupBox* (v: CtlT.Any): GroupBox;
        VAR new: GroupBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020889-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupBox;

    PROCEDURE IsGroupBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020889-0000-0000-C000-000000000046}")
    END IsGroupBox;

    PROCEDURE ThisGroupBoxes* (v: CtlT.Any): GroupBoxes;
        VAR new: GroupBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupBoxes;

    PROCEDURE IsGroupBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088A-0000-0000-C000-000000000046}")
    END IsGroupBoxes;

    PROCEDURE ThisDropDown* (v: CtlT.Any): DropDown;
        VAR new: DropDown;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDropDown;

    PROCEDURE IsDropDown* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088B-0000-0000-C000-000000000046}")
    END IsDropDown;

    PROCEDURE ThisDropDowns* (v: CtlT.Any): DropDowns;
        VAR new: DropDowns;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDropDowns;

    PROCEDURE IsDropDowns* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088C-0000-0000-C000-000000000046}")
    END IsDropDowns;

    PROCEDURE ThisSpinner* (v: CtlT.Any): Spinner;
        VAR new: Spinner;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSpinner;

    PROCEDURE IsSpinner* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088D-0000-0000-C000-000000000046}")
    END IsSpinner;

    PROCEDURE ThisSpinners* (v: CtlT.Any): Spinners;
        VAR new: Spinners;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSpinners;

    PROCEDURE IsSpinners* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088E-0000-0000-C000-000000000046}")
    END IsSpinners;

    PROCEDURE ThisDialogFrame* (v: CtlT.Any): DialogFrame;
        VAR new: DialogFrame;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogFrame;

    PROCEDURE IsDialogFrame* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088F-0000-0000-C000-000000000046}")
    END IsDialogFrame;

    PROCEDURE ThisLabel* (v: CtlT.Any): Label;
        VAR new: Label;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020890-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLabel;

    PROCEDURE IsLabel* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020890-0000-0000-C000-000000000046}")
    END IsLabel;

    PROCEDURE ThisLabels* (v: CtlT.Any): Labels;
        VAR new: Labels;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020891-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLabels;

    PROCEDURE IsLabels* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020891-0000-0000-C000-000000000046}")
    END IsLabels;

    PROCEDURE ThisPanes* (v: CtlT.Any): Panes;
        VAR new: Panes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020894-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPanes;

    PROCEDURE IsPanes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020894-0000-0000-C000-000000000046}")
    END IsPanes;

    PROCEDURE ThisPane* (v: CtlT.Any): Pane;
        VAR new: Pane;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020895-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPane;

    PROCEDURE IsPane* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020895-0000-0000-C000-000000000046}")
    END IsPane;

    PROCEDURE ThisScenarios* (v: CtlT.Any): Scenarios;
        VAR new: Scenarios;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020896-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScenarios;

    PROCEDURE IsScenarios* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020896-0000-0000-C000-000000000046}")
    END IsScenarios;

    PROCEDURE ThisScenario* (v: CtlT.Any): Scenario;
        VAR new: Scenario;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020897-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScenario;

    PROCEDURE IsScenario* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020897-0000-0000-C000-000000000046}")
    END IsScenario;

    PROCEDURE ThisGroupObject* (v: CtlT.Any): GroupObject;
        VAR new: GroupObject;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020898-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupObject;

    PROCEDURE IsGroupObject* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020898-0000-0000-C000-000000000046}")
    END IsGroupObject;

    PROCEDURE ThisGroupObjects* (v: CtlT.Any): GroupObjects;
        VAR new: GroupObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020899-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupObjects;

    PROCEDURE IsGroupObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020899-0000-0000-C000-000000000046}")
    END IsGroupObjects;

    PROCEDURE ThisLine* (v: CtlT.Any): Line;
        VAR new: Line;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLine;

    PROCEDURE IsLine* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089A-0000-0000-C000-000000000046}")
    END IsLine;

    PROCEDURE ThisLines* (v: CtlT.Any): Lines;
        VAR new: Lines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLines;

    PROCEDURE IsLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089B-0000-0000-C000-000000000046}")
    END IsLines;

    PROCEDURE ThisRectangle* (v: CtlT.Any): Rectangle;
        VAR new: Rectangle;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRectangle;

    PROCEDURE IsRectangle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089C-0000-0000-C000-000000000046}")
    END IsRectangle;

    PROCEDURE ThisRectangles* (v: CtlT.Any): Rectangles;
        VAR new: Rectangles;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRectangles;

    PROCEDURE IsRectangles* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089D-0000-0000-C000-000000000046}")
    END IsRectangles;

    PROCEDURE ThisOval* (v: CtlT.Any): Oval;
        VAR new: Oval;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOval;

    PROCEDURE IsOval* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089E-0000-0000-C000-000000000046}")
    END IsOval;

    PROCEDURE ThisOvals* (v: CtlT.Any): Ovals;
        VAR new: Ovals;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOvals;

    PROCEDURE IsOvals* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089F-0000-0000-C000-000000000046}")
    END IsOvals;

    PROCEDURE ThisArc* (v: CtlT.Any): Arc;
        VAR new: Arc;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisArc;

    PROCEDURE IsArc* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A0-0000-0000-C000-000000000046}")
    END IsArc;

    PROCEDURE ThisArcs* (v: CtlT.Any): Arcs;
        VAR new: Arcs;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisArcs;

    PROCEDURE IsArcs* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A1-0000-0000-C000-000000000046}")
    END IsArcs;

    PROCEDURE This_OLEObject* (v: CtlT.Any): _OLEObject;
        VAR new: _OLEObject;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A2-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_OLEObject;

    PROCEDURE Is_OLEObject* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A2-0000-0000-C000-000000000046}")
    END Is_OLEObject;

    PROCEDURE ThisOLEObjects* (v: CtlT.Any): OLEObjects;
        VAR new: OLEObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A3-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOLEObjects;

    PROCEDURE IsOLEObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A3-0000-0000-C000-000000000046}")
    END IsOLEObjects;

    PROCEDURE ThisTextBox* (v: CtlT.Any): TextBox;
        VAR new: TextBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTextBox;

    PROCEDURE IsTextBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A4-0000-0000-C000-000000000046}")
    END IsTextBox;

    PROCEDURE ThisTextBoxes* (v: CtlT.Any): TextBoxes;
        VAR new: TextBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A5-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTextBoxes;

    PROCEDURE IsTextBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A5-0000-0000-C000-000000000046}")
    END IsTextBoxes;

    PROCEDURE ThisPicture* (v: CtlT.Any): Picture;
        VAR new: Picture;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A6-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPicture;

    PROCEDURE IsPicture* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A6-0000-0000-C000-000000000046}")
    END IsPicture;

    PROCEDURE ThisPictures* (v: CtlT.Any): Pictures;
        VAR new: Pictures;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A7-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPictures;

    PROCEDURE IsPictures* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A7-0000-0000-C000-000000000046}")
    END IsPictures;

    PROCEDURE ThisDrawing* (v: CtlT.Any): Drawing;
        VAR new: Drawing;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A8-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDrawing;

    PROCEDURE IsDrawing* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A8-0000-0000-C000-000000000046}")
    END IsDrawing;

    PROCEDURE ThisDrawings* (v: CtlT.Any): Drawings;
        VAR new: Drawings;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A9-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDrawings;

    PROCEDURE IsDrawings* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A9-0000-0000-C000-000000000046}")
    END IsDrawings;

    PROCEDURE ThisRoutingSlip* (v: CtlT.Any): RoutingSlip;
        VAR new: RoutingSlip;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208AA-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRoutingSlip;

    PROCEDURE IsRoutingSlip* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208AA-0000-0000-C000-000000000046}")
    END IsRoutingSlip;

    PROCEDURE ThisOutline* (v: CtlT.Any): Outline;
        VAR new: Outline;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208AB-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOutline;

    PROCEDURE IsOutline* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208AB-0000-0000-C000-000000000046}")
    END IsOutline;

    PROCEDURE ThisModule* (v: CtlT.Any): Module;
        VAR new: Module;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208AD-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisModule;

    PROCEDURE IsModule* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208AD-0000-0000-C000-000000000046}")
    END IsModule;

    PROCEDURE ThisModules* (v: CtlT.Any): Modules;
        VAR new: Modules;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208AE-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisModules;

    PROCEDURE IsModules* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208AE-0000-0000-C000-000000000046}")
    END IsModules;

    PROCEDURE ThisDialogSheet* (v: CtlT.Any): DialogSheet;
        VAR new: DialogSheet;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208AF-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogSheet;

    PROCEDURE IsDialogSheet* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208AF-0000-0000-C000-000000000046}")
    END IsDialogSheet;

    PROCEDURE ThisDialogSheets* (v: CtlT.Any): DialogSheets;
        VAR new: DialogSheets;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogSheets;

    PROCEDURE IsDialogSheets* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B0-0000-0000-C000-000000000046}")
    END IsDialogSheets;

    PROCEDURE ThisWorksheets* (v: CtlT.Any): Worksheets;
        VAR new: Worksheets;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWorksheets;

    PROCEDURE IsWorksheets* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B1-0000-0000-C000-000000000046}")
    END IsWorksheets;

    PROCEDURE ThisPageSetup* (v: CtlT.Any): PageSetup;
        VAR new: PageSetup;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPageSetup;

    PROCEDURE IsPageSetup* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B4-0000-0000-C000-000000000046}")
    END IsPageSetup;

    PROCEDURE ThisNames* (v: CtlT.Any): Names;
        VAR new: Names;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B8-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisNames;

    PROCEDURE IsNames* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B8-0000-0000-C000-000000000046}")
    END IsNames;

    PROCEDURE ThisName* (v: CtlT.Any): Name;
        VAR new: Name;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B9-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisName;

    PROCEDURE IsName* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B9-0000-0000-C000-000000000046}")
    END IsName;

    PROCEDURE ThisChartObject* (v: CtlT.Any): ChartObject;
        VAR new: ChartObject;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CF-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartObject;

    PROCEDURE IsChartObject* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CF-0000-0000-C000-000000000046}")
    END IsChartObject;

    PROCEDURE ThisChartObjects* (v: CtlT.Any): ChartObjects;
        VAR new: ChartObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartObjects;

    PROCEDURE IsChartObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D0-0000-0000-C000-000000000046}")
    END IsChartObjects;

    PROCEDURE ThisMailer* (v: CtlT.Any): Mailer;
        VAR new: Mailer;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMailer;

    PROCEDURE IsMailer* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D1-0000-0000-C000-000000000046}")
    END IsMailer;

    PROCEDURE ThisCustomViews* (v: CtlT.Any): CustomViews;
        VAR new: CustomViews;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024422-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCustomViews;

    PROCEDURE IsCustomViews* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024422-0000-0000-C000-000000000046}")
    END IsCustomViews;

    PROCEDURE ThisCustomView* (v: CtlT.Any): CustomView;
        VAR new: CustomView;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024423-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCustomView;

    PROCEDURE IsCustomView* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024423-0000-0000-C000-000000000046}")
    END IsCustomView;

    PROCEDURE ThisFormatConditions* (v: CtlT.Any): FormatConditions;
        VAR new: FormatConditions;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024424-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFormatConditions;

    PROCEDURE IsFormatConditions* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024424-0000-0000-C000-000000000046}")
    END IsFormatConditions;

    PROCEDURE ThisFormatCondition* (v: CtlT.Any): FormatCondition;
        VAR new: FormatCondition;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024425-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFormatCondition;

    PROCEDURE IsFormatCondition* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024425-0000-0000-C000-000000000046}")
    END IsFormatCondition;

    PROCEDURE ThisComments* (v: CtlT.Any): Comments;
        VAR new: Comments;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024426-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisComments;

    PROCEDURE IsComments* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024426-0000-0000-C000-000000000046}")
    END IsComments;

    PROCEDURE ThisComment* (v: CtlT.Any): Comment;
        VAR new: Comment;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024427-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisComment;

    PROCEDURE IsComment* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024427-0000-0000-C000-000000000046}")
    END IsComment;

    PROCEDURE This_QueryTable* (v: CtlT.Any): _QueryTable;
        VAR new: _QueryTable;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024428-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_QueryTable;

    PROCEDURE Is_QueryTable* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024428-0000-0000-C000-000000000046}")
    END Is_QueryTable;

    PROCEDURE ThisQueryTables* (v: CtlT.Any): QueryTables;
        VAR new: QueryTables;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024429-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisQueryTables;

    PROCEDURE IsQueryTables* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024429-0000-0000-C000-000000000046}")
    END IsQueryTables;

    PROCEDURE ThisParameter* (v: CtlT.Any): Parameter;
        VAR new: Parameter;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002442A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisParameter;

    PROCEDURE IsParameter* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002442A-0000-0000-C000-000000000046}")
    END IsParameter;

    PROCEDURE ThisParameters* (v: CtlT.Any): Parameters;
        VAR new: Parameters;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002442B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisParameters;

    PROCEDURE IsParameters* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002442B-0000-0000-C000-000000000046}")
    END IsParameters;

    PROCEDURE ThisODBCError* (v: CtlT.Any): ODBCError;
        VAR new: ODBCError;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002442C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisODBCError;

    PROCEDURE IsODBCError* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002442C-0000-0000-C000-000000000046}")
    END IsODBCError;

    PROCEDURE ThisODBCErrors* (v: CtlT.Any): ODBCErrors;
        VAR new: ODBCErrors;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002442D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisODBCErrors;

    PROCEDURE IsODBCErrors* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002442D-0000-0000-C000-000000000046}")
    END IsODBCErrors;

    PROCEDURE ThisValidation* (v: CtlT.Any): Validation;
        VAR new: Validation;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002442F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisValidation;

    PROCEDURE IsValidation* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002442F-0000-0000-C000-000000000046}")
    END IsValidation;

    PROCEDURE ThisHyperlinks* (v: CtlT.Any): Hyperlinks;
        VAR new: Hyperlinks;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024430-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisHyperlinks;

    PROCEDURE IsHyperlinks* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024430-0000-0000-C000-000000000046}")
    END IsHyperlinks;

    PROCEDURE ThisHyperlink* (v: CtlT.Any): Hyperlink;
        VAR new: Hyperlink;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024431-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisHyperlink;

    PROCEDURE IsHyperlink* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024431-0000-0000-C000-000000000046}")
    END IsHyperlink;

    PROCEDURE ThisAutoFilter* (v: CtlT.Any): AutoFilter;
        VAR new: AutoFilter;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024432-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAutoFilter;

    PROCEDURE IsAutoFilter* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024432-0000-0000-C000-000000000046}")
    END IsAutoFilter;

    PROCEDURE ThisFilters* (v: CtlT.Any): Filters;
        VAR new: Filters;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024433-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFilters;

    PROCEDURE IsFilters* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024433-0000-0000-C000-000000000046}")
    END IsFilters;

    PROCEDURE ThisFilter* (v: CtlT.Any): Filter;
        VAR new: Filter;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024434-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFilter;

    PROCEDURE IsFilter* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024434-0000-0000-C000-000000000046}")
    END IsFilter;

    PROCEDURE ThisAutoCorrect* (v: CtlT.Any): AutoCorrect;
        VAR new: AutoCorrect;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAutoCorrect;

    PROCEDURE IsAutoCorrect* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D4-0000-0000-C000-000000000046}")
    END IsAutoCorrect;

    PROCEDURE ThisBorder* (v: CtlT.Any): Border;
        VAR new: Border;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020854-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisBorder;

    PROCEDURE IsBorder* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020854-0000-0000-C000-000000000046}")
    END IsBorder;

    PROCEDURE ThisInterior* (v: CtlT.Any): Interior;
        VAR new: Interior;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020870-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisInterior;

    PROCEDURE IsInterior* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020870-0000-0000-C000-000000000046}")
    END IsInterior;

    PROCEDURE ThisChartFillFormat* (v: CtlT.Any): ChartFillFormat;
        VAR new: ChartFillFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024435-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartFillFormat;

    PROCEDURE IsChartFillFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024435-0000-0000-C000-000000000046}")
    END IsChartFillFormat;

    PROCEDURE ThisChartColorFormat* (v: CtlT.Any): ChartColorFormat;
        VAR new: ChartColorFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024436-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartColorFormat;

    PROCEDURE IsChartColorFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024436-0000-0000-C000-000000000046}")
    END IsChartColorFormat;

    PROCEDURE ThisAxis* (v: CtlT.Any): Axis;
        VAR new: Axis;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020848-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAxis;

    PROCEDURE IsAxis* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020848-0000-0000-C000-000000000046}")
    END IsAxis;

    PROCEDURE ThisChartTitle* (v: CtlT.Any): ChartTitle;
        VAR new: ChartTitle;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020849-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartTitle;

    PROCEDURE IsChartTitle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020849-0000-0000-C000-000000000046}")
    END IsChartTitle;

    PROCEDURE ThisAxisTitle* (v: CtlT.Any): AxisTitle;
        VAR new: AxisTitle;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002084A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAxisTitle;

    PROCEDURE IsAxisTitle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002084A-0000-0000-C000-000000000046}")
    END IsAxisTitle;

    PROCEDURE ThisChartGroup* (v: CtlT.Any): ChartGroup;
        VAR new: ChartGroup;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020859-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartGroup;

    PROCEDURE IsChartGroup* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020859-0000-0000-C000-000000000046}")
    END IsChartGroup;

    PROCEDURE ThisChartGroups* (v: CtlT.Any): ChartGroups;
        VAR new: ChartGroups;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartGroups;

    PROCEDURE IsChartGroups* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085A-0000-0000-C000-000000000046}")
    END IsChartGroups;

    PROCEDURE ThisAxes* (v: CtlT.Any): Axes;
        VAR new: Axes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAxes;

    PROCEDURE IsAxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085B-0000-0000-C000-000000000046}")
    END IsAxes;

    PROCEDURE ThisPoints* (v: CtlT.Any): Points;
        VAR new: Points;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020869-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPoints;

    PROCEDURE IsPoints* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020869-0000-0000-C000-000000000046}")
    END IsPoints;

    PROCEDURE ThisPoint* (v: CtlT.Any): Point;
        VAR new: Point;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPoint;

    PROCEDURE IsPoint* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086A-0000-0000-C000-000000000046}")
    END IsPoint;

    PROCEDURE ThisSeries* (v: CtlT.Any): Series;
        VAR new: Series;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSeries;

    PROCEDURE IsSeries* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086B-0000-0000-C000-000000000046}")
    END IsSeries;

    PROCEDURE ThisSeriesCollection* (v: CtlT.Any): SeriesCollection;
        VAR new: SeriesCollection;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSeriesCollection;

    PROCEDURE IsSeriesCollection* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086C-0000-0000-C000-000000000046}")
    END IsSeriesCollection;

    PROCEDURE ThisDataLabel* (v: CtlT.Any): DataLabel;
        VAR new: DataLabel;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B2-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDataLabel;

    PROCEDURE IsDataLabel* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B2-0000-0000-C000-000000000046}")
    END IsDataLabel;

    PROCEDURE ThisDataLabels* (v: CtlT.Any): DataLabels;
        VAR new: DataLabels;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B3-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDataLabels;

    PROCEDURE IsDataLabels* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B3-0000-0000-C000-000000000046}")
    END IsDataLabels;

    PROCEDURE ThisLegendEntry* (v: CtlT.Any): LegendEntry;
        VAR new: LegendEntry;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BA-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegendEntry;

    PROCEDURE IsLegendEntry* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BA-0000-0000-C000-000000000046}")
    END IsLegendEntry;

    PROCEDURE ThisLegendEntries* (v: CtlT.Any): LegendEntries;
        VAR new: LegendEntries;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BB-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegendEntries;

    PROCEDURE IsLegendEntries* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BB-0000-0000-C000-000000000046}")
    END IsLegendEntries;

    PROCEDURE ThisLegendKey* (v: CtlT.Any): LegendKey;
        VAR new: LegendKey;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BC-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegendKey;

    PROCEDURE IsLegendKey* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BC-0000-0000-C000-000000000046}")
    END IsLegendKey;

    PROCEDURE ThisTrendlines* (v: CtlT.Any): Trendlines;
        VAR new: Trendlines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BD-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTrendlines;

    PROCEDURE IsTrendlines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BD-0000-0000-C000-000000000046}")
    END IsTrendlines;

    PROCEDURE ThisTrendline* (v: CtlT.Any): Trendline;
        VAR new: Trendline;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BE-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTrendline;

    PROCEDURE IsTrendline* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BE-0000-0000-C000-000000000046}")
    END IsTrendline;

    PROCEDURE ThisCorners* (v: CtlT.Any): Corners;
        VAR new: Corners;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCorners;

    PROCEDURE IsCorners* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C0-0000-0000-C000-000000000046}")
    END IsCorners;

    PROCEDURE ThisSeriesLines* (v: CtlT.Any): SeriesLines;
        VAR new: SeriesLines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSeriesLines;

    PROCEDURE IsSeriesLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C1-0000-0000-C000-000000000046}")
    END IsSeriesLines;

    PROCEDURE ThisHiLoLines* (v: CtlT.Any): HiLoLines;
        VAR new: HiLoLines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C2-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisHiLoLines;

    PROCEDURE IsHiLoLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C2-0000-0000-C000-000000000046}")
    END IsHiLoLines;

    PROCEDURE ThisGridlines* (v: CtlT.Any): Gridlines;
        VAR new: Gridlines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C3-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGridlines;

    PROCEDURE IsGridlines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C3-0000-0000-C000-000000000046}")
    END IsGridlines;

    PROCEDURE ThisDropLines* (v: CtlT.Any): DropLines;
        VAR new: DropLines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDropLines;

    PROCEDURE IsDropLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C4-0000-0000-C000-000000000046}")
    END IsDropLines;

    PROCEDURE ThisLeaderLines* (v: CtlT.Any): LeaderLines;
        VAR new: LeaderLines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024437-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLeaderLines;

    PROCEDURE IsLeaderLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024437-0000-0000-C000-000000000046}")
    END IsLeaderLines;

    PROCEDURE ThisUpBars* (v: CtlT.Any): UpBars;
        VAR new: UpBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C5-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisUpBars;

    PROCEDURE IsUpBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C5-0000-0000-C000-000000000046}")
    END IsUpBars;

    PROCEDURE ThisDownBars* (v: CtlT.Any): DownBars;
        VAR new: DownBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C6-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDownBars;

    PROCEDURE IsDownBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C6-0000-0000-C000-000000000046}")
    END IsDownBars;

    PROCEDURE ThisFloor* (v: CtlT.Any): Floor;
        VAR new: Floor;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C7-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFloor;

    PROCEDURE IsFloor* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C7-0000-0000-C000-000000000046}")
    END IsFloor;

    PROCEDURE ThisWalls* (v: CtlT.Any): Walls;
        VAR new: Walls;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C8-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWalls;

    PROCEDURE IsWalls* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C8-0000-0000-C000-000000000046}")
    END IsWalls;

    PROCEDURE ThisTickLabels* (v: CtlT.Any): TickLabels;
        VAR new: TickLabels;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C9-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTickLabels;

    PROCEDURE IsTickLabels* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C9-0000-0000-C000-000000000046}")
    END IsTickLabels;

    PROCEDURE ThisPlotArea* (v: CtlT.Any): PlotArea;
        VAR new: PlotArea;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CB-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPlotArea;

    PROCEDURE IsPlotArea* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CB-0000-0000-C000-000000000046}")
    END IsPlotArea;

    PROCEDURE ThisChartArea* (v: CtlT.Any): ChartArea;
        VAR new: ChartArea;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CC-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartArea;

    PROCEDURE IsChartArea* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CC-0000-0000-C000-000000000046}")
    END IsChartArea;

    PROCEDURE ThisLegend* (v: CtlT.Any): Legend;
        VAR new: Legend;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CD-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegend;

    PROCEDURE IsLegend* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CD-0000-0000-C000-000000000046}")
    END IsLegend;

    PROCEDURE ThisErrorBars* (v: CtlT.Any): ErrorBars;
        VAR new: ErrorBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CE-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisErrorBars;

    PROCEDURE IsErrorBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CE-0000-0000-C000-000000000046}")
    END IsErrorBars;

    PROCEDURE ThisDataTable* (v: CtlT.Any): DataTable;
        VAR new: DataTable;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020843-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDataTable;

    PROCEDURE IsDataTable* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020843-0000-0000-C000-000000000046}")
    END IsDataTable;

    PROCEDURE ThisPhonetic* (v: CtlT.Any): Phonetic;
        VAR new: Phonetic;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024438-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPhonetic;

    PROCEDURE IsPhonetic* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024438-0000-0000-C000-000000000046}")
    END IsPhonetic;

    PROCEDURE ThisShape* (v: CtlT.Any): Shape;
        VAR new: Shape;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024439-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisShape;

    PROCEDURE IsShape* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024439-0000-0000-C000-000000000046}")
    END IsShape;

    PROCEDURE ThisShapes* (v: CtlT.Any): Shapes;
        VAR new: Shapes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002443A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisShapes;

    PROCEDURE IsShapes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002443A-0000-0000-C000-000000000046}")
    END IsShapes;

    PROCEDURE ThisShapeRange* (v: CtlT.Any): ShapeRange;
        VAR new: ShapeRange;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002443B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisShapeRange;

    PROCEDURE IsShapeRange* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002443B-0000-0000-C000-000000000046}")
    END IsShapeRange;

    PROCEDURE ThisGroupShapes* (v: CtlT.Any): GroupShapes;
        VAR new: GroupShapes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002443C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupShapes;

    PROCEDURE IsGroupShapes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002443C-0000-0000-C000-000000000046}")
    END IsGroupShapes;

    PROCEDURE ThisTextFrame* (v: CtlT.Any): TextFrame;
        VAR new: TextFrame;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002443D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTextFrame;

    PROCEDURE IsTextFrame* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002443D-0000-0000-C000-000000000046}")
    END IsTextFrame;

    PROCEDURE ThisConnectorFormat* (v: CtlT.Any): ConnectorFormat;
        VAR new: ConnectorFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002443E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisConnectorFormat;

    PROCEDURE IsConnectorFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002443E-0000-0000-C000-000000000046}")
    END IsConnectorFormat;

    PROCEDURE ThisFreeformBuilder* (v: CtlT.Any): FreeformBuilder;
        VAR new: FreeformBuilder;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002443F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFreeformBuilder;

    PROCEDURE IsFreeformBuilder* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002443F-0000-0000-C000-000000000046}")
    END IsFreeformBuilder;

    PROCEDURE ThisControlFormat* (v: CtlT.Any): ControlFormat;
        VAR new: ControlFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024440-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisControlFormat;

    PROCEDURE IsControlFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024440-0000-0000-C000-000000000046}")
    END IsControlFormat;

    PROCEDURE ThisOLEFormat* (v: CtlT.Any): OLEFormat;
        VAR new: OLEFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024441-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOLEFormat;

    PROCEDURE IsOLEFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024441-0000-0000-C000-000000000046}")
    END IsOLEFormat;

    PROCEDURE ThisLinkFormat* (v: CtlT.Any): LinkFormat;
        VAR new: LinkFormat;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00024442-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLinkFormat;

    PROCEDURE IsLinkFormat* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00024442-0000-0000-C000-000000000046}")
    END IsLinkFormat;



    (* ---------- Adjustments, dual, nonextensible ---------- *)

    PROCEDURE (this: Adjustments) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: Adjustments) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: Adjustments) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: Adjustments) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 2)
    END Count;

    PROCEDURE (this: Adjustments) Item* (Index: INTEGER): SHORTREAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarSReal(ret)
    END Item;

    PROCEDURE (this: Adjustments) PUTItem* (Index: INTEGER; p2: SHORTREAL), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.SRealVar(p2, arg[0]);
        CtlC.CallPutMethod(this, 0, arg, NIL);
    END PUTItem;


    (* ---------- CalloutFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: CalloutFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: CalloutFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: CalloutFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: CalloutFormat) AutomaticLength* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 10, NIL);
    END AutomaticLength;

    PROCEDURE (this: CalloutFormat) CustomDrop* (Drop: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Drop, arg[0]);
        CtlC.CallParMethod(this, 11, arg, NIL);
    END CustomDrop;

    PROCEDURE (this: CalloutFormat) CustomLength* (Length: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Length, arg[0]);
        CtlC.CallParMethod(this, 12, arg, NIL);
    END CustomLength;

    PROCEDURE (this: CalloutFormat) PresetDrop* (DropType: CtlOffice.MsoCalloutDropType), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(DropType, arg[0]);
        CtlC.CallParMethod(this, 13, arg, NIL);
    END PresetDrop;

    PROCEDURE (this: CalloutFormat) Accent* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 100)
    END Accent;

    PROCEDURE (this: CalloutFormat) PUTAccent* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 100, p1)
    END PUTAccent;

    PROCEDURE (this: CalloutFormat) Angle* (): CtlOffice.MsoCalloutAngleType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 101)
    END Angle;

    PROCEDURE (this: CalloutFormat) PUTAngle* (p1: CtlOffice.MsoCalloutAngleType), NEW;
    BEGIN
        CtlC.PutInt(this, 101, p1)
    END PUTAngle;

    PROCEDURE (this: CalloutFormat) AutoAttach* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 102)
    END AutoAttach;

    PROCEDURE (this: CalloutFormat) PUTAutoAttach* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 102, p1)
    END PUTAutoAttach;

    PROCEDURE (this: CalloutFormat) AutoLength* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 103)
    END AutoLength;

    PROCEDURE (this: CalloutFormat) Border* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 104)
    END Border;

    PROCEDURE (this: CalloutFormat) PUTBorder* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 104, p1)
    END PUTBorder;

    PROCEDURE (this: CalloutFormat) Drop* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 105)
    END Drop;

    PROCEDURE (this: CalloutFormat) DropType* (): CtlOffice.MsoCalloutDropType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 106)
    END DropType;

    PROCEDURE (this: CalloutFormat) Gap* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 107)
    END Gap;

    PROCEDURE (this: CalloutFormat) PUTGap* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 107, p1)
    END PUTGap;

    PROCEDURE (this: CalloutFormat) Length* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 108)
    END Length;

    PROCEDURE (this: CalloutFormat) Type* (): CtlOffice.MsoCalloutType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 109)
    END Type;

    PROCEDURE (this: CalloutFormat) PUTType* (p1: CtlOffice.MsoCalloutType), NEW;
    BEGIN
        CtlC.PutInt(this, 109, p1)
    END PUTType;


    (* ---------- ColorFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: ColorFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: ColorFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: ColorFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: ColorFormat) RGB* (): CtlOffice.MsoRGBType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END RGB;

    PROCEDURE (this: ColorFormat) PUTRGB* (p1: CtlOffice.MsoRGBType), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUTRGB;

    PROCEDURE (this: ColorFormat) SchemeColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 100)
    END SchemeColor;

    PROCEDURE (this: ColorFormat) PUTSchemeColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 100, p1)
    END PUTSchemeColor;

    PROCEDURE (this: ColorFormat) Type* (): CtlOffice.MsoColorType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 101)
    END Type;


    (* ---------- LineFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: LineFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: LineFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: LineFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: LineFormat) BackColor* (): ColorFormat, NEW;
    BEGIN
        RETURN ThisColorFormat(CtlC.GetAny(this, 100))
    END BackColor;

    PROCEDURE (this: LineFormat) PUTBackColor* (p1: ColorFormat), NEW;
    BEGIN
        CtlC.PutObj(this, 100, p1)
    END PUTBackColor;

    PROCEDURE (this: LineFormat) BeginArrowheadLength* (): CtlOffice.MsoArrowheadLength, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 101)
    END BeginArrowheadLength;

    PROCEDURE (this: LineFormat) PUTBeginArrowheadLength* (p1: CtlOffice.MsoArrowheadLength), NEW;
    BEGIN
        CtlC.PutInt(this, 101, p1)
    END PUTBeginArrowheadLength;

    PROCEDURE (this: LineFormat) BeginArrowheadStyle* (): CtlOffice.MsoArrowheadStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 102)
    END BeginArrowheadStyle;

    PROCEDURE (this: LineFormat) PUTBeginArrowheadStyle* (p1: CtlOffice.MsoArrowheadStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 102, p1)
    END PUTBeginArrowheadStyle;

    PROCEDURE (this: LineFormat) BeginArrowheadWidth* (): CtlOffice.MsoArrowheadWidth, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 103)
    END BeginArrowheadWidth;

    PROCEDURE (this: LineFormat) PUTBeginArrowheadWidth* (p1: CtlOffice.MsoArrowheadWidth), NEW;
    BEGIN
        CtlC.PutInt(this, 103, p1)
    END PUTBeginArrowheadWidth;

    PROCEDURE (this: LineFormat) DashStyle* (): CtlOffice.MsoLineDashStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 104)
    END DashStyle;

    PROCEDURE (this: LineFormat) PUTDashStyle* (p1: CtlOffice.MsoLineDashStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 104, p1)
    END PUTDashStyle;

    PROCEDURE (this: LineFormat) EndArrowheadLength* (): CtlOffice.MsoArrowheadLength, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 105)
    END EndArrowheadLength;

    PROCEDURE (this: LineFormat) PUTEndArrowheadLength* (p1: CtlOffice.MsoArrowheadLength), NEW;
    BEGIN
        CtlC.PutInt(this, 105, p1)
    END PUTEndArrowheadLength;

    PROCEDURE (this: LineFormat) EndArrowheadStyle* (): CtlOffice.MsoArrowheadStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 106)
    END EndArrowheadStyle;

    PROCEDURE (this: LineFormat) PUTEndArrowheadStyle* (p1: CtlOffice.MsoArrowheadStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 106, p1)
    END PUTEndArrowheadStyle;

    PROCEDURE (this: LineFormat) EndArrowheadWidth* (): CtlOffice.MsoArrowheadWidth, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 107)
    END EndArrowheadWidth;

    PROCEDURE (this: LineFormat) PUTEndArrowheadWidth* (p1: CtlOffice.MsoArrowheadWidth), NEW;
    BEGIN
        CtlC.PutInt(this, 107, p1)
    END PUTEndArrowheadWidth;

    PROCEDURE (this: LineFormat) ForeColor* (): ColorFormat, NEW;
    BEGIN
        RETURN ThisColorFormat(CtlC.GetAny(this, 108))
    END ForeColor;

    PROCEDURE (this: LineFormat) PUTForeColor* (p1: ColorFormat), NEW;
    BEGIN
        CtlC.PutObj(this, 108, p1)
    END PUTForeColor;

    PROCEDURE (this: LineFormat) Pattern* (): CtlOffice.MsoPatternType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 109)
    END Pattern;

    PROCEDURE (this: LineFormat) PUTPattern* (p1: CtlOffice.MsoPatternType), NEW;
    BEGIN
        CtlC.PutInt(this, 109, p1)
    END PUTPattern;

    PROCEDURE (this: LineFormat) Style* (): CtlOffice.MsoLineStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 110)
    END Style;

    PROCEDURE (this: LineFormat) PUTStyle* (p1: CtlOffice.MsoLineStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 110, p1)
    END PUTStyle;

    PROCEDURE (this: LineFormat) Transparency* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 111)
    END Transparency;

    PROCEDURE (this: LineFormat) PUTTransparency* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 111, p1)
    END PUTTransparency;

    PROCEDURE (this: LineFormat) Visible* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 112)
    END Visible;

    PROCEDURE (this: LineFormat) PUTVisible* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 112, p1)
    END PUTVisible;

    PROCEDURE (this: LineFormat) Weight* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 113)
    END Weight;

    PROCEDURE (this: LineFormat) PUTWeight* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 113, p1)
    END PUTWeight;


    (* ---------- ShapeNode, dual, nonextensible ---------- *)

    PROCEDURE (this: ShapeNode) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: ShapeNode) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: ShapeNode) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: ShapeNode) EditingType* (): CtlOffice.MsoEditingType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 100)
    END EditingType;

    PROCEDURE (this: ShapeNode) Points* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 101)
    END Points;

    PROCEDURE (this: ShapeNode) SegmentType* (): CtlOffice.MsoSegmentType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 102)
    END SegmentType;


    (* ---------- ShapeNodes, dual, nonextensible ---------- *)

    PROCEDURE (this: ShapeNodes) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: ShapeNodes) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: ShapeNodes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: ShapeNodes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 2)
    END Count;

    PROCEDURE (this: ShapeNodes) Item* (Index: CtlT.Any): ShapeNode, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 0, arg, ret);
        RETURN ThisShapeNode(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: ShapeNodes) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: ShapeNodes) Delete* (Index: INTEGER), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallParMethod(this, 11, arg, NIL);
    END Delete;

    PROCEDURE (this: ShapeNodes) Insert* (Index: INTEGER; SegmentType: CtlOffice.MsoSegmentType; EditingType: CtlOffice.MsoEditingType; X1: SHORTREAL; Y1: SHORTREAL; X2: SHORTREAL; Y2: SHORTREAL; X3: SHORTREAL; Y3: SHORTREAL), NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[8]);
        CtlC.IntVar(SegmentType, arg[7]);
        CtlC.IntVar(EditingType, arg[6]);
        CtlC.SRealVar(X1, arg[5]);
        CtlC.SRealVar(Y1, arg[4]);
        CtlC.SRealVar(X2, arg[3]);
        CtlC.SRealVar(Y2, arg[2]);
        CtlC.SRealVar(X3, arg[1]);
        CtlC.SRealVar(Y3, arg[0]);
        CtlC.CallParMethod(this, 12, arg, NIL);
    END Insert;

    PROCEDURE (this: ShapeNodes) SetEditingType* (Index: INTEGER; EditingType: CtlOffice.MsoEditingType), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.IntVar(EditingType, arg[0]);
        CtlC.CallParMethod(this, 13, arg, NIL);
    END SetEditingType;

    PROCEDURE (this: ShapeNodes) SetPosition* (Index: INTEGER; X1: SHORTREAL; Y1: SHORTREAL), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[2]);
        CtlC.SRealVar(X1, arg[1]);
        CtlC.SRealVar(Y1, arg[0]);
        CtlC.CallParMethod(this, 14, arg, NIL);
    END SetPosition;

    PROCEDURE (this: ShapeNodes) SetSegmentType* (Index: INTEGER; SegmentType: CtlOffice.MsoSegmentType), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.IntVar(SegmentType, arg[0]);
        CtlC.CallParMethod(this, 15, arg, NIL);
    END SetSegmentType;


    (* ---------- PictureFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: PictureFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: PictureFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: PictureFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: PictureFormat) IncrementBrightness* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 10, arg, NIL);
    END IncrementBrightness;

    PROCEDURE (this: PictureFormat) IncrementContrast* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 11, arg, NIL);
    END IncrementContrast;

    PROCEDURE (this: PictureFormat) Brightness* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 100)
    END Brightness;

    PROCEDURE (this: PictureFormat) PUTBrightness* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 100, p1)
    END PUTBrightness;

    PROCEDURE (this: PictureFormat) ColorType* (): CtlOffice.MsoPictureColorType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 101)
    END ColorType;

    PROCEDURE (this: PictureFormat) PUTColorType* (p1: CtlOffice.MsoPictureColorType), NEW;
    BEGIN
        CtlC.PutInt(this, 101, p1)
    END PUTColorType;

    PROCEDURE (this: PictureFormat) Contrast* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 102)
    END Contrast;

    PROCEDURE (this: PictureFormat) PUTContrast* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 102, p1)
    END PUTContrast;

    PROCEDURE (this: PictureFormat) CropBottom* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 103)
    END CropBottom;

    PROCEDURE (this: PictureFormat) PUTCropBottom* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 103, p1)
    END PUTCropBottom;

    PROCEDURE (this: PictureFormat) CropLeft* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 104)
    END CropLeft;

    PROCEDURE (this: PictureFormat) PUTCropLeft* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 104, p1)
    END PUTCropLeft;

    PROCEDURE (this: PictureFormat) CropRight* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 105)
    END CropRight;

    PROCEDURE (this: PictureFormat) PUTCropRight* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 105, p1)
    END PUTCropRight;

    PROCEDURE (this: PictureFormat) CropTop* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 106)
    END CropTop;

    PROCEDURE (this: PictureFormat) PUTCropTop* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 106, p1)
    END PUTCropTop;

    PROCEDURE (this: PictureFormat) TransparencyColor* (): CtlOffice.MsoRGBType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 107)
    END TransparencyColor;

    PROCEDURE (this: PictureFormat) PUTTransparencyColor* (p1: CtlOffice.MsoRGBType), NEW;
    BEGIN
        CtlC.PutInt(this, 107, p1)
    END PUTTransparencyColor;

    PROCEDURE (this: PictureFormat) TransparentBackground* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END TransparentBackground;

    PROCEDURE (this: PictureFormat) PUTTransparentBackground* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTTransparentBackground;


    (* ---------- ShadowFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: ShadowFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: ShadowFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: ShadowFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: ShadowFormat) IncrementOffsetX* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 10, arg, NIL);
    END IncrementOffsetX;

    PROCEDURE (this: ShadowFormat) IncrementOffsetY* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 11, arg, NIL);
    END IncrementOffsetY;

    PROCEDURE (this: ShadowFormat) ForeColor* (): ColorFormat, NEW;
    BEGIN
        RETURN ThisColorFormat(CtlC.GetAny(this, 100))
    END ForeColor;

    PROCEDURE (this: ShadowFormat) PUTForeColor* (p1: ColorFormat), NEW;
    BEGIN
        CtlC.PutObj(this, 100, p1)
    END PUTForeColor;

    PROCEDURE (this: ShadowFormat) Obscured* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 101)
    END Obscured;

    PROCEDURE (this: ShadowFormat) PUTObscured* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 101, p1)
    END PUTObscured;

    PROCEDURE (this: ShadowFormat) OffsetX* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 102)
    END OffsetX;

    PROCEDURE (this: ShadowFormat) PUTOffsetX* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 102, p1)
    END PUTOffsetX;

    PROCEDURE (this: ShadowFormat) OffsetY* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 103)
    END OffsetY;

    PROCEDURE (this: ShadowFormat) PUTOffsetY* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 103, p1)
    END PUTOffsetY;

    PROCEDURE (this: ShadowFormat) Transparency* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 104)
    END Transparency;

    PROCEDURE (this: ShadowFormat) PUTTransparency* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 104, p1)
    END PUTTransparency;

    PROCEDURE (this: ShadowFormat) Type* (): CtlOffice.MsoShadowType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 105)
    END Type;

    PROCEDURE (this: ShadowFormat) PUTType* (p1: CtlOffice.MsoShadowType), NEW;
    BEGIN
        CtlC.PutInt(this, 105, p1)
    END PUTType;

    PROCEDURE (this: ShadowFormat) Visible* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 106)
    END Visible;

    PROCEDURE (this: ShadowFormat) PUTVisible* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 106, p1)
    END PUTVisible;


    (* ---------- TextEffectFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: TextEffectFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: TextEffectFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: TextEffectFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: TextEffectFormat) ToggleVerticalText* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 10, NIL);
    END ToggleVerticalText;

    PROCEDURE (this: TextEffectFormat) Alignment* (): CtlOffice.MsoTextEffectAlignment, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 100)
    END Alignment;

    PROCEDURE (this: TextEffectFormat) PUTAlignment* (p1: CtlOffice.MsoTextEffectAlignment), NEW;
    BEGIN
        CtlC.PutInt(this, 100, p1)
    END PUTAlignment;

    PROCEDURE (this: TextEffectFormat) FontBold* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 101)
    END FontBold;

    PROCEDURE (this: TextEffectFormat) PUTFontBold* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 101, p1)
    END PUTFontBold;

    PROCEDURE (this: TextEffectFormat) FontItalic* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 102)
    END FontItalic;

    PROCEDURE (this: TextEffectFormat) PUTFontItalic* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 102, p1)
    END PUTFontItalic;

    PROCEDURE (this: TextEffectFormat) FontName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 103)
    END FontName;

    PROCEDURE (this: TextEffectFormat) PUTFontName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 103, p1)
    END PUTFontName;

    PROCEDURE (this: TextEffectFormat) FontSize* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 104)
    END FontSize;

    PROCEDURE (this: TextEffectFormat) PUTFontSize* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 104, p1)
    END PUTFontSize;

    PROCEDURE (this: TextEffectFormat) KernedPairs* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 105)
    END KernedPairs;

    PROCEDURE (this: TextEffectFormat) PUTKernedPairs* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 105, p1)
    END PUTKernedPairs;

    PROCEDURE (this: TextEffectFormat) NormalizedHeight* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 106)
    END NormalizedHeight;

    PROCEDURE (this: TextEffectFormat) PUTNormalizedHeight* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 106, p1)
    END PUTNormalizedHeight;

    PROCEDURE (this: TextEffectFormat) PresetShape* (): CtlOffice.MsoPresetTextEffectShape, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 107)
    END PresetShape;

    PROCEDURE (this: TextEffectFormat) PUTPresetShape* (p1: CtlOffice.MsoPresetTextEffectShape), NEW;
    BEGIN
        CtlC.PutInt(this, 107, p1)
    END PUTPresetShape;

    PROCEDURE (this: TextEffectFormat) PresetTextEffect* (): CtlOffice.MsoPresetTextEffect, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END PresetTextEffect;

    PROCEDURE (this: TextEffectFormat) PUTPresetTextEffect* (p1: CtlOffice.MsoPresetTextEffect), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTPresetTextEffect;

    PROCEDURE (this: TextEffectFormat) RotatedChars* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 109)
    END RotatedChars;

    PROCEDURE (this: TextEffectFormat) PUTRotatedChars* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 109, p1)
    END PUTRotatedChars;

    PROCEDURE (this: TextEffectFormat) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Text;

    PROCEDURE (this: TextEffectFormat) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTText;

    PROCEDURE (this: TextEffectFormat) Tracking* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 111)
    END Tracking;

    PROCEDURE (this: TextEffectFormat) PUTTracking* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 111, p1)
    END PUTTracking;


    (* ---------- ThreeDFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: ThreeDFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: ThreeDFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: ThreeDFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: ThreeDFormat) IncrementRotationX* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 10, arg, NIL);
    END IncrementRotationX;

    PROCEDURE (this: ThreeDFormat) IncrementRotationY* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 11, arg, NIL);
    END IncrementRotationY;

    PROCEDURE (this: ThreeDFormat) ResetRotation* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 12, NIL);
    END ResetRotation;

    PROCEDURE (this: ThreeDFormat) SetThreeDFormat* (PresetThreeDFormat: CtlOffice.MsoPresetThreeDFormat), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(PresetThreeDFormat, arg[0]);
        CtlC.CallParMethod(this, 13, arg, NIL);
    END SetThreeDFormat;

    PROCEDURE (this: ThreeDFormat) SetExtrusionDirection* (PresetExtrusionDirection: CtlOffice.MsoPresetExtrusionDirection), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(PresetExtrusionDirection, arg[0]);
        CtlC.CallParMethod(this, 14, arg, NIL);
    END SetExtrusionDirection;

    PROCEDURE (this: ThreeDFormat) Depth* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 100)
    END Depth;

    PROCEDURE (this: ThreeDFormat) PUTDepth* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 100, p1)
    END PUTDepth;

    PROCEDURE (this: ThreeDFormat) ExtrusionColor* (): ColorFormat, NEW;
    BEGIN
        RETURN ThisColorFormat(CtlC.GetAny(this, 101))
    END ExtrusionColor;

    PROCEDURE (this: ThreeDFormat) ExtrusionColorType* (): CtlOffice.MsoExtrusionColorType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 102)
    END ExtrusionColorType;

    PROCEDURE (this: ThreeDFormat) PUTExtrusionColorType* (p1: CtlOffice.MsoExtrusionColorType), NEW;
    BEGIN
        CtlC.PutInt(this, 102, p1)
    END PUTExtrusionColorType;

    PROCEDURE (this: ThreeDFormat) Perspective* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 103)
    END Perspective;

    PROCEDURE (this: ThreeDFormat) PUTPerspective* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 103, p1)
    END PUTPerspective;

    PROCEDURE (this: ThreeDFormat) PresetExtrusionDirection* (): CtlOffice.MsoPresetExtrusionDirection, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 104)
    END PresetExtrusionDirection;

    PROCEDURE (this: ThreeDFormat) PresetLightingDirection* (): CtlOffice.MsoPresetLightingDirection, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 105)
    END PresetLightingDirection;

    PROCEDURE (this: ThreeDFormat) PUTPresetLightingDirection* (p1: CtlOffice.MsoPresetLightingDirection), NEW;
    BEGIN
        CtlC.PutInt(this, 105, p1)
    END PUTPresetLightingDirection;

    PROCEDURE (this: ThreeDFormat) PresetLightingSoftness* (): CtlOffice.MsoPresetLightingSoftness, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 106)
    END PresetLightingSoftness;

    PROCEDURE (this: ThreeDFormat) PUTPresetLightingSoftness* (p1: CtlOffice.MsoPresetLightingSoftness), NEW;
    BEGIN
        CtlC.PutInt(this, 106, p1)
    END PUTPresetLightingSoftness;

    PROCEDURE (this: ThreeDFormat) PresetMaterial* (): CtlOffice.MsoPresetMaterial, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 107)
    END PresetMaterial;

    PROCEDURE (this: ThreeDFormat) PUTPresetMaterial* (p1: CtlOffice.MsoPresetMaterial), NEW;
    BEGIN
        CtlC.PutInt(this, 107, p1)
    END PUTPresetMaterial;

    PROCEDURE (this: ThreeDFormat) PresetThreeDFormat* (): CtlOffice.MsoPresetThreeDFormat, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END PresetThreeDFormat;

    PROCEDURE (this: ThreeDFormat) RotationX* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 109)
    END RotationX;

    PROCEDURE (this: ThreeDFormat) PUTRotationX* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 109, p1)
    END PUTRotationX;

    PROCEDURE (this: ThreeDFormat) RotationY* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 110)
    END RotationY;

    PROCEDURE (this: ThreeDFormat) PUTRotationY* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 110, p1)
    END PUTRotationY;

    PROCEDURE (this: ThreeDFormat) Visible* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 111)
    END Visible;

    PROCEDURE (this: ThreeDFormat) PUTVisible* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 111, p1)
    END PUTVisible;


    (* ---------- FillFormat, dual, nonextensible ---------- *)

    PROCEDURE (this: FillFormat) Application* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1610743808)
    END Application;

    PROCEDURE (this: FillFormat) Creator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1610743809)
    END Creator;

    PROCEDURE (this: FillFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1)
    END Parent;

    PROCEDURE (this: FillFormat) Background* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 10, NIL);
    END Background;

    PROCEDURE (this: FillFormat) OneColorGradient* (Style: CtlOffice.MsoGradientStyle; Variant: INTEGER; Degree: SHORTREAL), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Style, arg[2]);
        CtlC.IntVar(Variant, arg[1]);
        CtlC.SRealVar(Degree, arg[0]);
        CtlC.CallParMethod(this, 11, arg, NIL);
    END OneColorGradient;

    PROCEDURE (this: FillFormat) Patterned* (Pattern: CtlOffice.MsoPatternType), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Pattern, arg[0]);
        CtlC.CallParMethod(this, 12, arg, NIL);
    END Patterned;

    PROCEDURE (this: FillFormat) PresetGradient* (Style: CtlOffice.MsoGradientStyle; Variant: INTEGER; PresetGradientType: CtlOffice.MsoPresetGradientType), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Style, arg[2]);
        CtlC.IntVar(Variant, arg[1]);
        CtlC.IntVar(PresetGradientType, arg[0]);
        CtlC.CallParMethod(this, 13, arg, NIL);
    END PresetGradient;

    PROCEDURE (this: FillFormat) PresetTextured* (PresetTexture: CtlOffice.MsoPresetTexture), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(PresetTexture, arg[0]);
        CtlC.CallParMethod(this, 14, arg, NIL);
    END PresetTextured;

    PROCEDURE (this: FillFormat) Solid* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 15, NIL);
    END Solid;

    PROCEDURE (this: FillFormat) TwoColorGradient* (Style: CtlOffice.MsoGradientStyle; Variant: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Style, arg[1]);
        CtlC.IntVar(Variant, arg[0]);
        CtlC.CallParMethod(this, 16, arg, NIL);
    END TwoColorGradient;

    PROCEDURE (this: FillFormat) UserPicture* (PictureFile: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(PictureFile, arg[0]);
        CtlC.CallParMethod(this, 17, arg, NIL);
    END UserPicture;

    PROCEDURE (this: FillFormat) UserTextured* (TextureFile: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(TextureFile, arg[0]);
        CtlC.CallParMethod(this, 18, arg, NIL);
    END UserTextured;

    PROCEDURE (this: FillFormat) BackColor* (): ColorFormat, NEW;
    BEGIN
        RETURN ThisColorFormat(CtlC.GetAny(this, 100))
    END BackColor;

    PROCEDURE (this: FillFormat) PUTBackColor* (p1: ColorFormat), NEW;
    BEGIN
        CtlC.PutObj(this, 100, p1)
    END PUTBackColor;

    PROCEDURE (this: FillFormat) ForeColor* (): ColorFormat, NEW;
    BEGIN
        RETURN ThisColorFormat(CtlC.GetAny(this, 101))
    END ForeColor;

    PROCEDURE (this: FillFormat) PUTForeColor* (p1: ColorFormat), NEW;
    BEGIN
        CtlC.PutObj(this, 101, p1)
    END PUTForeColor;

    PROCEDURE (this: FillFormat) GradientColorType* (): CtlOffice.MsoGradientColorType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 102)
    END GradientColorType;

    PROCEDURE (this: FillFormat) GradientDegree* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 103)
    END GradientDegree;

    PROCEDURE (this: FillFormat) GradientStyle* (): CtlOffice.MsoGradientStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 104)
    END GradientStyle;

    PROCEDURE (this: FillFormat) GradientVariant* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 105)
    END GradientVariant;

    PROCEDURE (this: FillFormat) Pattern* (): CtlOffice.MsoPatternType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 106)
    END Pattern;

    PROCEDURE (this: FillFormat) PresetGradientType* (): CtlOffice.MsoPresetGradientType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 107)
    END PresetGradientType;

    PROCEDURE (this: FillFormat) PresetTexture* (): CtlOffice.MsoPresetTexture, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END PresetTexture;

    PROCEDURE (this: FillFormat) TextureName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 109)
    END TextureName;

    PROCEDURE (this: FillFormat) TextureType* (): CtlOffice.MsoTextureType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 110)
    END TextureType;

    PROCEDURE (this: FillFormat) Transparency* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 111)
    END Transparency;

    PROCEDURE (this: FillFormat) PUTTransparency* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 111, p1)
    END PUTTransparency;

    PROCEDURE (this: FillFormat) Type* (): CtlOffice.MsoFillType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 112)
    END Type;

    PROCEDURE (this: FillFormat) Visible* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 113)
    END Visible;

    PROCEDURE (this: FillFormat) PUTVisible* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 113, p1)
    END PUTVisible;


    (* ---------- _Application, dual ---------- *)

    PROCEDURE (this: _Application) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: _Application) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: _Application) Parent* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: _Application) ActiveCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 305))
    END ActiveCell;

    PROCEDURE (this: _Application) ActiveChart* (): Chart, NEW;
    BEGIN
        RETURN This_Chart(CtlC.GetAny(this, 183))
    END ActiveChart;

    PROCEDURE (this: _Application) ActiveDialog* (): DialogSheet, NEW;
    BEGIN
        RETURN ThisDialogSheet(CtlC.GetAny(this, 815))
    END ActiveDialog;

    PROCEDURE (this: _Application) ActiveMenuBar* (): MenuBar, NEW;
    BEGIN
        RETURN ThisMenuBar(CtlC.GetAny(this, 758))
    END ActiveMenuBar;

    PROCEDURE (this: _Application) ActivePrinter* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 306)
    END ActivePrinter;

    PROCEDURE (this: _Application) PUTActivePrinter* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 306, p1)
    END PUTActivePrinter;

    PROCEDURE (this: _Application) ActiveSheet* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 307)
    END ActiveSheet;

    PROCEDURE (this: _Application) ActiveWindow* (): Window, NEW;
    BEGIN
        RETURN ThisWindow(CtlC.GetAny(this, 759))
    END ActiveWindow;

    PROCEDURE (this: _Application) ActiveWorkbook* (): Workbook, NEW;
    BEGIN
        RETURN This_Workbook(CtlC.GetAny(this, 308))
    END ActiveWorkbook;

    PROCEDURE (this: _Application) AddIns* (): AddIns, NEW;
    BEGIN
        RETURN ThisAddIns(CtlC.GetAny(this, 549))
    END AddIns;

    PROCEDURE (this: _Application) Assistant* (): CtlOffice.Assistant, NEW;
    BEGIN
        RETURN CtlOffice.ThisAssistant(CtlC.GetAny(this, 1438))
    END Assistant;

    PROCEDURE (this: _Application) Calculate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 279, NIL);
    END Calculate;

    PROCEDURE (this: _Application) Cells* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 238))
    END Cells;

    PROCEDURE (this: _Application) Charts* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 121))
    END Charts;

    PROCEDURE (this: _Application) Columns* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 241))
    END Columns;

    PROCEDURE (this: _Application) CommandBars* (): CtlOffice.CommandBars, NEW;
    BEGIN
        RETURN CtlOffice.ThisCommandBars(CtlC.GetAny(this, 1439))
    END CommandBars;

    PROCEDURE (this: _Application) DDEAppReturnCode* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 332)
    END DDEAppReturnCode;

    PROCEDURE (this: _Application) DDEExecute* (Channel: INTEGER; String: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[1]);
        CtlC.StrVar(String, arg[0]);
        CtlC.CallParMethod(this, 333, arg, NIL);
    END DDEExecute;

    PROCEDURE (this: _Application) DDEInitiate* (App: ARRAY OF CHAR; Topic: ARRAY OF CHAR): INTEGER, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(App, arg[1]);
        CtlC.StrVar(Topic, arg[0]);
        CtlC.CallParMethod(this, 334, arg, ret);
        RETURN CtlC.VarInt(ret)
    END DDEInitiate;

    PROCEDURE (this: _Application) DDEPoke* (Channel: INTEGER; Item: CtlT.Any; Data: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[2]);
        CtlC.AnyVar(Item, arg[1]);
        CtlC.AnyVar(Data, arg[0]);
        CtlC.CallParMethod(this, 335, arg, NIL);
    END DDEPoke;

    PROCEDURE (this: _Application) DDERequest* (Channel: INTEGER; Item: ARRAY OF CHAR): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[1]);
        CtlC.StrVar(Item, arg[0]);
        CtlC.CallParMethod(this, 336, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDERequest;

    PROCEDURE (this: _Application) DDETerminate* (Channel: INTEGER), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[0]);
        CtlC.CallParMethod(this, 337, arg, NIL);
    END DDETerminate;

    PROCEDURE (this: _Application) DialogSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 764))
    END DialogSheets;

    PROCEDURE (this: _Application) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: _Application) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: _Application) ExecuteExcel4Macro* (String: ARRAY OF CHAR): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(String, arg[0]);
        CtlC.CallParMethod(this, 350, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ExecuteExcel4Macro;

    PROCEDURE (this: _Application) Intersect* (Arg1: Range; Arg2: Range; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[29]);
        CtlC.ObjVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 766, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Intersect;

    PROCEDURE (this: _Application) MenuBars* (): MenuBars, NEW;
    BEGIN
        RETURN ThisMenuBars(CtlC.GetAny(this, 589))
    END MenuBars;

    PROCEDURE (this: _Application) Modules* (): Modules, NEW;
    BEGIN
        RETURN ThisModules(CtlC.GetAny(this, 582))
    END Modules;

    PROCEDURE (this: _Application) Names* (): Names, NEW;
    BEGIN
        RETURN ThisNames(CtlC.GetAny(this, 442))
    END Names;

    PROCEDURE (this: _Application) Range* (Cell1: CtlT.Any; (* optional *) Cell2: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallGetMethod(this, 197, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Range;

    PROCEDURE (this: _Application) Rows* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 258))
    END Rows;

    PROCEDURE (this: _Application) Run* ((* optional *) Macro: CtlT.Any; Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 31 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[30]);
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 259, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Run;

    PROCEDURE (this: _Application) _Run2* ((* optional *) Macro: CtlT.Any; Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 31 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[30]);
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 806, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Run2;

    PROCEDURE (this: _Application) Selection* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 147)
    END Selection;

    PROCEDURE (this: _Application) SendKeys* (Keys: CtlT.Any; (* optional *) Wait: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Keys, arg[1]);
        CtlC.AnyVar(Wait, arg[0]);
        CtlC.CallParMethod(this, 383, arg, NIL);
    END SendKeys;

    PROCEDURE (this: _Application) Sheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 485))
    END Sheets;

    PROCEDURE (this: _Application) ShortcutMenus* (Index: INTEGER): Menu, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 776, arg, ret);
        RETURN ThisMenu(CtlC.VarAny(ret))
    END ShortcutMenus;

    PROCEDURE (this: _Application) ThisWorkbook* (): Workbook, NEW;
    BEGIN
        RETURN This_Workbook(CtlC.GetAny(this, 778))
    END ThisWorkbook;

    PROCEDURE (this: _Application) Toolbars* (): Toolbars, NEW;
    BEGIN
        RETURN ThisToolbars(CtlC.GetAny(this, 552))
    END Toolbars;

    PROCEDURE (this: _Application) Union* (Arg1: Range; Arg2: Range; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[29]);
        CtlC.ObjVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 779, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Union;

    PROCEDURE (this: _Application) Windows* (): Windows, NEW;
    BEGIN
        RETURN ThisWindows(CtlC.GetAny(this, 430))
    END Windows;

    PROCEDURE (this: _Application) Workbooks* (): Workbooks, NEW;
    BEGIN
        RETURN ThisWorkbooks(CtlC.GetAny(this, 572))
    END Workbooks;

    PROCEDURE (this: _Application) WorksheetFunction* (): WorksheetFunction, NEW;
    BEGIN
        RETURN ThisWorksheetFunction(CtlC.GetAny(this, 1440))
    END WorksheetFunction;

    PROCEDURE (this: _Application) Worksheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 494))
    END Worksheets;

    PROCEDURE (this: _Application) Excel4IntlMacroSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 581))
    END Excel4IntlMacroSheets;

    PROCEDURE (this: _Application) Excel4MacroSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 579))
    END Excel4MacroSheets;

    PROCEDURE (this: _Application) ActivateMicrosoftApp* (Index: XlMSApplication), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1095, arg, NIL);
    END ActivateMicrosoftApp;

    PROCEDURE (this: _Application) AddChartAutoFormat* (Chart: CtlT.Any; Name: ARRAY OF CHAR; (* optional *) Description: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Chart, arg[2]);
        CtlC.StrVar(Name, arg[1]);
        CtlC.AnyVar(Description, arg[0]);
        CtlC.CallParMethod(this, 216, arg, NIL);
    END AddChartAutoFormat;

    PROCEDURE (this: _Application) AddCustomList* (ListArray: CtlT.Any; (* optional *) ByRow: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ListArray, arg[1]);
        CtlC.AnyVar(ByRow, arg[0]);
        CtlC.CallParMethod(this, 780, arg, NIL);
    END AddCustomList;

    PROCEDURE (this: _Application) AlertBeforeOverwriting* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 930)
    END AlertBeforeOverwriting;

    PROCEDURE (this: _Application) PUTAlertBeforeOverwriting* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 930, p1)
    END PUTAlertBeforeOverwriting;

    PROCEDURE (this: _Application) AltStartupPath* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 313)
    END AltStartupPath;

    PROCEDURE (this: _Application) PUTAltStartupPath* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 313, p1)
    END PUTAltStartupPath;

    PROCEDURE (this: _Application) AskToUpdateLinks* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 992)
    END AskToUpdateLinks;

    PROCEDURE (this: _Application) PUTAskToUpdateLinks* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 992, p1)
    END PUTAskToUpdateLinks;

    PROCEDURE (this: _Application) EnableAnimations* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1180)
    END EnableAnimations;

    PROCEDURE (this: _Application) PUTEnableAnimations* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1180, p1)
    END PUTEnableAnimations;

    PROCEDURE (this: _Application) AutoCorrect* (): AutoCorrect, NEW;
    BEGIN
        RETURN ThisAutoCorrect(CtlC.GetAny(this, 1145))
    END AutoCorrect;

    PROCEDURE (this: _Application) Build* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 314)
    END Build;

    PROCEDURE (this: _Application) CalculateBeforeSave* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 315)
    END CalculateBeforeSave;

    PROCEDURE (this: _Application) PUTCalculateBeforeSave* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 315, p1)
    END PUTCalculateBeforeSave;

    PROCEDURE (this: _Application) Calculation* (): XlCalculation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 316)
    END Calculation;

    PROCEDURE (this: _Application) PUTCalculation* (p1: XlCalculation), NEW;
    BEGIN
        CtlC.PutInt(this, 316, p1)
    END PUTCalculation;

    PROCEDURE (this: _Application) Caller* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 317, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Caller;

    PROCEDURE (this: _Application) CanPlaySounds* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 318)
    END CanPlaySounds;

    PROCEDURE (this: _Application) CanRecordSounds* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 319)
    END CanRecordSounds;

    PROCEDURE (this: _Application) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: _Application) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: _Application) CellDragAndDrop* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 320)
    END CellDragAndDrop;

    PROCEDURE (this: _Application) PUTCellDragAndDrop* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 320, p1)
    END PUTCellDragAndDrop;

    PROCEDURE (this: _Application) CentimetersToPoints* (Centimeters: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Centimeters, arg[0]);
        CtlC.CallParMethod(this, 1086, arg, ret);
        RETURN CtlC.VarReal(ret)
    END CentimetersToPoints;

    PROCEDURE (this: _Application) CheckSpelling* (Word: ARRAY OF CHAR; (* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Word, arg[2]);
        CtlC.AnyVar(CustomDictionary, arg[1]);
        CtlC.AnyVar(IgnoreUppercase, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarBool(ret)
    END CheckSpelling;

    PROCEDURE (this: _Application) ClipboardFormats* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 321, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ClipboardFormats;

    PROCEDURE (this: _Application) DisplayClipboardWindow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 322)
    END DisplayClipboardWindow;

    PROCEDURE (this: _Application) PUTDisplayClipboardWindow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 322, p1)
    END PUTDisplayClipboardWindow;

    PROCEDURE (this: _Application) ColorButtons* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 365)
    END ColorButtons;

    PROCEDURE (this: _Application) PUTColorButtons* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 365, p1)
    END PUTColorButtons;

    PROCEDURE (this: _Application) CommandUnderlines* (): XlCommandUnderlines, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 323)
    END CommandUnderlines;

    PROCEDURE (this: _Application) PUTCommandUnderlines* (p1: XlCommandUnderlines), NEW;
    BEGIN
        CtlC.PutInt(this, 323, p1)
    END PUTCommandUnderlines;

    PROCEDURE (this: _Application) ConstrainNumeric* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 324)
    END ConstrainNumeric;

    PROCEDURE (this: _Application) PUTConstrainNumeric* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 324, p1)
    END PUTConstrainNumeric;

    PROCEDURE (this: _Application) ConvertFormula* (Formula: CtlT.Any; FromReferenceStyle: XlReferenceStyle; (* optional *) ToReferenceStyle: CtlT.Any; ToAbsolute: CtlT.Any; RelativeTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Formula, arg[4]);
        CtlC.IntVar(FromReferenceStyle, arg[3]);
        CtlC.AnyVar(ToReferenceStyle, arg[2]);
        CtlC.AnyVar(ToAbsolute, arg[1]);
        CtlC.AnyVar(RelativeTo, arg[0]);
        CtlC.CallParMethod(this, 325, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ConvertFormula;

    PROCEDURE (this: _Application) CopyObjectsWithCells* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 991)
    END CopyObjectsWithCells;

    PROCEDURE (this: _Application) PUTCopyObjectsWithCells* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 991, p1)
    END PUTCopyObjectsWithCells;

    PROCEDURE (this: _Application) Cursor* (): XlMousePointer, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1161)
    END Cursor;

    PROCEDURE (this: _Application) PUTCursor* (p1: XlMousePointer), NEW;
    BEGIN
        CtlC.PutInt(this, 1161, p1)
    END PUTCursor;

    PROCEDURE (this: _Application) CustomListCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 787)
    END CustomListCount;

    PROCEDURE (this: _Application) CutCopyMode* (): XlCutCopyMode, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 330)
    END CutCopyMode;

    PROCEDURE (this: _Application) PUTCutCopyMode* (p1: XlCutCopyMode), NEW;
    BEGIN
        CtlC.PutInt(this, 330, p1)
    END PUTCutCopyMode;

    PROCEDURE (this: _Application) DataEntryMode* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 331)
    END DataEntryMode;

    PROCEDURE (this: _Application) PUTDataEntryMode* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 331, p1)
    END PUTDataEntryMode;

    PROCEDURE (this: _Application) Dummy1* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1767, NIL);
    END Dummy1;

    PROCEDURE (this: _Application) Dummy2* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1768, NIL);
    END Dummy2;

    PROCEDURE (this: _Application) Dummy3* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1769, NIL);
    END Dummy3;

    PROCEDURE (this: _Application) Dummy4* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1770, NIL);
    END Dummy4;

    PROCEDURE (this: _Application) Dummy5* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1771, NIL);
    END Dummy5;

    PROCEDURE (this: _Application) Dummy6* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1772, NIL);
    END Dummy6;

    PROCEDURE (this: _Application) Dummy7* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1773, NIL);
    END Dummy7;

    PROCEDURE (this: _Application) Dummy8* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1774, NIL);
    END Dummy8;

    PROCEDURE (this: _Application) Dummy9* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1775, NIL);
    END Dummy9;

    PROCEDURE (this: _Application) Dummy10* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1776, NIL);
    END Dummy10;

    PROCEDURE (this: _Application) Dummy11* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1777, NIL);
    END Dummy11;

    PROCEDURE (this: _Application) _Default* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 0)
    END _Default;

    PROCEDURE (this: _Application) DefaultFilePath* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1038)
    END DefaultFilePath;

    PROCEDURE (this: _Application) PUTDefaultFilePath* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1038, p1)
    END PUTDefaultFilePath;

    PROCEDURE (this: _Application) DeleteChartAutoFormat* (Name: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[0]);
        CtlC.CallParMethod(this, 217, arg, NIL);
    END DeleteChartAutoFormat;

    PROCEDURE (this: _Application) DeleteCustomList* (ListNum: INTEGER), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(ListNum, arg[0]);
        CtlC.CallParMethod(this, 783, arg, NIL);
    END DeleteCustomList;

    PROCEDURE (this: _Application) Dialogs* (): Dialogs, NEW;
    BEGIN
        RETURN ThisDialogs(CtlC.GetAny(this, 761))
    END Dialogs;

    PROCEDURE (this: _Application) DisplayAlerts* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 343)
    END DisplayAlerts;

    PROCEDURE (this: _Application) PUTDisplayAlerts* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 343, p1)
    END PUTDisplayAlerts;

    PROCEDURE (this: _Application) DisplayFormulaBar* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 344)
    END DisplayFormulaBar;

    PROCEDURE (this: _Application) PUTDisplayFormulaBar* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 344, p1)
    END PUTDisplayFormulaBar;

    PROCEDURE (this: _Application) DisplayFullScreen* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1061)
    END DisplayFullScreen;

    PROCEDURE (this: _Application) PUTDisplayFullScreen* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1061, p1)
    END PUTDisplayFullScreen;

    PROCEDURE (this: _Application) DisplayNoteIndicator* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 345)
    END DisplayNoteIndicator;

    PROCEDURE (this: _Application) PUTDisplayNoteIndicator* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 345, p1)
    END PUTDisplayNoteIndicator;

    PROCEDURE (this: _Application) DisplayCommentIndicator* (): XlCommentDisplayMode, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1196)
    END DisplayCommentIndicator;

    PROCEDURE (this: _Application) PUTDisplayCommentIndicator* (p1: XlCommentDisplayMode), NEW;
    BEGIN
        CtlC.PutInt(this, 1196, p1)
    END PUTDisplayCommentIndicator;

    PROCEDURE (this: _Application) DisplayExcel4Menus* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 927)
    END DisplayExcel4Menus;

    PROCEDURE (this: _Application) PUTDisplayExcel4Menus* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 927, p1)
    END PUTDisplayExcel4Menus;

    PROCEDURE (this: _Application) DisplayRecentFiles* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 926)
    END DisplayRecentFiles;

    PROCEDURE (this: _Application) PUTDisplayRecentFiles* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 926, p1)
    END PUTDisplayRecentFiles;

    PROCEDURE (this: _Application) DisplayScrollBars* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 346)
    END DisplayScrollBars;

    PROCEDURE (this: _Application) PUTDisplayScrollBars* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 346, p1)
    END PUTDisplayScrollBars;

    PROCEDURE (this: _Application) DisplayStatusBar* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 347)
    END DisplayStatusBar;

    PROCEDURE (this: _Application) PUTDisplayStatusBar* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 347, p1)
    END PUTDisplayStatusBar;

    PROCEDURE (this: _Application) DoubleClick* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 349, NIL);
    END DoubleClick;

    PROCEDURE (this: _Application) EditDirectlyInCell* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 929)
    END EditDirectlyInCell;

    PROCEDURE (this: _Application) PUTEditDirectlyInCell* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 929, p1)
    END PUTEditDirectlyInCell;

    PROCEDURE (this: _Application) EnableAutoComplete* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1179)
    END EnableAutoComplete;

    PROCEDURE (this: _Application) PUTEnableAutoComplete* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1179, p1)
    END PUTEnableAutoComplete;

    PROCEDURE (this: _Application) EnableCancelKey* (): XlEnableCancelKey, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1096)
    END EnableCancelKey;

    PROCEDURE (this: _Application) PUTEnableCancelKey* (p1: XlEnableCancelKey), NEW;
    BEGIN
        CtlC.PutInt(this, 1096, p1)
    END PUTEnableCancelKey;

    PROCEDURE (this: _Application) EnableSound* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1197)
    END EnableSound;

    PROCEDURE (this: _Application) PUTEnableSound* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1197, p1)
    END PUTEnableSound;

    PROCEDURE (this: _Application) EnableTipWizard* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1064)
    END EnableTipWizard;

    PROCEDURE (this: _Application) PUTEnableTipWizard* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1064, p1)
    END PUTEnableTipWizard;

    PROCEDURE (this: _Application) FileConverters* ((* optional *) Index1: CtlT.Any; Index2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index1, arg[1]);
        CtlC.AnyVar(Index2, arg[0]);
        CtlC.CallGetMethod(this, 931, arg, ret);
        RETURN CtlC.VarAny(ret)
    END FileConverters;

    PROCEDURE (this: _Application) FileSearch* (): CtlOffice.FileSearch, NEW;
    BEGIN
        RETURN CtlOffice.ThisFileSearch(CtlC.GetAny(this, 1200))
    END FileSearch;

    PROCEDURE (this: _Application) FileFind* (): CtlOffice.IFind, NEW;
    BEGIN
        RETURN CtlOffice.ThisIFind(CtlC.GetAny(this, 1201))
    END FileFind;

    PROCEDURE (this: _Application) FindFile* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1068, NIL);
    END FindFile;

    PROCEDURE (this: _Application) FixedDecimal* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 351)
    END FixedDecimal;

    PROCEDURE (this: _Application) PUTFixedDecimal* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 351, p1)
    END PUTFixedDecimal;

    PROCEDURE (this: _Application) FixedDecimalPlaces* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 352)
    END FixedDecimalPlaces;

    PROCEDURE (this: _Application) PUTFixedDecimalPlaces* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 352, p1)
    END PUTFixedDecimalPlaces;

    PROCEDURE (this: _Application) GetCustomListContents* (ListNum: INTEGER): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(ListNum, arg[0]);
        CtlC.CallParMethod(this, 786, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GetCustomListContents;

    PROCEDURE (this: _Application) GetCustomListNum* (ListArray: CtlT.Any): INTEGER, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ListArray, arg[0]);
        CtlC.CallParMethod(this, 785, arg, ret);
        RETURN CtlC.VarInt(ret)
    END GetCustomListNum;

    PROCEDURE (this: _Application) GetOpenFilename* ((* optional *) FileFilter: CtlT.Any; FilterIndex: CtlT.Any; Title: CtlT.Any; ButtonText: CtlT.Any; MultiSelect: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(FileFilter, arg[4]);
        CtlC.AnyVar(FilterIndex, arg[3]);
        CtlC.AnyVar(Title, arg[2]);
        CtlC.AnyVar(ButtonText, arg[1]);
        CtlC.AnyVar(MultiSelect, arg[0]);
        CtlC.CallParMethod(this, 1075, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GetOpenFilename;

    PROCEDURE (this: _Application) GetSaveAsFilename* ((* optional *) InitialFilename: CtlT.Any; FileFilter: CtlT.Any; FilterIndex: CtlT.Any; Title: CtlT.Any; ButtonText: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(InitialFilename, arg[4]);
        CtlC.AnyVar(FileFilter, arg[3]);
        CtlC.AnyVar(FilterIndex, arg[2]);
        CtlC.AnyVar(Title, arg[1]);
        CtlC.AnyVar(ButtonText, arg[0]);
        CtlC.CallParMethod(this, 1076, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GetSaveAsFilename;

    PROCEDURE (this: _Application) Goto* ((* optional *) Reference: CtlT.Any; Scroll: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Reference, arg[1]);
        CtlC.AnyVar(Scroll, arg[0]);
        CtlC.CallParMethod(this, 475, arg, NIL);
    END Goto;

    PROCEDURE (this: _Application) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: _Application) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: _Application) Help* ((* optional *) HelpFile: CtlT.Any; HelpContextID: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(HelpFile, arg[1]);
        CtlC.AnyVar(HelpContextID, arg[0]);
        CtlC.CallParMethod(this, 354, arg, NIL);
    END Help;

    PROCEDURE (this: _Application) IgnoreRemoteRequests* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 356)
    END IgnoreRemoteRequests;

    PROCEDURE (this: _Application) PUTIgnoreRemoteRequests* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 356, p1)
    END PUTIgnoreRemoteRequests;

    PROCEDURE (this: _Application) InchesToPoints* (Inches: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Inches, arg[0]);
        CtlC.CallParMethod(this, 1087, arg, ret);
        RETURN CtlC.VarReal(ret)
    END InchesToPoints;

    PROCEDURE (this: _Application) InputBox* (Prompt: ARRAY OF CHAR; (* optional *) Title: CtlT.Any; Default: CtlT.Any; Left: CtlT.Any; Top: CtlT.Any; HelpFile: CtlT.Any; HelpContextID: CtlT.Any; Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Prompt, arg[7]);
        CtlC.AnyVar(Title, arg[6]);
        CtlC.AnyVar(Default, arg[5]);
        CtlC.AnyVar(Left, arg[4]);
        CtlC.AnyVar(Top, arg[3]);
        CtlC.AnyVar(HelpFile, arg[2]);
        CtlC.AnyVar(HelpContextID, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 357, arg, ret);
        RETURN CtlC.VarAny(ret)
    END InputBox;

    PROCEDURE (this: _Application) Interactive* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 361)
    END Interactive;

    PROCEDURE (this: _Application) PUTInteractive* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 361, p1)
    END PUTInteractive;

    PROCEDURE (this: _Application) International* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 362, arg, ret);
        RETURN CtlC.VarAny(ret)
    END International;

    PROCEDURE (this: _Application) Iteration* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 363)
    END Iteration;

    PROCEDURE (this: _Application) PUTIteration* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 363, p1)
    END PUTIteration;

    PROCEDURE (this: _Application) LargeButtons* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 364)
    END LargeButtons;

    PROCEDURE (this: _Application) PUTLargeButtons* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 364, p1)
    END PUTLargeButtons;

    PROCEDURE (this: _Application) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: _Application) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: _Application) LibraryPath* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 366)
    END LibraryPath;

    PROCEDURE (this: _Application) MacroOptions* ((* optional *) Macro: CtlT.Any; Description: CtlT.Any; HasMenu: CtlT.Any; MenuText: CtlT.Any; HasShortcutKey: CtlT.Any; ShortcutKey: CtlT.Any; Category: CtlT.Any; StatusBar: CtlT.Any; HelpContextID: CtlT.Any; HelpFile: CtlT.Any), NEW;
        VAR arg: ARRAY 10 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[9]);
        CtlC.AnyVar(Description, arg[8]);
        CtlC.AnyVar(HasMenu, arg[7]);
        CtlC.AnyVar(MenuText, arg[6]);
        CtlC.AnyVar(HasShortcutKey, arg[5]);
        CtlC.AnyVar(ShortcutKey, arg[4]);
        CtlC.AnyVar(Category, arg[3]);
        CtlC.AnyVar(StatusBar, arg[2]);
        CtlC.AnyVar(HelpContextID, arg[1]);
        CtlC.AnyVar(HelpFile, arg[0]);
        CtlC.CallParMethod(this, 1135, arg, NIL);
    END MacroOptions;

    PROCEDURE (this: _Application) MailLogoff* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 945, NIL);
    END MailLogoff;

    PROCEDURE (this: _Application) MailLogon* ((* optional *) Name: CtlT.Any; Password: CtlT.Any; DownloadNewMail: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[2]);
        CtlC.AnyVar(Password, arg[1]);
        CtlC.AnyVar(DownloadNewMail, arg[0]);
        CtlC.CallParMethod(this, 943, arg, NIL);
    END MailLogon;

    PROCEDURE (this: _Application) MailSession* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 942)
    END MailSession;

    PROCEDURE (this: _Application) MailSystem* (): XlMailSystem, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 971)
    END MailSystem;

    PROCEDURE (this: _Application) MathCoprocessorAvailable* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 367)
    END MathCoprocessorAvailable;

    PROCEDURE (this: _Application) MaxChange* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 368)
    END MaxChange;

    PROCEDURE (this: _Application) PUTMaxChange* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 368, p1)
    END PUTMaxChange;

    PROCEDURE (this: _Application) MaxIterations* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 369)
    END MaxIterations;

    PROCEDURE (this: _Application) PUTMaxIterations* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 369, p1)
    END PUTMaxIterations;

    PROCEDURE (this: _Application) MemoryFree* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 370)
    END MemoryFree;

    PROCEDURE (this: _Application) MemoryTotal* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 371)
    END MemoryTotal;

    PROCEDURE (this: _Application) MemoryUsed* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 372)
    END MemoryUsed;

    PROCEDURE (this: _Application) MouseAvailable* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 373)
    END MouseAvailable;

    PROCEDURE (this: _Application) MoveAfterReturn* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 374)
    END MoveAfterReturn;

    PROCEDURE (this: _Application) PUTMoveAfterReturn* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 374, p1)
    END PUTMoveAfterReturn;

    PROCEDURE (this: _Application) MoveAfterReturnDirection* (): XlDirection, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1144)
    END MoveAfterReturnDirection;

    PROCEDURE (this: _Application) PUTMoveAfterReturnDirection* (p1: XlDirection), NEW;
    BEGIN
        CtlC.PutInt(this, 1144, p1)
    END PUTMoveAfterReturnDirection;

    PROCEDURE (this: _Application) RecentFiles* (): RecentFiles, NEW;
    BEGIN
        RETURN ThisRecentFiles(CtlC.GetAny(this, 1202))
    END RecentFiles;

    PROCEDURE (this: _Application) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: _Application) NextLetter* (): Workbook, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 972, ret);
        RETURN This_Workbook(CtlC.VarAny(ret))
    END NextLetter;

    PROCEDURE (this: _Application) NetworkTemplatesPath* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 388)
    END NetworkTemplatesPath;

    PROCEDURE (this: _Application) ODBCErrors* (): ODBCErrors, NEW;
    BEGIN
        RETURN ThisODBCErrors(CtlC.GetAny(this, 1203))
    END ODBCErrors;

    PROCEDURE (this: _Application) ODBCTimeout* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1204)
    END ODBCTimeout;

    PROCEDURE (this: _Application) PUTODBCTimeout* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1204, p1)
    END PUTODBCTimeout;

    PROCEDURE (this: _Application) OnCalculate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 625)
    END OnCalculate;

    PROCEDURE (this: _Application) PUTOnCalculate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 625, p1)
    END PUTOnCalculate;

    PROCEDURE (this: _Application) OnData* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 629)
    END OnData;

    PROCEDURE (this: _Application) PUTOnData* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 629, p1)
    END PUTOnData;

    PROCEDURE (this: _Application) OnDoubleClick* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: _Application) PUTOnDoubleClick* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 628, p1)
    END PUTOnDoubleClick;

    PROCEDURE (this: _Application) OnEntry* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 627)
    END OnEntry;

    PROCEDURE (this: _Application) PUTOnEntry* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 627, p1)
    END PUTOnEntry;

    PROCEDURE (this: _Application) OnKey* (Key: ARRAY OF CHAR; (* optional *) Procedure: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Key, arg[1]);
        CtlC.AnyVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 626, arg, NIL);
    END OnKey;

    PROCEDURE (this: _Application) OnRepeat* (Text: ARRAY OF CHAR; Procedure: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Text, arg[1]);
        CtlC.StrVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 769, arg, NIL);
    END OnRepeat;

    PROCEDURE (this: _Application) OnSheetActivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: _Application) PUTOnSheetActivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1031, p1)
    END PUTOnSheetActivate;

    PROCEDURE (this: _Application) OnSheetDeactivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: _Application) PUTOnSheetDeactivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1081, p1)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: _Application) OnTime* (EarliestTime: CtlT.Any; Procedure: ARRAY OF CHAR; (* optional *) LatestTime: CtlT.Any; Schedule: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EarliestTime, arg[3]);
        CtlC.StrVar(Procedure, arg[2]);
        CtlC.AnyVar(LatestTime, arg[1]);
        CtlC.AnyVar(Schedule, arg[0]);
        CtlC.CallParMethod(this, 624, arg, NIL);
    END OnTime;

    PROCEDURE (this: _Application) OnUndo* (Text: ARRAY OF CHAR; Procedure: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Text, arg[1]);
        CtlC.StrVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 770, arg, NIL);
    END OnUndo;

    PROCEDURE (this: _Application) OnWindow* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 623)
    END OnWindow;

    PROCEDURE (this: _Application) PUTOnWindow* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 623, p1)
    END PUTOnWindow;

    PROCEDURE (this: _Application) OperatingSystem* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 375)
    END OperatingSystem;

    PROCEDURE (this: _Application) OrganizationName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 376)
    END OrganizationName;

    PROCEDURE (this: _Application) Path* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 291)
    END Path;

    PROCEDURE (this: _Application) PathSeparator* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 377)
    END PathSeparator;

    PROCEDURE (this: _Application) PreviousSelections* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 378, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PreviousSelections;

    PROCEDURE (this: _Application) PivotTableSelection* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1205)
    END PivotTableSelection;

    PROCEDURE (this: _Application) PUTPivotTableSelection* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1205, p1)
    END PUTPivotTableSelection;

    PROCEDURE (this: _Application) PromptForSummaryInfo* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1062)
    END PromptForSummaryInfo;

    PROCEDURE (this: _Application) PUTPromptForSummaryInfo* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1062, p1)
    END PUTPromptForSummaryInfo;

    PROCEDURE (this: _Application) Quit* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 302, NIL);
    END Quit;

    PROCEDURE (this: _Application) RecordMacro* ((* optional *) BasicCode: CtlT.Any; XlmCode: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(BasicCode, arg[1]);
        CtlC.AnyVar(XlmCode, arg[0]);
        CtlC.CallParMethod(this, 773, arg, NIL);
    END RecordMacro;

    PROCEDURE (this: _Application) RecordRelative* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 379)
    END RecordRelative;

    PROCEDURE (this: _Application) ReferenceStyle* (): XlReferenceStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 380)
    END ReferenceStyle;

    PROCEDURE (this: _Application) PUTReferenceStyle* (p1: XlReferenceStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 380, p1)
    END PUTReferenceStyle;

    PROCEDURE (this: _Application) RegisteredFunctions* ((* optional *) Index1: CtlT.Any; Index2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index1, arg[1]);
        CtlC.AnyVar(Index2, arg[0]);
        CtlC.CallGetMethod(this, 775, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RegisteredFunctions;

    PROCEDURE (this: _Application) RegisterXLL* (Filename: ARRAY OF CHAR): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 30, arg, ret);
        RETURN CtlC.VarBool(ret)
    END RegisterXLL;

    PROCEDURE (this: _Application) Repeat* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 301, NIL);
    END Repeat;

    PROCEDURE (this: _Application) ResetTipWizard* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 928, NIL);
    END ResetTipWizard;

    PROCEDURE (this: _Application) RollZoom* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1206)
    END RollZoom;

    PROCEDURE (this: _Application) PUTRollZoom* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1206, p1)
    END PUTRollZoom;

    PROCEDURE (this: _Application) Save* ((* optional *) Filename: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 283, arg, NIL);
    END Save;

    PROCEDURE (this: _Application) SaveWorkspace* ((* optional *) Filename: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 212, arg, NIL);
    END SaveWorkspace;

    PROCEDURE (this: _Application) ScreenUpdating* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 382)
    END ScreenUpdating;

    PROCEDURE (this: _Application) PUTScreenUpdating* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 382, p1)
    END PUTScreenUpdating;

    PROCEDURE (this: _Application) SetDefaultChart* ((* optional *) FormatName: CtlT.Any; Gallery: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(FormatName, arg[1]);
        CtlC.AnyVar(Gallery, arg[0]);
        CtlC.CallParMethod(this, 219, arg, NIL);
    END SetDefaultChart;

    PROCEDURE (this: _Application) SheetsInNewWorkbook* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 993)
    END SheetsInNewWorkbook;

    PROCEDURE (this: _Application) PUTSheetsInNewWorkbook* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 993, p1)
    END PUTSheetsInNewWorkbook;

    PROCEDURE (this: _Application) ShowChartTipNames* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1207)
    END ShowChartTipNames;

    PROCEDURE (this: _Application) PUTShowChartTipNames* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1207, p1)
    END PUTShowChartTipNames;

    PROCEDURE (this: _Application) ShowChartTipValues* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1208)
    END ShowChartTipValues;

    PROCEDURE (this: _Application) PUTShowChartTipValues* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1208, p1)
    END PUTShowChartTipValues;

    PROCEDURE (this: _Application) StandardFont* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 924)
    END StandardFont;

    PROCEDURE (this: _Application) PUTStandardFont* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 924, p1)
    END PUTStandardFont;

    PROCEDURE (this: _Application) StandardFontSize* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 925)
    END StandardFontSize;

    PROCEDURE (this: _Application) PUTStandardFontSize* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 925, p1)
    END PUTStandardFontSize;

    PROCEDURE (this: _Application) StartupPath* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 385)
    END StartupPath;

    PROCEDURE (this: _Application) StatusBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 386)
    END StatusBar;

    PROCEDURE (this: _Application) PUTStatusBar* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 386, p1)
    END PUTStatusBar;

    PROCEDURE (this: _Application) TemplatesPath* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 381)
    END TemplatesPath;

    PROCEDURE (this: _Application) ShowToolTips* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 387)
    END ShowToolTips;

    PROCEDURE (this: _Application) PUTShowToolTips* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 387, p1)
    END PUTShowToolTips;

    PROCEDURE (this: _Application) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: _Application) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: _Application) DefaultSaveFormat* (): XlFileFormat, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1209)
    END DefaultSaveFormat;

    PROCEDURE (this: _Application) PUTDefaultSaveFormat* (p1: XlFileFormat), NEW;
    BEGIN
        CtlC.PutInt(this, 1209, p1)
    END PUTDefaultSaveFormat;

    PROCEDURE (this: _Application) TransitionMenuKey* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 310)
    END TransitionMenuKey;

    PROCEDURE (this: _Application) PUTTransitionMenuKey* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 310, p1)
    END PUTTransitionMenuKey;

    PROCEDURE (this: _Application) TransitionMenuKeyAction* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 311)
    END TransitionMenuKeyAction;

    PROCEDURE (this: _Application) PUTTransitionMenuKeyAction* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 311, p1)
    END PUTTransitionMenuKeyAction;

    PROCEDURE (this: _Application) TransitionNavigKeys* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 312)
    END TransitionNavigKeys;

    PROCEDURE (this: _Application) PUTTransitionNavigKeys* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 312, p1)
    END PUTTransitionNavigKeys;

    PROCEDURE (this: _Application) Undo* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 303, NIL);
    END Undo;

    PROCEDURE (this: _Application) UsableHeight* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 389)
    END UsableHeight;

    PROCEDURE (this: _Application) UsableWidth* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 390)
    END UsableWidth;

    PROCEDURE (this: _Application) UserControl* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1210)
    END UserControl;

    PROCEDURE (this: _Application) PUTUserControl* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1210, p1)
    END PUTUserControl;

    PROCEDURE (this: _Application) UserName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 391)
    END UserName;

    PROCEDURE (this: _Application) PUTUserName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 391, p1)
    END PUTUserName;

    PROCEDURE (this: _Application) Value* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 6)
    END Value;

    PROCEDURE (this: _Application) VBE* (): CtlVBIDE.VBE, NEW;
    BEGIN
        RETURN CtlVBIDE.ThisVBE(CtlC.GetAny(this, 1211))
    END VBE;

    PROCEDURE (this: _Application) Version* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 392)
    END Version;

    PROCEDURE (this: _Application) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: _Application) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: _Application) Volatile* ((* optional *) Volatile: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Volatile, arg[0]);
        CtlC.CallParMethod(this, 788, arg, NIL);
    END Volatile;

    PROCEDURE (this: _Application) Wait* (Time: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Time, arg[0]);
        CtlC.CallParMethod(this, 393, arg, NIL);
    END Wait;

    PROCEDURE (this: _Application) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: _Application) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: _Application) WindowsForPens* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 395)
    END WindowsForPens;

    PROCEDURE (this: _Application) WindowState* (): XlWindowState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 396)
    END WindowState;

    PROCEDURE (this: _Application) PUTWindowState* (p1: XlWindowState), NEW;
    BEGIN
        CtlC.PutInt(this, 396, p1)
    END PUTWindowState;

    PROCEDURE (this: _Application) UILanguage* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 2)
    END UILanguage;

    PROCEDURE (this: _Application) PUTUILanguage* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 2, p1)
    END PUTUILanguage;

    PROCEDURE (this: _Application) DefaultSheetDirection* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 229)
    END DefaultSheetDirection;

    PROCEDURE (this: _Application) PUTDefaultSheetDirection* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 229, p1)
    END PUTDefaultSheetDirection;

    PROCEDURE (this: _Application) CursorMovement* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 232)
    END CursorMovement;

    PROCEDURE (this: _Application) PUTCursorMovement* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 232, p1)
    END PUTCursorMovement;

    PROCEDURE (this: _Application) ControlCharacters* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 233)
    END ControlCharacters;

    PROCEDURE (this: _Application) PUTControlCharacters* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 233, p1)
    END PUTControlCharacters;

    PROCEDURE (this: _Application) _WSFunction* ((* optional *) Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 169, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _WSFunction;

    PROCEDURE (this: _Application) EnableEvents* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1212)
    END EnableEvents;

    PROCEDURE (this: _Application) PUTEnableEvents* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1212, p1)
    END PUTEnableEvents;

    PROCEDURE (this: _Application) DisplayInfoWindow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1213)
    END DisplayInfoWindow;

    PROCEDURE (this: _Application) PUTDisplayInfoWindow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1213, p1)
    END PUTDisplayInfoWindow;


    (* ---------- _Chart, dual, nonextensible ---------- *)

    PROCEDURE (this: _Chart) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: _Chart) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: _Chart) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: _Chart) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: _Chart) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: _Chart) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: _Chart) CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1373)
    END CodeName;

    PROCEDURE (this: _Chart) _CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147418112)
    END _CodeName;

    PROCEDURE (this: _Chart) PUT_CodeName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147418112, p1)
    END PUT_CodeName;

    PROCEDURE (this: _Chart) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: _Chart) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: _Chart) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: _Chart) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: _Chart) Next* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 502)
    END Next;

    PROCEDURE (this: _Chart) OnDoubleClick* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: _Chart) PUTOnDoubleClick* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 628, p1)
    END PUTOnDoubleClick;

    PROCEDURE (this: _Chart) OnSheetActivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: _Chart) PUTOnSheetActivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1031, p1)
    END PUTOnSheetActivate;

    PROCEDURE (this: _Chart) OnSheetDeactivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: _Chart) PUTOnSheetDeactivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1081, p1)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: _Chart) PageSetup* (): PageSetup, NEW;
    BEGIN
        RETURN ThisPageSetup(CtlC.GetAny(this, 998))
    END PageSetup;

    PROCEDURE (this: _Chart) Previous* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 503)
    END Previous;

    PROCEDURE (this: _Chart) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: _Chart) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: _Chart) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, NIL);
    END Protect;

    PROCEDURE (this: _Chart) ProtectContents* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 292)
    END ProtectContents;

    PROCEDURE (this: _Chart) ProtectDrawingObjects* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 293)
    END ProtectDrawingObjects;

    PROCEDURE (this: _Chart) ProtectionMode* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: _Chart) SaveAs* (Filename: ARRAY OF CHAR; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any; AddToMru: CtlT.Any; TextCodepage: CtlT.Any; TextVisualLayout: CtlT.Any), NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[8]);
        CtlC.AnyVar(FileFormat, arg[7]);
        CtlC.AnyVar(Password, arg[6]);
        CtlC.AnyVar(WriteResPassword, arg[5]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[4]);
        CtlC.AnyVar(CreateBackup, arg[3]);
        CtlC.AnyVar(AddToMru, arg[2]);
        CtlC.AnyVar(TextCodepage, arg[1]);
        CtlC.AnyVar(TextVisualLayout, arg[0]);
        CtlC.CallParMethod(this, 284, arg, NIL);
    END SaveAs;

    PROCEDURE (this: _Chart) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: _Chart) Unprotect* ((* optional *) Password: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, NIL);
    END Unprotect;

    PROCEDURE (this: _Chart) Visible* (): XlSheetVisibility, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 558)
    END Visible;

    PROCEDURE (this: _Chart) PUTVisible* (p1: XlSheetVisibility), NEW;
    BEGIN
        CtlC.PutInt(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: _Chart) Shapes* (): Shapes, NEW;
    BEGIN
        RETURN ThisShapes(CtlC.GetAny(this, 1377))
    END Shapes;

    PROCEDURE (this: _Chart) ApplyDataLabels* (Type: XlDataLabelsType; (* optional *) LegendKey: CtlT.Any; AutoText: CtlT.Any; HasLeaderLines: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[3]);
        CtlC.AnyVar(LegendKey, arg[2]);
        CtlC.AnyVar(AutoText, arg[1]);
        CtlC.AnyVar(HasLeaderLines, arg[0]);
        CtlC.CallParMethod(this, 151, arg, NIL);
    END ApplyDataLabels;

    PROCEDURE (this: _Chart) Arcs* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 760, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Arcs;

    PROCEDURE (this: _Chart) Area3DGroup* (): ChartGroup, NEW;
    BEGIN
        RETURN ThisChartGroup(CtlC.GetAny(this, 17))
    END Area3DGroup;

    PROCEDURE (this: _Chart) AreaGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 9, arg, ret);
        RETURN CtlC.VarObj(ret)
    END AreaGroups;

    PROCEDURE (this: _Chart) AutoFormat* (Gallery: INTEGER; (* optional *) Format: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Gallery, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 114, arg, NIL);
    END AutoFormat;

    PROCEDURE (this: _Chart) AutoScaling* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 107)
    END AutoScaling;

    PROCEDURE (this: _Chart) PUTAutoScaling* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 107, p1)
    END PUTAutoScaling;

    PROCEDURE (this: _Chart) Axes* (Type: CtlT.Any; AxisGroup: XlAxisGroup): CtlT.Object, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[1]);
        CtlC.IntVar(AxisGroup, arg[0]);
        CtlC.CallParMethod(this, 23, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Axes;

    PROCEDURE (this: _Chart) SetBackgroundPicture* (Filename: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 1188, arg, NIL);
    END SetBackgroundPicture;

    PROCEDURE (this: _Chart) Bar3DGroup* (): ChartGroup, NEW;
    BEGIN
        RETURN ThisChartGroup(CtlC.GetAny(this, 18))
    END Bar3DGroup;

    PROCEDURE (this: _Chart) BarGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 10, arg, ret);
        RETURN CtlC.VarObj(ret)
    END BarGroups;

    PROCEDURE (this: _Chart) Buttons* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 557, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Buttons;

    PROCEDURE (this: _Chart) ChartArea* (): ChartArea, NEW;
    BEGIN
        RETURN ThisChartArea(CtlC.GetAny(this, 80))
    END ChartArea;

    PROCEDURE (this: _Chart) ChartGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 8, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ChartGroups;

    PROCEDURE (this: _Chart) ChartObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1060, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ChartObjects;

    PROCEDURE (this: _Chart) ChartTitle* (): ChartTitle, NEW;
    BEGIN
        RETURN ThisChartTitle(CtlC.GetAny(this, 81))
    END ChartTitle;

    PROCEDURE (this: _Chart) ChartWizard* ((* optional *) Source: CtlT.Any; Gallery: CtlT.Any; Format: CtlT.Any; PlotBy: CtlT.Any; CategoryLabels: CtlT.Any; SeriesLabels: CtlT.Any; HasLegend: CtlT.Any; Title: CtlT.Any; CategoryTitle: CtlT.Any; ValueTitle: CtlT.Any; ExtraTitle: CtlT.Any), NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[10]);
        CtlC.AnyVar(Gallery, arg[9]);
        CtlC.AnyVar(Format, arg[8]);
        CtlC.AnyVar(PlotBy, arg[7]);
        CtlC.AnyVar(CategoryLabels, arg[6]);
        CtlC.AnyVar(SeriesLabels, arg[5]);
        CtlC.AnyVar(HasLegend, arg[4]);
        CtlC.AnyVar(Title, arg[3]);
        CtlC.AnyVar(CategoryTitle, arg[2]);
        CtlC.AnyVar(ValueTitle, arg[1]);
        CtlC.AnyVar(ExtraTitle, arg[0]);
        CtlC.CallParMethod(this, 196, arg, NIL);
    END ChartWizard;

    PROCEDURE (this: _Chart) CheckBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 824, arg, ret);
        RETURN CtlC.VarObj(ret)
    END CheckBoxes;

    PROCEDURE (this: _Chart) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: _Chart) Column3DGroup* (): ChartGroup, NEW;
    BEGIN
        RETURN ThisChartGroup(CtlC.GetAny(this, 19))
    END Column3DGroup;

    PROCEDURE (this: _Chart) ColumnGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 11, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ColumnGroups;

    PROCEDURE (this: _Chart) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat; Size: XlPictureAppearance), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[2]);
        CtlC.IntVar(Format, arg[1]);
        CtlC.IntVar(Size, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: _Chart) Corners* (): Corners, NEW;
    BEGIN
        RETURN ThisCorners(CtlC.GetAny(this, 79))
    END Corners;

    PROCEDURE (this: _Chart) CreatePublisher* (Edition: CtlT.Any; Appearance: XlPictureAppearance; Size: XlPictureAppearance; (* optional *) ContainsPICT: CtlT.Any; ContainsBIFF: CtlT.Any; ContainsRTF: CtlT.Any; ContainsVALU: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Edition, arg[6]);
        CtlC.IntVar(Appearance, arg[5]);
        CtlC.IntVar(Size, arg[4]);
        CtlC.AnyVar(ContainsPICT, arg[3]);
        CtlC.AnyVar(ContainsBIFF, arg[2]);
        CtlC.AnyVar(ContainsRTF, arg[1]);
        CtlC.AnyVar(ContainsVALU, arg[0]);
        CtlC.CallParMethod(this, 458, arg, NIL);
    END CreatePublisher;

    PROCEDURE (this: _Chart) DataTable* (): DataTable, NEW;
    BEGIN
        RETURN ThisDataTable(CtlC.GetAny(this, 1395))
    END DataTable;

    PROCEDURE (this: _Chart) DepthPercent* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 48)
    END DepthPercent;

    PROCEDURE (this: _Chart) PUTDepthPercent* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 48, p1)
    END PUTDepthPercent;

    PROCEDURE (this: _Chart) Deselect* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1120, NIL);
    END Deselect;

    PROCEDURE (this: _Chart) DisplayBlanksAs* (): XlDisplayBlanksAs, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 93)
    END DisplayBlanksAs;

    PROCEDURE (this: _Chart) PUTDisplayBlanksAs* (p1: XlDisplayBlanksAs), NEW;
    BEGIN
        CtlC.PutInt(this, 93, p1)
    END PUTDisplayBlanksAs;

    PROCEDURE (this: _Chart) DoughnutGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 14, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DoughnutGroups;

    PROCEDURE (this: _Chart) Drawings* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 772, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Drawings;

    PROCEDURE (this: _Chart) DrawingObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 88, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DrawingObjects;

    PROCEDURE (this: _Chart) DropDowns* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 836, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DropDowns;

    PROCEDURE (this: _Chart) Elevation* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 49)
    END Elevation;

    PROCEDURE (this: _Chart) PUTElevation* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 49, p1)
    END PUTElevation;

    PROCEDURE (this: _Chart) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: _Chart) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: _Chart) Floor* (): Floor, NEW;
    BEGIN
        RETURN ThisFloor(CtlC.GetAny(this, 83))
    END Floor;

    PROCEDURE (this: _Chart) GapDepth* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 50)
    END GapDepth;

    PROCEDURE (this: _Chart) PUTGapDepth* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 50, p1)
    END PUTGapDepth;

    PROCEDURE (this: _Chart) GroupBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 834, arg, ret);
        RETURN CtlC.VarObj(ret)
    END GroupBoxes;

    PROCEDURE (this: _Chart) GroupObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1113, arg, ret);
        RETURN CtlC.VarObj(ret)
    END GroupObjects;

    PROCEDURE (this: _Chart) HasAxis* ((* optional *) Index1: CtlT.Any; Index2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index1, arg[1]);
        CtlC.AnyVar(Index2, arg[0]);
        CtlC.CallGetMethod(this, 52, arg, ret);
        RETURN CtlC.VarAny(ret)
    END HasAxis;

    PROCEDURE (this: _Chart) PUTHasAxis* (Index1: CtlT.Any; (* optional *) Index2: CtlT.Any; p3: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index1, arg[2]);
        CtlC.AnyVar(Index2, arg[1]);
        CtlC.AnyVar(p3, arg[0]);
        CtlC.CallPutMethod(this, 52, arg, NIL);
    END PUTHasAxis;

    PROCEDURE (this: _Chart) HasDataTable* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1396)
    END HasDataTable;

    PROCEDURE (this: _Chart) PUTHasDataTable* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1396, p1)
    END PUTHasDataTable;

    PROCEDURE (this: _Chart) HasLegend* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 53)
    END HasLegend;

    PROCEDURE (this: _Chart) PUTHasLegend* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 53, p1)
    END PUTHasLegend;

    PROCEDURE (this: _Chart) HasTitle* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 54)
    END HasTitle;

    PROCEDURE (this: _Chart) PUTHasTitle* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 54, p1)
    END PUTHasTitle;

    PROCEDURE (this: _Chart) HeightPercent* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 55)
    END HeightPercent;

    PROCEDURE (this: _Chart) PUTHeightPercent* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 55, p1)
    END PUTHeightPercent;

    PROCEDURE (this: _Chart) Hyperlinks* (): Hyperlinks, NEW;
    BEGIN
        RETURN ThisHyperlinks(CtlC.GetAny(this, 1393))
    END Hyperlinks;

    PROCEDURE (this: _Chart) Labels* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 841, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Labels;

    PROCEDURE (this: _Chart) Legend* (): Legend, NEW;
    BEGIN
        RETURN ThisLegend(CtlC.GetAny(this, 84))
    END Legend;

    PROCEDURE (this: _Chart) Line3DGroup* (): ChartGroup, NEW;
    BEGIN
        RETURN ThisChartGroup(CtlC.GetAny(this, 20))
    END Line3DGroup;

    PROCEDURE (this: _Chart) LineGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 12, arg, ret);
        RETURN CtlC.VarObj(ret)
    END LineGroups;

    PROCEDURE (this: _Chart) Lines* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 767, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Lines;

    PROCEDURE (this: _Chart) ListBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 832, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ListBoxes;

    PROCEDURE (this: _Chart) Location* (Where: XlChartLocation; (* optional *) Name: CtlT.Any): Chart, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Where, arg[1]);
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1397, arg, ret);
        RETURN This_Chart(CtlC.VarAny(ret))
    END Location;

    PROCEDURE (this: _Chart) OLEObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 799, arg, ret);
        RETURN CtlC.VarObj(ret)
    END OLEObjects;

    PROCEDURE (this: _Chart) OptionButtons* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 826, arg, ret);
        RETURN CtlC.VarObj(ret)
    END OptionButtons;

    PROCEDURE (this: _Chart) Ovals* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 801, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Ovals;

    PROCEDURE (this: _Chart) Paste* ((* optional *) Type: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 211, arg, NIL);
    END Paste;

    PROCEDURE (this: _Chart) Perspective* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 57)
    END Perspective;

    PROCEDURE (this: _Chart) PUTPerspective* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 57, p1)
    END PUTPerspective;

    PROCEDURE (this: _Chart) Pictures* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 771, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Pictures;

    PROCEDURE (this: _Chart) Pie3DGroup* (): ChartGroup, NEW;
    BEGIN
        RETURN ThisChartGroup(CtlC.GetAny(this, 21))
    END Pie3DGroup;

    PROCEDURE (this: _Chart) PieGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 13, arg, ret);
        RETURN CtlC.VarObj(ret)
    END PieGroups;

    PROCEDURE (this: _Chart) PlotArea* (): PlotArea, NEW;
    BEGIN
        RETURN ThisPlotArea(CtlC.GetAny(this, 85))
    END PlotArea;

    PROCEDURE (this: _Chart) PlotVisibleOnly* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 92)
    END PlotVisibleOnly;

    PROCEDURE (this: _Chart) PUTPlotVisibleOnly* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 92, p1)
    END PUTPlotVisibleOnly;

    PROCEDURE (this: _Chart) RadarGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 15, arg, ret);
        RETURN CtlC.VarObj(ret)
    END RadarGroups;

    PROCEDURE (this: _Chart) Rectangles* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 774, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Rectangles;

    PROCEDURE (this: _Chart) RightAngleAxes* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 58)
    END RightAngleAxes;

    PROCEDURE (this: _Chart) PUTRightAngleAxes* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 58, p1)
    END PUTRightAngleAxes;

    PROCEDURE (this: _Chart) Rotation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 59)
    END Rotation;

    PROCEDURE (this: _Chart) PUTRotation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 59, p1)
    END PUTRotation;

    PROCEDURE (this: _Chart) ScrollBars* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 830, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ScrollBars;

    PROCEDURE (this: _Chart) SeriesCollection* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 68, arg, ret);
        RETURN CtlC.VarObj(ret)
    END SeriesCollection;

    PROCEDURE (this: _Chart) SizeWithWindow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 94)
    END SizeWithWindow;

    PROCEDURE (this: _Chart) PUTSizeWithWindow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 94, p1)
    END PUTSizeWithWindow;

    PROCEDURE (this: _Chart) ShowWindow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1399)
    END ShowWindow;

    PROCEDURE (this: _Chart) PUTShowWindow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1399, p1)
    END PUTShowWindow;

    PROCEDURE (this: _Chart) Spinners* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 838, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Spinners;

    PROCEDURE (this: _Chart) SubType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 109)
    END SubType;

    PROCEDURE (this: _Chart) PUTSubType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 109, p1)
    END PUTSubType;

    PROCEDURE (this: _Chart) SurfaceGroup* (): ChartGroup, NEW;
    BEGIN
        RETURN ThisChartGroup(CtlC.GetAny(this, 22))
    END SurfaceGroup;

    PROCEDURE (this: _Chart) TextBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 777, arg, ret);
        RETURN CtlC.VarObj(ret)
    END TextBoxes;

    PROCEDURE (this: _Chart) Type* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: _Chart) PUTType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;

    PROCEDURE (this: _Chart) ChartType* (): XlChartType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1400)
    END ChartType;

    PROCEDURE (this: _Chart) PUTChartType* (p1: XlChartType), NEW;
    BEGIN
        CtlC.PutInt(this, 1400, p1)
    END PUTChartType;

    PROCEDURE (this: _Chart) ApplyCustomType* (ChartType: XlChartType; (* optional *) TypeName: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(ChartType, arg[1]);
        CtlC.AnyVar(TypeName, arg[0]);
        CtlC.CallParMethod(this, 1401, arg, NIL);
    END ApplyCustomType;

    PROCEDURE (this: _Chart) Walls* (): Walls, NEW;
    BEGIN
        RETURN ThisWalls(CtlC.GetAny(this, 86))
    END Walls;

    PROCEDURE (this: _Chart) WallsAndGridlines2D* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 210)
    END WallsAndGridlines2D;

    PROCEDURE (this: _Chart) PUTWallsAndGridlines2D* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 210, p1)
    END PUTWallsAndGridlines2D;

    PROCEDURE (this: _Chart) XYGroups* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 16, arg, ret);
        RETURN CtlC.VarObj(ret)
    END XYGroups;

    PROCEDURE (this: _Chart) BarShape* (): XlBarShape, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1403)
    END BarShape;

    PROCEDURE (this: _Chart) PUTBarShape* (p1: XlBarShape), NEW;
    BEGIN
        CtlC.PutInt(this, 1403, p1)
    END PUTBarShape;

    PROCEDURE (this: _Chart) PlotBy* (): XlRowCol, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 202)
    END PlotBy;

    PROCEDURE (this: _Chart) PUTPlotBy* (p1: XlRowCol), NEW;
    BEGIN
        CtlC.PutInt(this, 202, p1)
    END PUTPlotBy;

    PROCEDURE (this: _Chart) CopyChartBuild* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1404, NIL);
    END CopyChartBuild;

    PROCEDURE (this: _Chart) ProtectFormatting* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1405)
    END ProtectFormatting;

    PROCEDURE (this: _Chart) PUTProtectFormatting* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1405, p1)
    END PUTProtectFormatting;

    PROCEDURE (this: _Chart) ProtectData* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1406)
    END ProtectData;

    PROCEDURE (this: _Chart) PUTProtectData* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1406, p1)
    END PUTProtectData;

    PROCEDURE (this: _Chart) ProtectGoalSeek* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1407)
    END ProtectGoalSeek;

    PROCEDURE (this: _Chart) PUTProtectGoalSeek* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1407, p1)
    END PUTProtectGoalSeek;

    PROCEDURE (this: _Chart) ProtectSelection* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1408)
    END ProtectSelection;

    PROCEDURE (this: _Chart) PUTProtectSelection* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1408, p1)
    END PUTProtectSelection;

    PROCEDURE (this: _Chart) GetChartElement* (X: INTEGER; Y: INTEGER; VAR ElementID: INTEGER; VAR Arg1: INTEGER; VAR Arg2: INTEGER), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(X, arg[4]);
        CtlC.IntVar(Y, arg[3]);
        CtlC.RefIntVar(ElementID, arg[2]);
        CtlC.RefIntVar(Arg1, arg[1]);
        CtlC.RefIntVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 1409, arg, NIL);
    END GetChartElement;

    PROCEDURE (this: _Chart) SetSourceData* (Source: Range; (* optional *) PlotBy: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Source, arg[1]);
        CtlC.AnyVar(PlotBy, arg[0]);
        CtlC.CallParMethod(this, 1413, arg, NIL);
    END SetSourceData;

    PROCEDURE (this: _Chart) Export* (Filename: ARRAY OF CHAR; (* optional *) FilterName: CtlT.Any; Interactive: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[2]);
        CtlC.AnyVar(FilterName, arg[1]);
        CtlC.AnyVar(Interactive, arg[0]);
        CtlC.CallParMethod(this, 1414, arg, ret);
        RETURN CtlC.VarBool(ret)
    END Export;

    PROCEDURE (this: _Chart) Refresh* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1417, NIL);
    END Refresh;


    (* ---------- Sheets, dual, nonextensible ---------- *)

    PROCEDURE (this: Sheets) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Sheets) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Sheets) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Sheets) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any; Type: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[3]);
        CtlC.AnyVar(After, arg[2]);
        CtlC.AnyVar(Count, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Add;

    PROCEDURE (this: Sheets) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: Sheets) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Sheets) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Sheets) FillAcrossSheets* (range: Range; Type: XlFillWith), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(range, arg[1]);
        CtlC.IntVar(Type, arg[0]);
        CtlC.CallParMethod(this, 469, arg, NIL);
    END FillAcrossSheets;

    PROCEDURE (this: Sheets) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Sheets) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: Sheets) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Sheets) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: Sheets) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: Sheets) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Sheets) HPageBreaks* (): HPageBreaks, NEW;
    BEGIN
        RETURN ThisHPageBreaks(CtlC.GetAny(this, 1418))
    END HPageBreaks;

    PROCEDURE (this: Sheets) VPageBreaks* (): VPageBreaks, NEW;
    BEGIN
        RETURN ThisVPageBreaks(CtlC.GetAny(this, 1419))
    END VPageBreaks;

    PROCEDURE (this: Sheets) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Sheets) PUTVisible* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Sheets) _Default* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarObj(ret)
    END _Default;


    (* ---------- _Worksheet, dual, nonextensible ---------- *)

    PROCEDURE (this: _Worksheet) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: _Worksheet) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: _Worksheet) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: _Worksheet) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: _Worksheet) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: _Worksheet) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: _Worksheet) CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1373)
    END CodeName;

    PROCEDURE (this: _Worksheet) _CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147418112)
    END _CodeName;

    PROCEDURE (this: _Worksheet) PUT_CodeName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147418112, p1)
    END PUT_CodeName;

    PROCEDURE (this: _Worksheet) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: _Worksheet) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: _Worksheet) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: _Worksheet) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: _Worksheet) Next* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 502)
    END Next;

    PROCEDURE (this: _Worksheet) OnDoubleClick* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: _Worksheet) PUTOnDoubleClick* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 628, p1)
    END PUTOnDoubleClick;

    PROCEDURE (this: _Worksheet) OnSheetActivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: _Worksheet) PUTOnSheetActivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1031, p1)
    END PUTOnSheetActivate;

    PROCEDURE (this: _Worksheet) OnSheetDeactivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: _Worksheet) PUTOnSheetDeactivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1081, p1)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: _Worksheet) PageSetup* (): PageSetup, NEW;
    BEGIN
        RETURN ThisPageSetup(CtlC.GetAny(this, 998))
    END PageSetup;

    PROCEDURE (this: _Worksheet) Previous* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 503)
    END Previous;

    PROCEDURE (this: _Worksheet) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: _Worksheet) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: _Worksheet) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, NIL);
    END Protect;

    PROCEDURE (this: _Worksheet) ProtectContents* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 292)
    END ProtectContents;

    PROCEDURE (this: _Worksheet) ProtectDrawingObjects* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 293)
    END ProtectDrawingObjects;

    PROCEDURE (this: _Worksheet) ProtectionMode* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: _Worksheet) ProtectScenarios* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 294)
    END ProtectScenarios;

    PROCEDURE (this: _Worksheet) SaveAs* (Filename: ARRAY OF CHAR; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any; AddToMru: CtlT.Any; TextCodepage: CtlT.Any; TextVisualLayout: CtlT.Any), NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[8]);
        CtlC.AnyVar(FileFormat, arg[7]);
        CtlC.AnyVar(Password, arg[6]);
        CtlC.AnyVar(WriteResPassword, arg[5]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[4]);
        CtlC.AnyVar(CreateBackup, arg[3]);
        CtlC.AnyVar(AddToMru, arg[2]);
        CtlC.AnyVar(TextCodepage, arg[1]);
        CtlC.AnyVar(TextVisualLayout, arg[0]);
        CtlC.CallParMethod(this, 284, arg, NIL);
    END SaveAs;

    PROCEDURE (this: _Worksheet) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: _Worksheet) Unprotect* ((* optional *) Password: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, NIL);
    END Unprotect;

    PROCEDURE (this: _Worksheet) Visible* (): XlSheetVisibility, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 558)
    END Visible;

    PROCEDURE (this: _Worksheet) PUTVisible* (p1: XlSheetVisibility), NEW;
    BEGIN
        CtlC.PutInt(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: _Worksheet) Shapes* (): Shapes, NEW;
    BEGIN
        RETURN ThisShapes(CtlC.GetAny(this, 1377))
    END Shapes;

    PROCEDURE (this: _Worksheet) TransitionExpEval* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 401)
    END TransitionExpEval;

    PROCEDURE (this: _Worksheet) PUTTransitionExpEval* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 401, p1)
    END PUTTransitionExpEval;

    PROCEDURE (this: _Worksheet) Arcs* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 760, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Arcs;

    PROCEDURE (this: _Worksheet) AutoFilterMode* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 792)
    END AutoFilterMode;

    PROCEDURE (this: _Worksheet) PUTAutoFilterMode* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 792, p1)
    END PUTAutoFilterMode;

    PROCEDURE (this: _Worksheet) SetBackgroundPicture* (Filename: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 1188, arg, NIL);
    END SetBackgroundPicture;

    PROCEDURE (this: _Worksheet) Buttons* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 557, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Buttons;

    PROCEDURE (this: _Worksheet) Calculate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 279, NIL);
    END Calculate;

    PROCEDURE (this: _Worksheet) EnableCalculation* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1424)
    END EnableCalculation;

    PROCEDURE (this: _Worksheet) PUTEnableCalculation* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1424, p1)
    END PUTEnableCalculation;

    PROCEDURE (this: _Worksheet) Cells* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 238))
    END Cells;

    PROCEDURE (this: _Worksheet) ChartObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1060, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ChartObjects;

    PROCEDURE (this: _Worksheet) CheckBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 824, arg, ret);
        RETURN CtlC.VarObj(ret)
    END CheckBoxes;

    PROCEDURE (this: _Worksheet) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: _Worksheet) CircularReference* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1069))
    END CircularReference;

    PROCEDURE (this: _Worksheet) ClearArrows* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 970, NIL);
    END ClearArrows;

    PROCEDURE (this: _Worksheet) Columns* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 241))
    END Columns;

    PROCEDURE (this: _Worksheet) ConsolidationFunction* (): XlConsolidationFunction, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 789)
    END ConsolidationFunction;

    PROCEDURE (this: _Worksheet) ConsolidationOptions* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 790)
    END ConsolidationOptions;

    PROCEDURE (this: _Worksheet) ConsolidationSources* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 791)
    END ConsolidationSources;

    PROCEDURE (this: _Worksheet) DisplayAutomaticPageBreaks* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 643)
    END DisplayAutomaticPageBreaks;

    PROCEDURE (this: _Worksheet) PUTDisplayAutomaticPageBreaks* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 643, p1)
    END PUTDisplayAutomaticPageBreaks;

    PROCEDURE (this: _Worksheet) Drawings* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 772, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Drawings;

    PROCEDURE (this: _Worksheet) DrawingObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 88, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DrawingObjects;

    PROCEDURE (this: _Worksheet) DropDowns* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 836, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DropDowns;

    PROCEDURE (this: _Worksheet) EnableAutoFilter* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1156)
    END EnableAutoFilter;

    PROCEDURE (this: _Worksheet) PUTEnableAutoFilter* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1156, p1)
    END PUTEnableAutoFilter;

    PROCEDURE (this: _Worksheet) EnableSelection* (): XlEnableSelection, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1425)
    END EnableSelection;

    PROCEDURE (this: _Worksheet) PUTEnableSelection* (p1: XlEnableSelection), NEW;
    BEGIN
        CtlC.PutInt(this, 1425, p1)
    END PUTEnableSelection;

    PROCEDURE (this: _Worksheet) EnableOutlining* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1157)
    END EnableOutlining;

    PROCEDURE (this: _Worksheet) PUTEnableOutlining* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1157, p1)
    END PUTEnableOutlining;

    PROCEDURE (this: _Worksheet) EnablePivotTable* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1158)
    END EnablePivotTable;

    PROCEDURE (this: _Worksheet) PUTEnablePivotTable* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1158, p1)
    END PUTEnablePivotTable;

    PROCEDURE (this: _Worksheet) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: _Worksheet) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: _Worksheet) FilterMode* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 800)
    END FilterMode;

    PROCEDURE (this: _Worksheet) ResetAllPageBreaks* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1426, NIL);
    END ResetAllPageBreaks;

    PROCEDURE (this: _Worksheet) GroupBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 834, arg, ret);
        RETURN CtlC.VarObj(ret)
    END GroupBoxes;

    PROCEDURE (this: _Worksheet) GroupObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1113, arg, ret);
        RETURN CtlC.VarObj(ret)
    END GroupObjects;

    PROCEDURE (this: _Worksheet) Labels* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 841, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Labels;

    PROCEDURE (this: _Worksheet) Lines* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 767, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Lines;

    PROCEDURE (this: _Worksheet) ListBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 832, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ListBoxes;

    PROCEDURE (this: _Worksheet) Names* (): Names, NEW;
    BEGIN
        RETURN ThisNames(CtlC.GetAny(this, 442))
    END Names;

    PROCEDURE (this: _Worksheet) OLEObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 799, arg, ret);
        RETURN CtlC.VarObj(ret)
    END OLEObjects;

    PROCEDURE (this: _Worksheet) OnCalculate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 625)
    END OnCalculate;

    PROCEDURE (this: _Worksheet) PUTOnCalculate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 625, p1)
    END PUTOnCalculate;

    PROCEDURE (this: _Worksheet) OnData* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 629)
    END OnData;

    PROCEDURE (this: _Worksheet) PUTOnData* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 629, p1)
    END PUTOnData;

    PROCEDURE (this: _Worksheet) OnEntry* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 627)
    END OnEntry;

    PROCEDURE (this: _Worksheet) PUTOnEntry* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 627, p1)
    END PUTOnEntry;

    PROCEDURE (this: _Worksheet) OptionButtons* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 826, arg, ret);
        RETURN CtlC.VarObj(ret)
    END OptionButtons;

    PROCEDURE (this: _Worksheet) Outline* (): Outline, NEW;
    BEGIN
        RETURN ThisOutline(CtlC.GetAny(this, 102))
    END Outline;

    PROCEDURE (this: _Worksheet) Ovals* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 801, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Ovals;

    PROCEDURE (this: _Worksheet) Paste* ((* optional *) Destination: CtlT.Any; Link: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[1]);
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 211, arg, NIL);
    END Paste;

    PROCEDURE (this: _Worksheet) PasteSpecial* ((* optional *) Format: CtlT.Any; Link: CtlT.Any; DisplayAsIcon: CtlT.Any; IconFileName: CtlT.Any; IconIndex: CtlT.Any; IconLabel: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Format, arg[5]);
        CtlC.AnyVar(Link, arg[4]);
        CtlC.AnyVar(DisplayAsIcon, arg[3]);
        CtlC.AnyVar(IconFileName, arg[2]);
        CtlC.AnyVar(IconIndex, arg[1]);
        CtlC.AnyVar(IconLabel, arg[0]);
        CtlC.CallParMethod(this, 1027, arg, NIL);
    END PasteSpecial;

    PROCEDURE (this: _Worksheet) Pictures* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 771, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Pictures;

    PROCEDURE (this: _Worksheet) PivotTables* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 690, arg, ret);
        RETURN CtlC.VarObj(ret)
    END PivotTables;

    PROCEDURE (this: _Worksheet) PivotTableWizard* ((* optional *) SourceType: CtlT.Any; SourceData: CtlT.Any; TableDestination: CtlT.Any; TableName: CtlT.Any; RowGrand: CtlT.Any; ColumnGrand: CtlT.Any; SaveData: CtlT.Any; HasAutoFormat: CtlT.Any; AutoPage: CtlT.Any; Reserved: CtlT.Any; BackgroundQuery: CtlT.Any; OptimizeCache: CtlT.Any; PageFieldOrder: CtlT.Any; PageFieldWrapCount: CtlT.Any; ReadData: CtlT.Any; Connection: CtlT.Any): PivotTable, NEW;
        VAR arg: ARRAY 16 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SourceType, arg[15]);
        CtlC.AnyVar(SourceData, arg[14]);
        CtlC.AnyVar(TableDestination, arg[13]);
        CtlC.AnyVar(TableName, arg[12]);
        CtlC.AnyVar(RowGrand, arg[11]);
        CtlC.AnyVar(ColumnGrand, arg[10]);
        CtlC.AnyVar(SaveData, arg[9]);
        CtlC.AnyVar(HasAutoFormat, arg[8]);
        CtlC.AnyVar(AutoPage, arg[7]);
        CtlC.AnyVar(Reserved, arg[6]);
        CtlC.AnyVar(BackgroundQuery, arg[5]);
        CtlC.AnyVar(OptimizeCache, arg[4]);
        CtlC.AnyVar(PageFieldOrder, arg[3]);
        CtlC.AnyVar(PageFieldWrapCount, arg[2]);
        CtlC.AnyVar(ReadData, arg[1]);
        CtlC.AnyVar(Connection, arg[0]);
        CtlC.CallParMethod(this, 684, arg, ret);
        RETURN ThisPivotTable(CtlC.VarAny(ret))
    END PivotTableWizard;

    PROCEDURE (this: _Worksheet) Range* (Cell1: CtlT.Any; (* optional *) Cell2: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallGetMethod(this, 197, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Range;

    PROCEDURE (this: _Worksheet) Rectangles* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 774, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Rectangles;

    PROCEDURE (this: _Worksheet) Rows* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 258))
    END Rows;

    PROCEDURE (this: _Worksheet) Scenarios* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 908, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Scenarios;

    PROCEDURE (this: _Worksheet) ScrollArea* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1433)
    END ScrollArea;

    PROCEDURE (this: _Worksheet) PUTScrollArea* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1433, p1)
    END PUTScrollArea;

    PROCEDURE (this: _Worksheet) ScrollBars* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 830, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ScrollBars;

    PROCEDURE (this: _Worksheet) ShowAllData* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 794, NIL);
    END ShowAllData;

    PROCEDURE (this: _Worksheet) ShowDataForm* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 409, NIL);
    END ShowDataForm;

    PROCEDURE (this: _Worksheet) Spinners* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 838, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Spinners;

    PROCEDURE (this: _Worksheet) StandardHeight* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 407)
    END StandardHeight;

    PROCEDURE (this: _Worksheet) StandardWidth* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 408)
    END StandardWidth;

    PROCEDURE (this: _Worksheet) PUTStandardWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 408, p1)
    END PUTStandardWidth;

    PROCEDURE (this: _Worksheet) TextBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 777, arg, ret);
        RETURN CtlC.VarObj(ret)
    END TextBoxes;

    PROCEDURE (this: _Worksheet) TransitionFormEntry* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 402)
    END TransitionFormEntry;

    PROCEDURE (this: _Worksheet) PUTTransitionFormEntry* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 402, p1)
    END PUTTransitionFormEntry;

    PROCEDURE (this: _Worksheet) Type* (): XlSheetType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: _Worksheet) UsedRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 412))
    END UsedRange;

    PROCEDURE (this: _Worksheet) HPageBreaks* (): HPageBreaks, NEW;
    BEGIN
        RETURN ThisHPageBreaks(CtlC.GetAny(this, 1418))
    END HPageBreaks;

    PROCEDURE (this: _Worksheet) VPageBreaks* (): VPageBreaks, NEW;
    BEGIN
        RETURN ThisVPageBreaks(CtlC.GetAny(this, 1419))
    END VPageBreaks;

    PROCEDURE (this: _Worksheet) QueryTables* (): QueryTables, NEW;
    BEGIN
        RETURN ThisQueryTables(CtlC.GetAny(this, 1434))
    END QueryTables;

    PROCEDURE (this: _Worksheet) DisplayPageBreaks* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1435)
    END DisplayPageBreaks;

    PROCEDURE (this: _Worksheet) PUTDisplayPageBreaks* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1435, p1)
    END PUTDisplayPageBreaks;

    PROCEDURE (this: _Worksheet) Comments* (): Comments, NEW;
    BEGIN
        RETURN ThisComments(CtlC.GetAny(this, 575))
    END Comments;

    PROCEDURE (this: _Worksheet) Hyperlinks* (): Hyperlinks, NEW;
    BEGIN
        RETURN ThisHyperlinks(CtlC.GetAny(this, 1393))
    END Hyperlinks;

    PROCEDURE (this: _Worksheet) ClearCircles* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1436, NIL);
    END ClearCircles;

    PROCEDURE (this: _Worksheet) CircleInvalid* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1437, NIL);
    END CircleInvalid;

    PROCEDURE (this: _Worksheet) DisplayRightToLeft* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 648)
    END DisplayRightToLeft;

    PROCEDURE (this: _Worksheet) PUTDisplayRightToLeft* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 648, p1)
    END PUTDisplayRightToLeft;

    PROCEDURE (this: _Worksheet) AutoFilter* (): AutoFilter, NEW;
    BEGIN
        RETURN ThisAutoFilter(CtlC.GetAny(this, 793))
    END AutoFilter;


    (* ---------- _Global, hidden, dual, nonextensible ---------- *)

    PROCEDURE (this: _Global) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: _Global) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: _Global) Parent* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: _Global) ActiveCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 305))
    END ActiveCell;

    PROCEDURE (this: _Global) ActiveChart* (): Chart, NEW;
    BEGIN
        RETURN This_Chart(CtlC.GetAny(this, 183))
    END ActiveChart;

    PROCEDURE (this: _Global) ActiveDialog* (): DialogSheet, NEW;
    BEGIN
        RETURN ThisDialogSheet(CtlC.GetAny(this, 815))
    END ActiveDialog;

    PROCEDURE (this: _Global) ActiveMenuBar* (): MenuBar, NEW;
    BEGIN
        RETURN ThisMenuBar(CtlC.GetAny(this, 758))
    END ActiveMenuBar;

    PROCEDURE (this: _Global) ActivePrinter* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 306)
    END ActivePrinter;

    PROCEDURE (this: _Global) PUTActivePrinter* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 306, p1)
    END PUTActivePrinter;

    PROCEDURE (this: _Global) ActiveSheet* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 307)
    END ActiveSheet;

    PROCEDURE (this: _Global) ActiveWindow* (): Window, NEW;
    BEGIN
        RETURN ThisWindow(CtlC.GetAny(this, 759))
    END ActiveWindow;

    PROCEDURE (this: _Global) ActiveWorkbook* (): Workbook, NEW;
    BEGIN
        RETURN This_Workbook(CtlC.GetAny(this, 308))
    END ActiveWorkbook;

    PROCEDURE (this: _Global) AddIns* (): AddIns, NEW;
    BEGIN
        RETURN ThisAddIns(CtlC.GetAny(this, 549))
    END AddIns;

    PROCEDURE (this: _Global) Assistant* (): CtlOffice.Assistant, NEW;
    BEGIN
        RETURN CtlOffice.ThisAssistant(CtlC.GetAny(this, 1438))
    END Assistant;

    PROCEDURE (this: _Global) Calculate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 279, NIL);
    END Calculate;

    PROCEDURE (this: _Global) Cells* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 238))
    END Cells;

    PROCEDURE (this: _Global) Charts* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 121))
    END Charts;

    PROCEDURE (this: _Global) Columns* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 241))
    END Columns;

    PROCEDURE (this: _Global) CommandBars* (): CtlOffice.CommandBars, NEW;
    BEGIN
        RETURN CtlOffice.ThisCommandBars(CtlC.GetAny(this, 1439))
    END CommandBars;

    PROCEDURE (this: _Global) DDEAppReturnCode* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 332)
    END DDEAppReturnCode;

    PROCEDURE (this: _Global) DDEExecute* (Channel: INTEGER; String: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[1]);
        CtlC.StrVar(String, arg[0]);
        CtlC.CallParMethod(this, 333, arg, NIL);
    END DDEExecute;

    PROCEDURE (this: _Global) DDEInitiate* (App: ARRAY OF CHAR; Topic: ARRAY OF CHAR): INTEGER, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(App, arg[1]);
        CtlC.StrVar(Topic, arg[0]);
        CtlC.CallParMethod(this, 334, arg, ret);
        RETURN CtlC.VarInt(ret)
    END DDEInitiate;

    PROCEDURE (this: _Global) DDEPoke* (Channel: INTEGER; Item: CtlT.Any; Data: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[2]);
        CtlC.AnyVar(Item, arg[1]);
        CtlC.AnyVar(Data, arg[0]);
        CtlC.CallParMethod(this, 335, arg, NIL);
    END DDEPoke;

    PROCEDURE (this: _Global) DDERequest* (Channel: INTEGER; Item: ARRAY OF CHAR): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[1]);
        CtlC.StrVar(Item, arg[0]);
        CtlC.CallParMethod(this, 336, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDERequest;

    PROCEDURE (this: _Global) DDETerminate* (Channel: INTEGER), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Channel, arg[0]);
        CtlC.CallParMethod(this, 337, arg, NIL);
    END DDETerminate;

    PROCEDURE (this: _Global) DialogSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 764))
    END DialogSheets;

    PROCEDURE (this: _Global) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: _Global) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: _Global) ExecuteExcel4Macro* (String: ARRAY OF CHAR): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(String, arg[0]);
        CtlC.CallParMethod(this, 350, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ExecuteExcel4Macro;

    PROCEDURE (this: _Global) Intersect* (Arg1: Range; Arg2: Range; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[29]);
        CtlC.ObjVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 766, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Intersect;

    PROCEDURE (this: _Global) MenuBars* (): MenuBars, NEW;
    BEGIN
        RETURN ThisMenuBars(CtlC.GetAny(this, 589))
    END MenuBars;

    PROCEDURE (this: _Global) Modules* (): Modules, NEW;
    BEGIN
        RETURN ThisModules(CtlC.GetAny(this, 582))
    END Modules;

    PROCEDURE (this: _Global) Names* (): Names, NEW;
    BEGIN
        RETURN ThisNames(CtlC.GetAny(this, 442))
    END Names;

    PROCEDURE (this: _Global) Range* (Cell1: CtlT.Any; (* optional *) Cell2: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallGetMethod(this, 197, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Range;

    PROCEDURE (this: _Global) Rows* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 258))
    END Rows;

    PROCEDURE (this: _Global) Run* ((* optional *) Macro: CtlT.Any; Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 31 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[30]);
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 259, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Run;

    PROCEDURE (this: _Global) _Run2* ((* optional *) Macro: CtlT.Any; Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 31 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[30]);
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 806, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Run2;

    PROCEDURE (this: _Global) Selection* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 147)
    END Selection;

    PROCEDURE (this: _Global) SendKeys* (Keys: CtlT.Any; (* optional *) Wait: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Keys, arg[1]);
        CtlC.AnyVar(Wait, arg[0]);
        CtlC.CallParMethod(this, 383, arg, NIL);
    END SendKeys;

    PROCEDURE (this: _Global) Sheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 485))
    END Sheets;

    PROCEDURE (this: _Global) ShortcutMenus* (Index: INTEGER): Menu, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 776, arg, ret);
        RETURN ThisMenu(CtlC.VarAny(ret))
    END ShortcutMenus;

    PROCEDURE (this: _Global) ThisWorkbook* (): Workbook, NEW;
    BEGIN
        RETURN This_Workbook(CtlC.GetAny(this, 778))
    END ThisWorkbook;

    PROCEDURE (this: _Global) Toolbars* (): Toolbars, NEW;
    BEGIN
        RETURN ThisToolbars(CtlC.GetAny(this, 552))
    END Toolbars;

    PROCEDURE (this: _Global) Union* (Arg1: Range; Arg2: Range; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[29]);
        CtlC.ObjVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 779, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Union;

    PROCEDURE (this: _Global) Windows* (): Windows, NEW;
    BEGIN
        RETURN ThisWindows(CtlC.GetAny(this, 430))
    END Windows;

    PROCEDURE (this: _Global) Workbooks* (): Workbooks, NEW;
    BEGIN
        RETURN ThisWorkbooks(CtlC.GetAny(this, 572))
    END Workbooks;

    PROCEDURE (this: _Global) WorksheetFunction* (): WorksheetFunction, NEW;
    BEGIN
        RETURN ThisWorksheetFunction(CtlC.GetAny(this, 1440))
    END WorksheetFunction;

    PROCEDURE (this: _Global) Worksheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 494))
    END Worksheets;

    PROCEDURE (this: _Global) Excel4IntlMacroSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 581))
    END Excel4IntlMacroSheets;

    PROCEDURE (this: _Global) Excel4MacroSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 579))
    END Excel4MacroSheets;


    (* ---------- _Workbook, dual ---------- *)

    PROCEDURE (this: _Workbook) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: _Workbook) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: _Workbook) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: _Workbook) AcceptLabelsInFormulas* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1441)
    END AcceptLabelsInFormulas;

    PROCEDURE (this: _Workbook) PUTAcceptLabelsInFormulas* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1441, p1)
    END PUTAcceptLabelsInFormulas;

    PROCEDURE (this: _Workbook) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: _Workbook) ActiveChart* (): Chart, NEW;
    BEGIN
        RETURN This_Chart(CtlC.GetAny(this, 183))
    END ActiveChart;

    PROCEDURE (this: _Workbook) ActiveSheet* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 307)
    END ActiveSheet;

    PROCEDURE (this: _Workbook) Author* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 574)
    END Author;

    PROCEDURE (this: _Workbook) PUTAuthor* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 574, p1)
    END PUTAuthor;

    PROCEDURE (this: _Workbook) AutoUpdateFrequency* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1442)
    END AutoUpdateFrequency;

    PROCEDURE (this: _Workbook) PUTAutoUpdateFrequency* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1442, p1)
    END PUTAutoUpdateFrequency;

    PROCEDURE (this: _Workbook) AutoUpdateSaveChanges* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1443)
    END AutoUpdateSaveChanges;

    PROCEDURE (this: _Workbook) PUTAutoUpdateSaveChanges* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1443, p1)
    END PUTAutoUpdateSaveChanges;

    PROCEDURE (this: _Workbook) ChangeHistoryDuration* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1444)
    END ChangeHistoryDuration;

    PROCEDURE (this: _Workbook) PUTChangeHistoryDuration* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1444, p1)
    END PUTChangeHistoryDuration;

    PROCEDURE (this: _Workbook) BuiltinDocumentProperties* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1176)
    END BuiltinDocumentProperties;

    PROCEDURE (this: _Workbook) ChangeFileAccess* (Mode: XlFileAccess; (* optional *) WritePassword: CtlT.Any; Notify: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Mode, arg[2]);
        CtlC.AnyVar(WritePassword, arg[1]);
        CtlC.AnyVar(Notify, arg[0]);
        CtlC.CallParMethod(this, 989, arg, NIL);
    END ChangeFileAccess;

    PROCEDURE (this: _Workbook) ChangeLink* (Name: ARRAY OF CHAR; NewName: ARRAY OF CHAR; Type: XlLinkType), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[2]);
        CtlC.StrVar(NewName, arg[1]);
        CtlC.IntVar(Type, arg[0]);
        CtlC.CallParMethod(this, 802, arg, NIL);
    END ChangeLink;

    PROCEDURE (this: _Workbook) Charts* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 121))
    END Charts;

    PROCEDURE (this: _Workbook) Close* ((* optional *) SaveChanges: CtlT.Any; Filename: CtlT.Any; RouteWorkbook: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SaveChanges, arg[2]);
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(RouteWorkbook, arg[0]);
        CtlC.CallParMethod(this, 277, arg, NIL);
    END Close;

    PROCEDURE (this: _Workbook) CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1373)
    END CodeName;

    PROCEDURE (this: _Workbook) _CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147418112)
    END _CodeName;

    PROCEDURE (this: _Workbook) PUT_CodeName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147418112, p1)
    END PUT_CodeName;

    PROCEDURE (this: _Workbook) Colors* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 286, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Colors;

    PROCEDURE (this: _Workbook) PUTColors* (Index: CtlT.Any; (* optional *) p2: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[1]);
        CtlC.AnyVar(p2, arg[0]);
        CtlC.CallPutMethod(this, 286, arg, NIL);
    END PUTColors;

    PROCEDURE (this: _Workbook) CommandBars* (): CtlOffice.CommandBars, NEW;
    BEGIN
        RETURN CtlOffice.ThisCommandBars(CtlC.GetAny(this, 1439))
    END CommandBars;

    PROCEDURE (this: _Workbook) Comments* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 575)
    END Comments;

    PROCEDURE (this: _Workbook) PUTComments* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 575, p1)
    END PUTComments;

    PROCEDURE (this: _Workbook) ConflictResolution* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1175)
    END ConflictResolution;

    PROCEDURE (this: _Workbook) PUTConflictResolution* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1175, p1)
    END PUTConflictResolution;

    PROCEDURE (this: _Workbook) Container* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1190)
    END Container;

    PROCEDURE (this: _Workbook) CreateBackup* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 287)
    END CreateBackup;

    PROCEDURE (this: _Workbook) CustomDocumentProperties* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1177)
    END CustomDocumentProperties;

    PROCEDURE (this: _Workbook) Date1904* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 403)
    END Date1904;

    PROCEDURE (this: _Workbook) PUTDate1904* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 403, p1)
    END PUTDate1904;

    PROCEDURE (this: _Workbook) DeleteNumberFormat* (NumberFormat: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(NumberFormat, arg[0]);
        CtlC.CallParMethod(this, 397, arg, NIL);
    END DeleteNumberFormat;

    PROCEDURE (this: _Workbook) DialogSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 764))
    END DialogSheets;

    PROCEDURE (this: _Workbook) DisplayDrawingObjects* (): XlDisplayShapes, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 404)
    END DisplayDrawingObjects;

    PROCEDURE (this: _Workbook) PUTDisplayDrawingObjects* (p1: XlDisplayShapes), NEW;
    BEGIN
        CtlC.PutInt(this, 404, p1)
    END PUTDisplayDrawingObjects;

    PROCEDURE (this: _Workbook) ExclusiveAccess* (): BOOLEAN, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1168, ret);
        RETURN CtlC.VarBool(ret)
    END ExclusiveAccess;

    PROCEDURE (this: _Workbook) FileFormat* (): XlFileFormat, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 288)
    END FileFormat;

    PROCEDURE (this: _Workbook) ForwardMailer* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 973, NIL);
    END ForwardMailer;

    PROCEDURE (this: _Workbook) FullName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 289)
    END FullName;

    PROCEDURE (this: _Workbook) HasMailer* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 976)
    END HasMailer;

    PROCEDURE (this: _Workbook) PUTHasMailer* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 976, p1)
    END PUTHasMailer;

    PROCEDURE (this: _Workbook) HasPassword* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 290)
    END HasPassword;

    PROCEDURE (this: _Workbook) HasRoutingSlip* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 950)
    END HasRoutingSlip;

    PROCEDURE (this: _Workbook) PUTHasRoutingSlip* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 950, p1)
    END PUTHasRoutingSlip;

    PROCEDURE (this: _Workbook) IsAddin* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1445)
    END IsAddin;

    PROCEDURE (this: _Workbook) PUTIsAddin* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1445, p1)
    END PUTIsAddin;

    PROCEDURE (this: _Workbook) Keywords* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 577)
    END Keywords;

    PROCEDURE (this: _Workbook) PUTKeywords* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 577, p1)
    END PUTKeywords;

    PROCEDURE (this: _Workbook) LinkInfo* (Name: ARRAY OF CHAR; LinkInfo: XlLinkInfo; (* optional *) Type: CtlT.Any; EditionRef: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[3]);
        CtlC.IntVar(LinkInfo, arg[2]);
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(EditionRef, arg[0]);
        CtlC.CallParMethod(this, 807, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LinkInfo;

    PROCEDURE (this: _Workbook) LinkSources* ((* optional *) Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 808, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LinkSources;

    PROCEDURE (this: _Workbook) Mailer* (): Mailer, NEW;
    BEGIN
        RETURN ThisMailer(CtlC.GetAny(this, 979))
    END Mailer;

    PROCEDURE (this: _Workbook) MergeWorkbook* (Filename: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 1446, arg, NIL);
    END MergeWorkbook;

    PROCEDURE (this: _Workbook) Modules* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 582))
    END Modules;

    PROCEDURE (this: _Workbook) MultiUserEditing* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1169)
    END MultiUserEditing;

    PROCEDURE (this: _Workbook) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: _Workbook) Names* (): Names, NEW;
    BEGIN
        RETURN ThisNames(CtlC.GetAny(this, 442))
    END Names;

    PROCEDURE (this: _Workbook) NewWindow* (): Window, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 280, ret);
        RETURN ThisWindow(CtlC.VarAny(ret))
    END NewWindow;

    PROCEDURE (this: _Workbook) OnSave* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1178)
    END OnSave;

    PROCEDURE (this: _Workbook) PUTOnSave* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1178, p1)
    END PUTOnSave;

    PROCEDURE (this: _Workbook) OnSheetActivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: _Workbook) PUTOnSheetActivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1031, p1)
    END PUTOnSheetActivate;

    PROCEDURE (this: _Workbook) OnSheetDeactivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: _Workbook) PUTOnSheetDeactivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1081, p1)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: _Workbook) OpenLinks* (Name: ARRAY OF CHAR; (* optional *) ReadOnly: CtlT.Any; Type: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[2]);
        CtlC.AnyVar(ReadOnly, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 803, arg, NIL);
    END OpenLinks;

    PROCEDURE (this: _Workbook) Path* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 291)
    END Path;

    PROCEDURE (this: _Workbook) PersonalViewListSettings* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1447)
    END PersonalViewListSettings;

    PROCEDURE (this: _Workbook) PUTPersonalViewListSettings* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1447, p1)
    END PUTPersonalViewListSettings;

    PROCEDURE (this: _Workbook) PersonalViewPrintSettings* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1448)
    END PersonalViewPrintSettings;

    PROCEDURE (this: _Workbook) PUTPersonalViewPrintSettings* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1448, p1)
    END PUTPersonalViewPrintSettings;

    PROCEDURE (this: _Workbook) PivotCaches* (): PivotCaches, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1449, ret);
        RETURN ThisPivotCaches(CtlC.VarAny(ret))
    END PivotCaches;

    PROCEDURE (this: _Workbook) Post* ((* optional *) DestName: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(DestName, arg[0]);
        CtlC.CallParMethod(this, 1166, arg, NIL);
    END Post;

    PROCEDURE (this: _Workbook) PrecisionAsDisplayed* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 405)
    END PrecisionAsDisplayed;

    PROCEDURE (this: _Workbook) PUTPrecisionAsDisplayed* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 405, p1)
    END PUTPrecisionAsDisplayed;

    PROCEDURE (this: _Workbook) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: _Workbook) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: _Workbook) Protect* ((* optional *) Password: CtlT.Any; Structure: CtlT.Any; Windows: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[2]);
        CtlC.AnyVar(Structure, arg[1]);
        CtlC.AnyVar(Windows, arg[0]);
        CtlC.CallParMethod(this, 282, arg, NIL);
    END Protect;

    PROCEDURE (this: _Workbook) ProtectSharing* ((* optional *) Filename: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any; SharingPassword: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[5]);
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(WriteResPassword, arg[3]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[2]);
        CtlC.AnyVar(CreateBackup, arg[1]);
        CtlC.AnyVar(SharingPassword, arg[0]);
        CtlC.CallParMethod(this, 1450, arg, NIL);
    END ProtectSharing;

    PROCEDURE (this: _Workbook) ProtectStructure* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 588)
    END ProtectStructure;

    PROCEDURE (this: _Workbook) ProtectWindows* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 295)
    END ProtectWindows;

    PROCEDURE (this: _Workbook) ReadOnly* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 296)
    END ReadOnly;

    PROCEDURE (this: _Workbook) ReadOnlyRecommended* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 297)
    END ReadOnlyRecommended;

    PROCEDURE (this: _Workbook) RefreshAll* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1452, NIL);
    END RefreshAll;

    PROCEDURE (this: _Workbook) Reply* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 977, NIL);
    END Reply;

    PROCEDURE (this: _Workbook) ReplyAll* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 978, NIL);
    END ReplyAll;

    PROCEDURE (this: _Workbook) RemoveUser* (Index: INTEGER), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1453, arg, NIL);
    END RemoveUser;

    PROCEDURE (this: _Workbook) RevisionNumber* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1172)
    END RevisionNumber;

    PROCEDURE (this: _Workbook) Route* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 946, NIL);
    END Route;

    PROCEDURE (this: _Workbook) Routed* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 951)
    END Routed;

    PROCEDURE (this: _Workbook) RoutingSlip* (): RoutingSlip, NEW;
    BEGIN
        RETURN ThisRoutingSlip(CtlC.GetAny(this, 949))
    END RoutingSlip;

    PROCEDURE (this: _Workbook) RunAutoMacros* (Which: XlRunAutoMacro), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Which, arg[0]);
        CtlC.CallParMethod(this, 634, arg, NIL);
    END RunAutoMacros;

    PROCEDURE (this: _Workbook) Save* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 283, NIL);
    END Save;

    PROCEDURE (this: _Workbook) SaveAs* (Filename: CtlT.Any; FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any; AccessMode: XlSaveAsAccessMode; (* optional *) ConflictResolution: CtlT.Any; AddToMru: CtlT.Any; TextCodepage: CtlT.Any; TextVisualLayout: CtlT.Any), NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[10]);
        CtlC.AnyVar(FileFormat, arg[9]);
        CtlC.AnyVar(Password, arg[8]);
        CtlC.AnyVar(WriteResPassword, arg[7]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[6]);
        CtlC.AnyVar(CreateBackup, arg[5]);
        CtlC.IntVar(AccessMode, arg[4]);
        CtlC.AnyVar(ConflictResolution, arg[3]);
        CtlC.AnyVar(AddToMru, arg[2]);
        CtlC.AnyVar(TextCodepage, arg[1]);
        CtlC.AnyVar(TextVisualLayout, arg[0]);
        CtlC.CallParMethod(this, 284, arg, NIL);
    END SaveAs;

    PROCEDURE (this: _Workbook) SaveCopyAs* ((* optional *) Filename: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 175, arg, NIL);
    END SaveCopyAs;

    PROCEDURE (this: _Workbook) Saved* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 298)
    END Saved;

    PROCEDURE (this: _Workbook) PUTSaved* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 298, p1)
    END PUTSaved;

    PROCEDURE (this: _Workbook) SaveLinkValues* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 406)
    END SaveLinkValues;

    PROCEDURE (this: _Workbook) PUTSaveLinkValues* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 406, p1)
    END PUTSaveLinkValues;

    PROCEDURE (this: _Workbook) SendMail* (Recipients: CtlT.Any; (* optional *) Subject: CtlT.Any; ReturnReceipt: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Recipients, arg[2]);
        CtlC.AnyVar(Subject, arg[1]);
        CtlC.AnyVar(ReturnReceipt, arg[0]);
        CtlC.CallParMethod(this, 947, arg, NIL);
    END SendMail;

    PROCEDURE (this: _Workbook) SendMailer* (FileFormat: CtlT.Any; Priority: XlPriority), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(FileFormat, arg[1]);
        CtlC.IntVar(Priority, arg[0]);
        CtlC.CallParMethod(this, 980, arg, NIL);
    END SendMailer;

    PROCEDURE (this: _Workbook) SetLinkOnData* (Name: ARRAY OF CHAR; (* optional *) Procedure: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[1]);
        CtlC.AnyVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 809, arg, NIL);
    END SetLinkOnData;

    PROCEDURE (this: _Workbook) Sheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 485))
    END Sheets;

    PROCEDURE (this: _Workbook) ShowConflictHistory* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1171)
    END ShowConflictHistory;

    PROCEDURE (this: _Workbook) PUTShowConflictHistory* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1171, p1)
    END PUTShowConflictHistory;

    PROCEDURE (this: _Workbook) Styles* (): Styles, NEW;
    BEGIN
        RETURN ThisStyles(CtlC.GetAny(this, 493))
    END Styles;

    PROCEDURE (this: _Workbook) Subject* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 953)
    END Subject;

    PROCEDURE (this: _Workbook) PUTSubject* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 953, p1)
    END PUTSubject;

    PROCEDURE (this: _Workbook) Title* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 199)
    END Title;

    PROCEDURE (this: _Workbook) PUTTitle* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 199, p1)
    END PUTTitle;

    PROCEDURE (this: _Workbook) Unprotect* ((* optional *) Password: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, NIL);
    END Unprotect;

    PROCEDURE (this: _Workbook) UnprotectSharing* ((* optional *) SharingPassword: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SharingPassword, arg[0]);
        CtlC.CallParMethod(this, 1455, arg, NIL);
    END UnprotectSharing;

    PROCEDURE (this: _Workbook) UpdateFromFile* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 995, NIL);
    END UpdateFromFile;

    PROCEDURE (this: _Workbook) UpdateLink* ((* optional *) Name: CtlT.Any; Type: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 804, arg, NIL);
    END UpdateLink;

    PROCEDURE (this: _Workbook) UpdateRemoteReferences* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 411)
    END UpdateRemoteReferences;

    PROCEDURE (this: _Workbook) PUTUpdateRemoteReferences* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 411, p1)
    END PUTUpdateRemoteReferences;

    PROCEDURE (this: _Workbook) UserControl* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1210)
    END UserControl;

    PROCEDURE (this: _Workbook) PUTUserControl* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1210, p1)
    END PUTUserControl;

    PROCEDURE (this: _Workbook) UserStatus* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1173)
    END UserStatus;

    PROCEDURE (this: _Workbook) CustomViews* (): CustomViews, NEW;
    BEGIN
        RETURN ThisCustomViews(CtlC.GetAny(this, 1456))
    END CustomViews;

    PROCEDURE (this: _Workbook) Windows* (): Windows, NEW;
    BEGIN
        RETURN ThisWindows(CtlC.GetAny(this, 430))
    END Windows;

    PROCEDURE (this: _Workbook) Worksheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 494))
    END Worksheets;

    PROCEDURE (this: _Workbook) WriteReserved* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 299)
    END WriteReserved;

    PROCEDURE (this: _Workbook) WriteReservedBy* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 300)
    END WriteReservedBy;

    PROCEDURE (this: _Workbook) Excel4IntlMacroSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 581))
    END Excel4IntlMacroSheets;

    PROCEDURE (this: _Workbook) Excel4MacroSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 579))
    END Excel4MacroSheets;

    PROCEDURE (this: _Workbook) TemplateRemoveExtData* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1457)
    END TemplateRemoveExtData;

    PROCEDURE (this: _Workbook) PUTTemplateRemoveExtData* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1457, p1)
    END PUTTemplateRemoveExtData;

    PROCEDURE (this: _Workbook) HighlightChangesOptions* ((* optional *) When: CtlT.Any; Who: CtlT.Any; Where: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(When, arg[2]);
        CtlC.AnyVar(Who, arg[1]);
        CtlC.AnyVar(Where, arg[0]);
        CtlC.CallParMethod(this, 1458, arg, NIL);
    END HighlightChangesOptions;

    PROCEDURE (this: _Workbook) HighlightChangesOnScreen* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1461)
    END HighlightChangesOnScreen;

    PROCEDURE (this: _Workbook) PUTHighlightChangesOnScreen* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1461, p1)
    END PUTHighlightChangesOnScreen;

    PROCEDURE (this: _Workbook) KeepChangeHistory* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1462)
    END KeepChangeHistory;

    PROCEDURE (this: _Workbook) PUTKeepChangeHistory* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1462, p1)
    END PUTKeepChangeHistory;

    PROCEDURE (this: _Workbook) ListChangesOnNewSheet* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1463)
    END ListChangesOnNewSheet;

    PROCEDURE (this: _Workbook) PUTListChangesOnNewSheet* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1463, p1)
    END PUTListChangesOnNewSheet;

    PROCEDURE (this: _Workbook) PurgeChangeHistoryNow* (Days: INTEGER; (* optional *) SharingPassword: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Days, arg[1]);
        CtlC.AnyVar(SharingPassword, arg[0]);
        CtlC.CallParMethod(this, 1464, arg, NIL);
    END PurgeChangeHistoryNow;

    PROCEDURE (this: _Workbook) AcceptAllChanges* ((* optional *) When: CtlT.Any; Who: CtlT.Any; Where: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(When, arg[2]);
        CtlC.AnyVar(Who, arg[1]);
        CtlC.AnyVar(Where, arg[0]);
        CtlC.CallParMethod(this, 1466, arg, NIL);
    END AcceptAllChanges;

    PROCEDURE (this: _Workbook) RejectAllChanges* ((* optional *) When: CtlT.Any; Who: CtlT.Any; Where: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(When, arg[2]);
        CtlC.AnyVar(Who, arg[1]);
        CtlC.AnyVar(Where, arg[0]);
        CtlC.CallParMethod(this, 1467, arg, NIL);
    END RejectAllChanges;

    PROCEDURE (this: _Workbook) PivotTableWizard* ((* optional *) SourceType: CtlT.Any; SourceData: CtlT.Any; TableDestination: CtlT.Any; TableName: CtlT.Any; RowGrand: CtlT.Any; ColumnGrand: CtlT.Any; SaveData: CtlT.Any; HasAutoFormat: CtlT.Any; AutoPage: CtlT.Any; Reserved: CtlT.Any; BackgroundQuery: CtlT.Any; OptimizeCache: CtlT.Any; PageFieldOrder: CtlT.Any; PageFieldWrapCount: CtlT.Any; ReadData: CtlT.Any; Connection: CtlT.Any), NEW;
        VAR arg: ARRAY 16 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SourceType, arg[15]);
        CtlC.AnyVar(SourceData, arg[14]);
        CtlC.AnyVar(TableDestination, arg[13]);
        CtlC.AnyVar(TableName, arg[12]);
        CtlC.AnyVar(RowGrand, arg[11]);
        CtlC.AnyVar(ColumnGrand, arg[10]);
        CtlC.AnyVar(SaveData, arg[9]);
        CtlC.AnyVar(HasAutoFormat, arg[8]);
        CtlC.AnyVar(AutoPage, arg[7]);
        CtlC.AnyVar(Reserved, arg[6]);
        CtlC.AnyVar(BackgroundQuery, arg[5]);
        CtlC.AnyVar(OptimizeCache, arg[4]);
        CtlC.AnyVar(PageFieldOrder, arg[3]);
        CtlC.AnyVar(PageFieldWrapCount, arg[2]);
        CtlC.AnyVar(ReadData, arg[1]);
        CtlC.AnyVar(Connection, arg[0]);
        CtlC.CallParMethod(this, 684, arg, NIL);
    END PivotTableWizard;

    PROCEDURE (this: _Workbook) ResetColors* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1468, NIL);
    END ResetColors;

    PROCEDURE (this: _Workbook) VBProject* (): CtlVBIDE.VBProject, NEW;
    BEGIN
        RETURN CtlVBIDE.This_VBProject(CtlC.GetAny(this, 1469))
    END VBProject;

    PROCEDURE (this: _Workbook) FollowHyperlink* (Address: ARRAY OF CHAR; (* optional *) SubAddress: CtlT.Any; NewWindow: CtlT.Any; AddHistory: CtlT.Any; ExtraInfo: CtlT.Any; Method: CtlT.Any; HeaderInfo: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Address, arg[6]);
        CtlC.AnyVar(SubAddress, arg[5]);
        CtlC.AnyVar(NewWindow, arg[4]);
        CtlC.AnyVar(AddHistory, arg[3]);
        CtlC.AnyVar(ExtraInfo, arg[2]);
        CtlC.AnyVar(Method, arg[1]);
        CtlC.AnyVar(HeaderInfo, arg[0]);
        CtlC.CallParMethod(this, 1470, arg, NIL);
    END FollowHyperlink;

    PROCEDURE (this: _Workbook) AddToFavorites* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1476, NIL);
    END AddToFavorites;

    PROCEDURE (this: _Workbook) IsInplace* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1780)
    END IsInplace;


    (* ---------- Workbooks, dual, nonextensible ---------- *)

    PROCEDURE (this: Workbooks) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Workbooks) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Workbooks) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Workbooks) Add* ((* optional *) Template: CtlT.Any): Workbook, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Template, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN This_Workbook(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Workbooks) Close* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 277, NIL);
    END Close;

    PROCEDURE (this: Workbooks) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Workbooks) Item* (Index: CtlT.Any): Workbook, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN This_Workbook(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Workbooks) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Workbooks) Open* (Filename: ARRAY OF CHAR; (* optional *) UpdateLinks: CtlT.Any; ReadOnly: CtlT.Any; Format: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; IgnoreReadOnlyRecommended: CtlT.Any; Origin: CtlT.Any; Delimiter: CtlT.Any; Editable: CtlT.Any; Notify: CtlT.Any; Converter: CtlT.Any; AddToMru: CtlT.Any): Workbook, NEW;
        VAR arg: ARRAY 13 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[12]);
        CtlC.AnyVar(UpdateLinks, arg[11]);
        CtlC.AnyVar(ReadOnly, arg[10]);
        CtlC.AnyVar(Format, arg[9]);
        CtlC.AnyVar(Password, arg[8]);
        CtlC.AnyVar(WriteResPassword, arg[7]);
        CtlC.AnyVar(IgnoreReadOnlyRecommended, arg[6]);
        CtlC.AnyVar(Origin, arg[5]);
        CtlC.AnyVar(Delimiter, arg[4]);
        CtlC.AnyVar(Editable, arg[3]);
        CtlC.AnyVar(Notify, arg[2]);
        CtlC.AnyVar(Converter, arg[1]);
        CtlC.AnyVar(AddToMru, arg[0]);
        CtlC.CallParMethod(this, 682, arg, ret);
        RETURN This_Workbook(CtlC.VarAny(ret))
    END Open;

    PROCEDURE (this: Workbooks) OpenText* (Filename: ARRAY OF CHAR; Origin: CtlT.Any; StartRow: CtlT.Any; DataType: CtlT.Any; TextQualifier: XlTextQualifier; (* optional *) ConsecutiveDelimiter: CtlT.Any; Tab: CtlT.Any; Semicolon: CtlT.Any; Comma: CtlT.Any; Space: CtlT.Any; Other: CtlT.Any; OtherChar: CtlT.Any; FieldInfo: CtlT.Any; TextVisualLayout: CtlT.Any), NEW;
        VAR arg: ARRAY 14 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[13]);
        CtlC.AnyVar(Origin, arg[12]);
        CtlC.AnyVar(StartRow, arg[11]);
        CtlC.AnyVar(DataType, arg[10]);
        CtlC.IntVar(TextQualifier, arg[9]);
        CtlC.AnyVar(ConsecutiveDelimiter, arg[8]);
        CtlC.AnyVar(Tab, arg[7]);
        CtlC.AnyVar(Semicolon, arg[6]);
        CtlC.AnyVar(Comma, arg[5]);
        CtlC.AnyVar(Space, arg[4]);
        CtlC.AnyVar(Other, arg[3]);
        CtlC.AnyVar(OtherChar, arg[2]);
        CtlC.AnyVar(FieldInfo, arg[1]);
        CtlC.AnyVar(TextVisualLayout, arg[0]);
        CtlC.CallParMethod(this, 683, arg, NIL);
    END OpenText;

    PROCEDURE (this: Workbooks) _Default* (Index: CtlT.Any): Workbook, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN This_Workbook(CtlC.VarAny(ret))
    END _Default;


    (* ---------- Font ---------- *)

    PROCEDURE (this: Font) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Font) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Font) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Font) Background* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 180)
    END Background;

    PROCEDURE (this: Font) PUTBackground* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 180, p1)
    END PUTBackground;

    PROCEDURE (this: Font) Bold* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 96)
    END Bold;

    PROCEDURE (this: Font) PUTBold* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 96, p1)
    END PUTBold;

    PROCEDURE (this: Font) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Font) PUTColor* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, p1)
    END PUTColor;

    PROCEDURE (this: Font) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Font) PUTColorIndex* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, p1)
    END PUTColorIndex;

    PROCEDURE (this: Font) FontStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 177)
    END FontStyle;

    PROCEDURE (this: Font) PUTFontStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 177, p1)
    END PUTFontStyle;

    PROCEDURE (this: Font) Italic* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 101)
    END Italic;

    PROCEDURE (this: Font) PUTItalic* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 101, p1)
    END PUTItalic;

    PROCEDURE (this: Font) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Font) PUTName* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Font) OutlineFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 221)
    END OutlineFont;

    PROCEDURE (this: Font) PUTOutlineFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 221, p1)
    END PUTOutlineFont;

    PROCEDURE (this: Font) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Font) PUTShadow* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Font) Size* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 104)
    END Size;

    PROCEDURE (this: Font) PUTSize* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 104, p1)
    END PUTSize;

    PROCEDURE (this: Font) Strikethrough* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 105)
    END Strikethrough;

    PROCEDURE (this: Font) PUTStrikethrough* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 105, p1)
    END PUTStrikethrough;

    PROCEDURE (this: Font) Subscript* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 179)
    END Subscript;

    PROCEDURE (this: Font) PUTSubscript* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 179, p1)
    END PUTSubscript;

    PROCEDURE (this: Font) Superscript* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 178)
    END Superscript;

    PROCEDURE (this: Font) PUTSuperscript* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 178, p1)
    END PUTSuperscript;

    PROCEDURE (this: Font) Underline* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 106)
    END Underline;

    PROCEDURE (this: Font) PUTUnderline* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 106, p1)
    END PUTUnderline;


    (* ---------- Window ---------- *)

    PROCEDURE (this: Window) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Window) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Window) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Window) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: Window) ActivateNext* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1115, NIL);
    END ActivateNext;

    PROCEDURE (this: Window) ActivatePrevious* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1116, NIL);
    END ActivatePrevious;

    PROCEDURE (this: Window) ActiveCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 305))
    END ActiveCell;

    PROCEDURE (this: Window) ActiveChart* (): Chart, NEW;
    BEGIN
        RETURN This_Chart(CtlC.GetAny(this, 183))
    END ActiveChart;

    PROCEDURE (this: Window) ActivePane* (): Pane, NEW;
    BEGIN
        RETURN ThisPane(CtlC.GetAny(this, 642))
    END ActivePane;

    PROCEDURE (this: Window) ActiveSheet* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 307)
    END ActiveSheet;

    PROCEDURE (this: Window) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Window) PUTCaption* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Window) Close* ((* optional *) SaveChanges: CtlT.Any; Filename: CtlT.Any; RouteWorkbook: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SaveChanges, arg[2]);
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(RouteWorkbook, arg[0]);
        CtlC.CallParMethod(this, 277, arg, NIL);
    END Close;

    PROCEDURE (this: Window) DisplayFormulas* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 644)
    END DisplayFormulas;

    PROCEDURE (this: Window) PUTDisplayFormulas* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 644, p1)
    END PUTDisplayFormulas;

    PROCEDURE (this: Window) DisplayGridlines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 645)
    END DisplayGridlines;

    PROCEDURE (this: Window) PUTDisplayGridlines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 645, p1)
    END PUTDisplayGridlines;

    PROCEDURE (this: Window) DisplayHeadings* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 646)
    END DisplayHeadings;

    PROCEDURE (this: Window) PUTDisplayHeadings* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 646, p1)
    END PUTDisplayHeadings;

    PROCEDURE (this: Window) DisplayHorizontalScrollBar* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 921)
    END DisplayHorizontalScrollBar;

    PROCEDURE (this: Window) PUTDisplayHorizontalScrollBar* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 921, p1)
    END PUTDisplayHorizontalScrollBar;

    PROCEDURE (this: Window) DisplayOutline* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 647)
    END DisplayOutline;

    PROCEDURE (this: Window) PUTDisplayOutline* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 647, p1)
    END PUTDisplayOutline;

    PROCEDURE (this: Window) DisplayRightToLeft* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 648)
    END DisplayRightToLeft;

    PROCEDURE (this: Window) PUTDisplayRightToLeft* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 648, p1)
    END PUTDisplayRightToLeft;

    PROCEDURE (this: Window) DisplayVerticalScrollBar* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: Window) PUTDisplayVerticalScrollBar* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 922, p1)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: Window) DisplayWorkbookTabs* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 923)
    END DisplayWorkbookTabs;

    PROCEDURE (this: Window) PUTDisplayWorkbookTabs* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 923, p1)
    END PUTDisplayWorkbookTabs;

    PROCEDURE (this: Window) DisplayZeros* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 649)
    END DisplayZeros;

    PROCEDURE (this: Window) PUTDisplayZeros* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 649, p1)
    END PUTDisplayZeros;

    PROCEDURE (this: Window) EnableResize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1192)
    END EnableResize;

    PROCEDURE (this: Window) PUTEnableResize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1192, p1)
    END PUTEnableResize;

    PROCEDURE (this: Window) FreezePanes* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 650)
    END FreezePanes;

    PROCEDURE (this: Window) PUTFreezePanes* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 650, p1)
    END PUTFreezePanes;

    PROCEDURE (this: Window) GridlineColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 651)
    END GridlineColor;

    PROCEDURE (this: Window) PUTGridlineColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 651, p1)
    END PUTGridlineColor;

    PROCEDURE (this: Window) GridlineColorIndex* (): XlColorIndex, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 652)
    END GridlineColorIndex;

    PROCEDURE (this: Window) PUTGridlineColorIndex* (p1: XlColorIndex), NEW;
    BEGIN
        CtlC.PutInt(this, 652, p1)
    END PUTGridlineColorIndex;

    PROCEDURE (this: Window) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Window) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Window) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Window) LargeScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 547, arg, NIL);
    END LargeScroll;

    PROCEDURE (this: Window) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Window) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Window) NewWindow* (): Window, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 280, ret);
        RETURN ThisWindow(CtlC.VarAny(ret))
    END NewWindow;

    PROCEDURE (this: Window) OnWindow* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 623)
    END OnWindow;

    PROCEDURE (this: Window) PUTOnWindow* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 623, p1)
    END PUTOnWindow;

    PROCEDURE (this: Window) Panes* (): Panes, NEW;
    BEGIN
        RETURN ThisPanes(CtlC.GetAny(this, 653))
    END Panes;

    PROCEDURE (this: Window) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: Window) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: Window) RangeSelection* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1189))
    END RangeSelection;

    PROCEDURE (this: Window) ScrollColumn* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 654)
    END ScrollColumn;

    PROCEDURE (this: Window) PUTScrollColumn* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 654, p1)
    END PUTScrollColumn;

    PROCEDURE (this: Window) ScrollRow* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 655)
    END ScrollRow;

    PROCEDURE (this: Window) PUTScrollRow* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 655, p1)
    END PUTScrollRow;

    PROCEDURE (this: Window) ScrollWorkbookTabs* ((* optional *) Sheets: CtlT.Any; Position: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Sheets, arg[1]);
        CtlC.AnyVar(Position, arg[0]);
        CtlC.CallParMethod(this, 662, arg, NIL);
    END ScrollWorkbookTabs;

    PROCEDURE (this: Window) SelectedSheets* (): Sheets, NEW;
    BEGIN
        RETURN ThisSheets(CtlC.GetAny(this, 656))
    END SelectedSheets;

    PROCEDURE (this: Window) Selection* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 147)
    END Selection;

    PROCEDURE (this: Window) SmallScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 548, arg, NIL);
    END SmallScroll;

    PROCEDURE (this: Window) Split* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 657)
    END Split;

    PROCEDURE (this: Window) PUTSplit* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 657, p1)
    END PUTSplit;

    PROCEDURE (this: Window) SplitColumn* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 658)
    END SplitColumn;

    PROCEDURE (this: Window) PUTSplitColumn* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 658, p1)
    END PUTSplitColumn;

    PROCEDURE (this: Window) SplitHorizontal* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 659)
    END SplitHorizontal;

    PROCEDURE (this: Window) PUTSplitHorizontal* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 659, p1)
    END PUTSplitHorizontal;

    PROCEDURE (this: Window) SplitRow* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 660)
    END SplitRow;

    PROCEDURE (this: Window) PUTSplitRow* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 660, p1)
    END PUTSplitRow;

    PROCEDURE (this: Window) SplitVertical* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 661)
    END SplitVertical;

    PROCEDURE (this: Window) PUTSplitVertical* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 661, p1)
    END PUTSplitVertical;

    PROCEDURE (this: Window) TabRatio* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 673)
    END TabRatio;

    PROCEDURE (this: Window) PUTTabRatio* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 673, p1)
    END PUTTabRatio;

    PROCEDURE (this: Window) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Window) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Window) Type* (): XlWindowType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Window) UsableHeight* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 389)
    END UsableHeight;

    PROCEDURE (this: Window) UsableWidth* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 390)
    END UsableWidth;

    PROCEDURE (this: Window) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Window) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Window) VisibleRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1118))
    END VisibleRange;

    PROCEDURE (this: Window) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Window) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Window) WindowNumber* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1119)
    END WindowNumber;

    PROCEDURE (this: Window) WindowState* (): XlWindowState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 396)
    END WindowState;

    PROCEDURE (this: Window) PUTWindowState* (p1: XlWindowState), NEW;
    BEGIN
        CtlC.PutInt(this, 396, p1)
    END PUTWindowState;

    PROCEDURE (this: Window) Zoom* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 663)
    END Zoom;

    PROCEDURE (this: Window) PUTZoom* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 663, p1)
    END PUTZoom;

    PROCEDURE (this: Window) View* (): XlWindowView, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1194)
    END View;

    PROCEDURE (this: Window) PUTView* (p1: XlWindowView), NEW;
    BEGIN
        CtlC.PutInt(this, 1194, p1)
    END PUTView;


    (* ---------- Windows ---------- *)

    PROCEDURE (this: Windows) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Windows) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Windows) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Windows) Arrange* (ArrangeStyle: XlArrangeStyle; (* optional *) ActiveWorkbook: CtlT.Any; SyncHorizontal: CtlT.Any; SyncVertical: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(ArrangeStyle, arg[3]);
        CtlC.AnyVar(ActiveWorkbook, arg[2]);
        CtlC.AnyVar(SyncHorizontal, arg[1]);
        CtlC.AnyVar(SyncVertical, arg[0]);
        CtlC.CallParMethod(this, 638, arg, NIL);
    END Arrange;

    PROCEDURE (this: Windows) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Windows) Item* (Index: CtlT.Any): Window, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisWindow(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Windows) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Windows) _Default* (Index: CtlT.Any): Window, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisWindow(CtlC.VarAny(ret))
    END _Default;


    (* ---------- AppEvents, hidden ---------- *)

    PROCEDURE (this: AppEvents) NewWorkbook* (Wb: Workbook), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) SheetSelectionChange* (Sh: CtlT.Object; Target: Range), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) SheetBeforeDoubleClick* (Sh: CtlT.Object; Target: Range; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) SheetBeforeRightClick* (Sh: CtlT.Object; Target: Range; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) SheetActivate* (Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) SheetDeactivate* (Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) SheetCalculate* (Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) SheetChange* (Sh: CtlT.Object; Target: Range), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookOpen* (Wb: Workbook), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookActivate* (Wb: Workbook), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookDeactivate* (Wb: Workbook), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookBeforeClose* (Wb: Workbook; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookBeforeSave* (Wb: Workbook; SaveAsUI: BOOLEAN; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookBeforePrint* (Wb: Workbook; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookNewSheet* (Wb: Workbook; Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookAddinInstall* (Wb: Workbook), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WorkbookAddinUninstall* (Wb: Workbook), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WindowResize* (Wb: Workbook; Wn: Window), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WindowActivate* (Wb: Workbook; Wn: Window), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) WindowDeactivate* (Wb: Workbook; Wn: Window), NEW, ABSTRACT;

    PROCEDURE (this: AppEvents) Invoke* (id, n: INTEGER; VAR par: CtlT.ParList; VAR ret: CtlT.Variant);
    BEGIN
        CASE id OF
        | 1565: ASSERT(n = 1, 11); this.NewWorkbook(This_Workbook(CtlC.VarAny(par[0])))
        | 1558: ASSERT(n = 2, 11); this.SheetSelectionChange(CtlC.VarObj(par[1]), ThisRange(CtlC.VarAny(par[0])))
        | 1559: ASSERT(n = 3, 11); this.SheetBeforeDoubleClick(CtlC.VarObj(par[2]), ThisRange(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1560: ASSERT(n = 3, 11); this.SheetBeforeRightClick(CtlC.VarObj(par[2]), ThisRange(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1561: ASSERT(n = 1, 11); this.SheetActivate(CtlC.VarObj(par[0]))
        | 1562: ASSERT(n = 1, 11); this.SheetDeactivate(CtlC.VarObj(par[0]))
        | 1563: ASSERT(n = 1, 11); this.SheetCalculate(CtlC.VarObj(par[0]))
        | 1564: ASSERT(n = 2, 11); this.SheetChange(CtlC.VarObj(par[1]), ThisRange(CtlC.VarAny(par[0])))
        | 1567: ASSERT(n = 1, 11); this.WorkbookOpen(This_Workbook(CtlC.VarAny(par[0])))
        | 1568: ASSERT(n = 1, 11); this.WorkbookActivate(This_Workbook(CtlC.VarAny(par[0])))
        | 1569: ASSERT(n = 1, 11); this.WorkbookDeactivate(This_Workbook(CtlC.VarAny(par[0])))
        | 1570: ASSERT(n = 2, 11); this.WorkbookBeforeClose(This_Workbook(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1571: ASSERT(n = 3, 11); this.WorkbookBeforeSave(This_Workbook(CtlC.VarAny(par[2])), CtlC.VarBool(par[1]), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1572: ASSERT(n = 2, 11); this.WorkbookBeforePrint(This_Workbook(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1573: ASSERT(n = 2, 11); this.WorkbookNewSheet(This_Workbook(CtlC.VarAny(par[1])), CtlC.VarObj(par[0]))
        | 1574: ASSERT(n = 1, 11); this.WorkbookAddinInstall(This_Workbook(CtlC.VarAny(par[0])))
        | 1575: ASSERT(n = 1, 11); this.WorkbookAddinUninstall(This_Workbook(CtlC.VarAny(par[0])))
        | 1554: ASSERT(n = 2, 11); this.WindowResize(This_Workbook(CtlC.VarAny(par[1])), ThisWindow(CtlC.VarAny(par[0])))
        | 1556: ASSERT(n = 2, 11); this.WindowActivate(This_Workbook(CtlC.VarAny(par[1])), ThisWindow(CtlC.VarAny(par[0])))
        | 1557: ASSERT(n = 2, 11); this.WindowDeactivate(This_Workbook(CtlC.VarAny(par[1])), ThisWindow(CtlC.VarAny(par[0])))
        END
    END Invoke;

    PROCEDURE (this: AppEvents) GetIID* (OUT iid: CtlT.GUID);
    BEGIN
        iid := "{00024413-0000-0000-C000-000000000046}"
    END GetIID;


    (* ---------- WorksheetFunction ---------- *)

    PROCEDURE (this: WorksheetFunction) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: WorksheetFunction) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: WorksheetFunction) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: WorksheetFunction) _WSFunction* ((* optional *) Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 169, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _WSFunction;

    PROCEDURE (this: WorksheetFunction) Count* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16384, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Count;

    PROCEDURE (this: WorksheetFunction) IsNA* (Arg1: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16386, arg, ret);
        RETURN CtlC.VarBool(ret)
    END IsNA;

    PROCEDURE (this: WorksheetFunction) IsError* (Arg1: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16387, arg, ret);
        RETURN CtlC.VarBool(ret)
    END IsError;

    PROCEDURE (this: WorksheetFunction) Sum* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16388, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Sum;

    PROCEDURE (this: WorksheetFunction) Average* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16389, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Average;

    PROCEDURE (this: WorksheetFunction) Min* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16390, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Min;

    PROCEDURE (this: WorksheetFunction) Max* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16391, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Max;

    PROCEDURE (this: WorksheetFunction) Npv* (Arg1: REAL; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16395, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Npv;

    PROCEDURE (this: WorksheetFunction) StDev* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16396, arg, ret);
        RETURN CtlC.VarReal(ret)
    END StDev;

    PROCEDURE (this: WorksheetFunction) Dollar* (Arg1: REAL; (* optional *) Arg2: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16397, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Dollar;

    PROCEDURE (this: WorksheetFunction) Fixed* (Arg1: REAL; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16398, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Fixed;

    PROCEDURE (this: WorksheetFunction) Pi* (): REAL, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16403, ret);
        RETURN CtlC.VarReal(ret)
    END Pi;

    PROCEDURE (this: WorksheetFunction) Ln* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16406, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Ln;

    PROCEDURE (this: WorksheetFunction) Log10* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16407, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Log10;

    PROCEDURE (this: WorksheetFunction) Round* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16411, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Round;

    PROCEDURE (this: WorksheetFunction) Lookup* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16412, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Lookup;

    PROCEDURE (this: WorksheetFunction) Index* (Arg1: CtlT.Any; Arg2: REAL; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.AnyVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16413, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Index;

    PROCEDURE (this: WorksheetFunction) Rept* (Arg1: ARRAY OF CHAR; Arg2: REAL): CtlT.Strg, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16414, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Rept;

    PROCEDURE (this: WorksheetFunction) And* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16420, arg, ret);
        RETURN CtlC.VarBool(ret)
    END And;

    PROCEDURE (this: WorksheetFunction) Or* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16421, arg, ret);
        RETURN CtlC.VarBool(ret)
    END Or;

    PROCEDURE (this: WorksheetFunction) DCount* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16424, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DCount;

    PROCEDURE (this: WorksheetFunction) DSum* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16425, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DSum;

    PROCEDURE (this: WorksheetFunction) DAverage* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16426, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DAverage;

    PROCEDURE (this: WorksheetFunction) DMin* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16427, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DMin;

    PROCEDURE (this: WorksheetFunction) DMax* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16428, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DMax;

    PROCEDURE (this: WorksheetFunction) DStDev* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16429, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DStDev;

    PROCEDURE (this: WorksheetFunction) Var* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16430, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Var;

    PROCEDURE (this: WorksheetFunction) DVar* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16431, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DVar;

    PROCEDURE (this: WorksheetFunction) Text* (Arg1: CtlT.Any; Arg2: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.StrVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16432, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Text;

    PROCEDURE (this: WorksheetFunction) LinEst* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.AnyVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16433, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LinEst;

    PROCEDURE (this: WorksheetFunction) Trend* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.AnyVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16434, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Trend;

    PROCEDURE (this: WorksheetFunction) LogEst* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.AnyVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16435, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LogEst;

    PROCEDURE (this: WorksheetFunction) Growth* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.AnyVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16436, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Growth;

    PROCEDURE (this: WorksheetFunction) Pv* (Arg1: REAL; Arg2: REAL; Arg3: REAL; (* optional *) Arg4: CtlT.Any; Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.AnyVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16440, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Pv;

    PROCEDURE (this: WorksheetFunction) Fv* (Arg1: REAL; Arg2: REAL; Arg3: REAL; (* optional *) Arg4: CtlT.Any; Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.AnyVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16441, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Fv;

    PROCEDURE (this: WorksheetFunction) NPer* (Arg1: REAL; Arg2: REAL; Arg3: REAL; (* optional *) Arg4: CtlT.Any; Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.AnyVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16442, arg, ret);
        RETURN CtlC.VarReal(ret)
    END NPer;

    PROCEDURE (this: WorksheetFunction) Pmt* (Arg1: REAL; Arg2: REAL; Arg3: REAL; (* optional *) Arg4: CtlT.Any; Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.AnyVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16443, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Pmt;

    PROCEDURE (this: WorksheetFunction) Rate* (Arg1: REAL; Arg2: REAL; Arg3: REAL; (* optional *) Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[5]);
        CtlC.RealVar(Arg2, arg[4]);
        CtlC.RealVar(Arg3, arg[3]);
        CtlC.AnyVar(Arg4, arg[2]);
        CtlC.AnyVar(Arg5, arg[1]);
        CtlC.AnyVar(Arg6, arg[0]);
        CtlC.CallParMethod(this, 16444, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Rate;

    PROCEDURE (this: WorksheetFunction) MIrr* (Arg1: CtlT.Any; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16445, arg, ret);
        RETURN CtlC.VarReal(ret)
    END MIrr;

    PROCEDURE (this: WorksheetFunction) Irr* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16446, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Irr;

    PROCEDURE (this: WorksheetFunction) Match* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16448, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Match;

    PROCEDURE (this: WorksheetFunction) Weekday* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16454, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Weekday;

    PROCEDURE (this: WorksheetFunction) Search* (Arg1: ARRAY OF CHAR; Arg2: ARRAY OF CHAR; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[2]);
        CtlC.StrVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16466, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Search;

    PROCEDURE (this: WorksheetFunction) Transpose* (Arg1: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16467, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Transpose;

    PROCEDURE (this: WorksheetFunction) Atan2* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16481, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Atan2;

    PROCEDURE (this: WorksheetFunction) Asin* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16482, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Asin;

    PROCEDURE (this: WorksheetFunction) Acos* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16483, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Acos;

    PROCEDURE (this: WorksheetFunction) Choose* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16484, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Choose;

    PROCEDURE (this: WorksheetFunction) HLookup* (Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; (* optional *) Arg4: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.AnyVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16485, arg, ret);
        RETURN CtlC.VarAny(ret)
    END HLookup;

    PROCEDURE (this: WorksheetFunction) VLookup* (Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; (* optional *) Arg4: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.AnyVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16486, arg, ret);
        RETURN CtlC.VarAny(ret)
    END VLookup;

    PROCEDURE (this: WorksheetFunction) Log* (Arg1: REAL; (* optional *) Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16493, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Log;

    PROCEDURE (this: WorksheetFunction) Proper* (Arg1: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16498, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Proper;

    PROCEDURE (this: WorksheetFunction) Trim* (Arg1: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16502, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Trim;

    PROCEDURE (this: WorksheetFunction) Replace* (Arg1: ARRAY OF CHAR; Arg2: REAL; Arg3: REAL; Arg4: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.StrVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16503, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Replace;

    PROCEDURE (this: WorksheetFunction) Substitute* (Arg1: ARRAY OF CHAR; Arg2: ARRAY OF CHAR; Arg3: ARRAY OF CHAR; (* optional *) Arg4: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[3]);
        CtlC.StrVar(Arg2, arg[2]);
        CtlC.StrVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16504, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Substitute;

    PROCEDURE (this: WorksheetFunction) Find* (Arg1: ARRAY OF CHAR; Arg2: ARRAY OF CHAR; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[2]);
        CtlC.StrVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16508, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Find;

    PROCEDURE (this: WorksheetFunction) IsErr* (Arg1: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16510, arg, ret);
        RETURN CtlC.VarBool(ret)
    END IsErr;

    PROCEDURE (this: WorksheetFunction) IsText* (Arg1: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16511, arg, ret);
        RETURN CtlC.VarBool(ret)
    END IsText;

    PROCEDURE (this: WorksheetFunction) IsNumber* (Arg1: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16512, arg, ret);
        RETURN CtlC.VarBool(ret)
    END IsNumber;

    PROCEDURE (this: WorksheetFunction) Sln* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16526, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Sln;

    PROCEDURE (this: WorksheetFunction) Syd* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.RealVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16527, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Syd;

    PROCEDURE (this: WorksheetFunction) Ddb* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL; (* optional *) Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.RealVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16528, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Ddb;

    PROCEDURE (this: WorksheetFunction) Clean* (Arg1: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16546, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Clean;

    PROCEDURE (this: WorksheetFunction) MDeterm* (Arg1: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16547, arg, ret);
        RETURN CtlC.VarReal(ret)
    END MDeterm;

    PROCEDURE (this: WorksheetFunction) MInverse* (Arg1: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16548, arg, ret);
        RETURN CtlC.VarAny(ret)
    END MInverse;

    PROCEDURE (this: WorksheetFunction) MMult* (Arg1: CtlT.Any; Arg2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16549, arg, ret);
        RETURN CtlC.VarAny(ret)
    END MMult;

    PROCEDURE (this: WorksheetFunction) Ipmt* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL; (* optional *) Arg5: CtlT.Any; Arg6: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[5]);
        CtlC.RealVar(Arg2, arg[4]);
        CtlC.RealVar(Arg3, arg[3]);
        CtlC.RealVar(Arg4, arg[2]);
        CtlC.AnyVar(Arg5, arg[1]);
        CtlC.AnyVar(Arg6, arg[0]);
        CtlC.CallParMethod(this, 16551, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Ipmt;

    PROCEDURE (this: WorksheetFunction) Ppmt* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL; (* optional *) Arg5: CtlT.Any; Arg6: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[5]);
        CtlC.RealVar(Arg2, arg[4]);
        CtlC.RealVar(Arg3, arg[3]);
        CtlC.RealVar(Arg4, arg[2]);
        CtlC.AnyVar(Arg5, arg[1]);
        CtlC.AnyVar(Arg6, arg[0]);
        CtlC.CallParMethod(this, 16552, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Ppmt;

    PROCEDURE (this: WorksheetFunction) CountA* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16553, arg, ret);
        RETURN CtlC.VarReal(ret)
    END CountA;

    PROCEDURE (this: WorksheetFunction) Product* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16567, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Product;

    PROCEDURE (this: WorksheetFunction) Fact* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16568, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Fact;

    PROCEDURE (this: WorksheetFunction) DProduct* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16573, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DProduct;

    PROCEDURE (this: WorksheetFunction) IsNonText* (Arg1: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16574, arg, ret);
        RETURN CtlC.VarBool(ret)
    END IsNonText;

    PROCEDURE (this: WorksheetFunction) StDevP* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16577, arg, ret);
        RETURN CtlC.VarReal(ret)
    END StDevP;

    PROCEDURE (this: WorksheetFunction) VarP* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16578, arg, ret);
        RETURN CtlC.VarReal(ret)
    END VarP;

    PROCEDURE (this: WorksheetFunction) DStDevP* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16579, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DStDevP;

    PROCEDURE (this: WorksheetFunction) DVarP* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16580, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DVarP;

    PROCEDURE (this: WorksheetFunction) IsLogical* (Arg1: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16582, arg, ret);
        RETURN CtlC.VarBool(ret)
    END IsLogical;

    PROCEDURE (this: WorksheetFunction) DCountA* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16583, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DCountA;

    PROCEDURE (this: WorksheetFunction) USDollar* (Arg1: REAL; Arg2: REAL): CtlT.Strg, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16588, arg, ret);
        RETURN CtlC.VarStr(ret)
    END USDollar;

    PROCEDURE (this: WorksheetFunction) FindB* (Arg1: ARRAY OF CHAR; Arg2: ARRAY OF CHAR; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[2]);
        CtlC.StrVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16589, arg, ret);
        RETURN CtlC.VarReal(ret)
    END FindB;

    PROCEDURE (this: WorksheetFunction) SearchB* (Arg1: ARRAY OF CHAR; Arg2: ARRAY OF CHAR; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[2]);
        CtlC.StrVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16590, arg, ret);
        RETURN CtlC.VarReal(ret)
    END SearchB;

    PROCEDURE (this: WorksheetFunction) ReplaceB* (Arg1: ARRAY OF CHAR; Arg2: REAL; Arg3: REAL; Arg4: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.StrVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16591, arg, ret);
        RETURN CtlC.VarStr(ret)
    END ReplaceB;

    PROCEDURE (this: WorksheetFunction) RoundUp* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16596, arg, ret);
        RETURN CtlC.VarReal(ret)
    END RoundUp;

    PROCEDURE (this: WorksheetFunction) RoundDown* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16597, arg, ret);
        RETURN CtlC.VarReal(ret)
    END RoundDown;

    PROCEDURE (this: WorksheetFunction) Rank* (Arg1: REAL; Arg2: Range; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.ObjVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16600, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Rank;

    PROCEDURE (this: WorksheetFunction) Days360* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16604, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Days360;

    PROCEDURE (this: WorksheetFunction) Vdb* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL; Arg5: REAL; (* optional *) Arg6: CtlT.Any; Arg7: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[6]);
        CtlC.RealVar(Arg2, arg[5]);
        CtlC.RealVar(Arg3, arg[4]);
        CtlC.RealVar(Arg4, arg[3]);
        CtlC.RealVar(Arg5, arg[2]);
        CtlC.AnyVar(Arg6, arg[1]);
        CtlC.AnyVar(Arg7, arg[0]);
        CtlC.CallParMethod(this, 16606, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Vdb;

    PROCEDURE (this: WorksheetFunction) Median* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16611, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Median;

    PROCEDURE (this: WorksheetFunction) SumProduct* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16612, arg, ret);
        RETURN CtlC.VarReal(ret)
    END SumProduct;

    PROCEDURE (this: WorksheetFunction) Sinh* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16613, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Sinh;

    PROCEDURE (this: WorksheetFunction) Cosh* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16614, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Cosh;

    PROCEDURE (this: WorksheetFunction) Tanh* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16615, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Tanh;

    PROCEDURE (this: WorksheetFunction) Asinh* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16616, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Asinh;

    PROCEDURE (this: WorksheetFunction) Acosh* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16617, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Acosh;

    PROCEDURE (this: WorksheetFunction) Atanh* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16618, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Atanh;

    PROCEDURE (this: WorksheetFunction) DGet* (Arg1: Range; Arg2: CtlT.Any; Arg3: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16619, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DGet;

    PROCEDURE (this: WorksheetFunction) Db* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL; (* optional *) Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.RealVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16631, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Db;

    PROCEDURE (this: WorksheetFunction) Frequency* (Arg1: CtlT.Any; Arg2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16636, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Frequency;

    PROCEDURE (this: WorksheetFunction) AveDev* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16653, arg, ret);
        RETURN CtlC.VarReal(ret)
    END AveDev;

    PROCEDURE (this: WorksheetFunction) BetaDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL; (* optional *) Arg4: CtlT.Any; Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.AnyVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16654, arg, ret);
        RETURN CtlC.VarReal(ret)
    END BetaDist;

    PROCEDURE (this: WorksheetFunction) GammaLn* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16655, arg, ret);
        RETURN CtlC.VarReal(ret)
    END GammaLn;

    PROCEDURE (this: WorksheetFunction) BetaInv* (Arg1: REAL; Arg2: REAL; Arg3: REAL; (* optional *) Arg4: CtlT.Any; Arg5: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[4]);
        CtlC.RealVar(Arg2, arg[3]);
        CtlC.RealVar(Arg3, arg[2]);
        CtlC.AnyVar(Arg4, arg[1]);
        CtlC.AnyVar(Arg5, arg[0]);
        CtlC.CallParMethod(this, 16656, arg, ret);
        RETURN CtlC.VarReal(ret)
    END BetaInv;

    PROCEDURE (this: WorksheetFunction) BinomDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: BOOLEAN): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.BoolVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16657, arg, ret);
        RETURN CtlC.VarReal(ret)
    END BinomDist;

    PROCEDURE (this: WorksheetFunction) ChiDist* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16658, arg, ret);
        RETURN CtlC.VarReal(ret)
    END ChiDist;

    PROCEDURE (this: WorksheetFunction) ChiInv* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16659, arg, ret);
        RETURN CtlC.VarReal(ret)
    END ChiInv;

    PROCEDURE (this: WorksheetFunction) Combin* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16660, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Combin;

    PROCEDURE (this: WorksheetFunction) Confidence* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16661, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Confidence;

    PROCEDURE (this: WorksheetFunction) CritBinom* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16662, arg, ret);
        RETURN CtlC.VarReal(ret)
    END CritBinom;

    PROCEDURE (this: WorksheetFunction) Even* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16663, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Even;

    PROCEDURE (this: WorksheetFunction) ExponDist* (Arg1: REAL; Arg2: REAL; Arg3: BOOLEAN): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.BoolVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16664, arg, ret);
        RETURN CtlC.VarReal(ret)
    END ExponDist;

    PROCEDURE (this: WorksheetFunction) FDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16665, arg, ret);
        RETURN CtlC.VarReal(ret)
    END FDist;

    PROCEDURE (this: WorksheetFunction) FInv* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16666, arg, ret);
        RETURN CtlC.VarReal(ret)
    END FInv;

    PROCEDURE (this: WorksheetFunction) Fisher* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16667, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Fisher;

    PROCEDURE (this: WorksheetFunction) FisherInv* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16668, arg, ret);
        RETURN CtlC.VarReal(ret)
    END FisherInv;

    PROCEDURE (this: WorksheetFunction) Floor* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16669, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Floor;

    PROCEDURE (this: WorksheetFunction) GammaDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: BOOLEAN): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.BoolVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16670, arg, ret);
        RETURN CtlC.VarReal(ret)
    END GammaDist;

    PROCEDURE (this: WorksheetFunction) GammaInv* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16671, arg, ret);
        RETURN CtlC.VarReal(ret)
    END GammaInv;

    PROCEDURE (this: WorksheetFunction) Ceiling* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16672, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Ceiling;

    PROCEDURE (this: WorksheetFunction) HypGeomDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.RealVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16673, arg, ret);
        RETURN CtlC.VarReal(ret)
    END HypGeomDist;

    PROCEDURE (this: WorksheetFunction) LogNormDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16674, arg, ret);
        RETURN CtlC.VarReal(ret)
    END LogNormDist;

    PROCEDURE (this: WorksheetFunction) LogInv* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16675, arg, ret);
        RETURN CtlC.VarReal(ret)
    END LogInv;

    PROCEDURE (this: WorksheetFunction) NegBinomDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16676, arg, ret);
        RETURN CtlC.VarReal(ret)
    END NegBinomDist;

    PROCEDURE (this: WorksheetFunction) NormDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: BOOLEAN): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.BoolVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16677, arg, ret);
        RETURN CtlC.VarReal(ret)
    END NormDist;

    PROCEDURE (this: WorksheetFunction) NormSDist* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16678, arg, ret);
        RETURN CtlC.VarReal(ret)
    END NormSDist;

    PROCEDURE (this: WorksheetFunction) NormInv* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16679, arg, ret);
        RETURN CtlC.VarReal(ret)
    END NormInv;

    PROCEDURE (this: WorksheetFunction) NormSInv* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16680, arg, ret);
        RETURN CtlC.VarReal(ret)
    END NormSInv;

    PROCEDURE (this: WorksheetFunction) Standardize* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16681, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Standardize;

    PROCEDURE (this: WorksheetFunction) Odd* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16682, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Odd;

    PROCEDURE (this: WorksheetFunction) Permut* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16683, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Permut;

    PROCEDURE (this: WorksheetFunction) Poisson* (Arg1: REAL; Arg2: REAL; Arg3: BOOLEAN): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.BoolVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16684, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Poisson;

    PROCEDURE (this: WorksheetFunction) TDist* (Arg1: REAL; Arg2: REAL; Arg3: REAL): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.RealVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16685, arg, ret);
        RETURN CtlC.VarReal(ret)
    END TDist;

    PROCEDURE (this: WorksheetFunction) Weibull* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: BOOLEAN): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.BoolVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16686, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Weibull;

    PROCEDURE (this: WorksheetFunction) SumXMY2* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16687, arg, ret);
        RETURN CtlC.VarReal(ret)
    END SumXMY2;

    PROCEDURE (this: WorksheetFunction) SumX2MY2* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16688, arg, ret);
        RETURN CtlC.VarReal(ret)
    END SumX2MY2;

    PROCEDURE (this: WorksheetFunction) SumX2PY2* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16689, arg, ret);
        RETURN CtlC.VarReal(ret)
    END SumX2PY2;

    PROCEDURE (this: WorksheetFunction) ChiTest* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16690, arg, ret);
        RETURN CtlC.VarReal(ret)
    END ChiTest;

    PROCEDURE (this: WorksheetFunction) Correl* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16691, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Correl;

    PROCEDURE (this: WorksheetFunction) Covar* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16692, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Covar;

    PROCEDURE (this: WorksheetFunction) Forecast* (Arg1: REAL; Arg2: CtlT.Any; Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16693, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Forecast;

    PROCEDURE (this: WorksheetFunction) FTest* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16694, arg, ret);
        RETURN CtlC.VarReal(ret)
    END FTest;

    PROCEDURE (this: WorksheetFunction) Intercept* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16695, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Intercept;

    PROCEDURE (this: WorksheetFunction) Pearson* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16696, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Pearson;

    PROCEDURE (this: WorksheetFunction) RSq* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16697, arg, ret);
        RETURN CtlC.VarReal(ret)
    END RSq;

    PROCEDURE (this: WorksheetFunction) StEyx* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16698, arg, ret);
        RETURN CtlC.VarReal(ret)
    END StEyx;

    PROCEDURE (this: WorksheetFunction) Slope* (Arg1: CtlT.Any; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16699, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Slope;

    PROCEDURE (this: WorksheetFunction) TTest* (Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: REAL; Arg4: REAL): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.RealVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16700, arg, ret);
        RETURN CtlC.VarReal(ret)
    END TTest;

    PROCEDURE (this: WorksheetFunction) Prob* (Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: REAL; (* optional *) Arg4: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[3]);
        CtlC.AnyVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.AnyVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16701, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Prob;

    PROCEDURE (this: WorksheetFunction) DevSq* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16702, arg, ret);
        RETURN CtlC.VarReal(ret)
    END DevSq;

    PROCEDURE (this: WorksheetFunction) GeoMean* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16703, arg, ret);
        RETURN CtlC.VarReal(ret)
    END GeoMean;

    PROCEDURE (this: WorksheetFunction) HarMean* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16704, arg, ret);
        RETURN CtlC.VarReal(ret)
    END HarMean;

    PROCEDURE (this: WorksheetFunction) SumSq* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16705, arg, ret);
        RETURN CtlC.VarReal(ret)
    END SumSq;

    PROCEDURE (this: WorksheetFunction) Kurt* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16706, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Kurt;

    PROCEDURE (this: WorksheetFunction) Skew* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16707, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Skew;

    PROCEDURE (this: WorksheetFunction) ZTest* (Arg1: CtlT.Any; Arg2: REAL; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16708, arg, ret);
        RETURN CtlC.VarReal(ret)
    END ZTest;

    PROCEDURE (this: WorksheetFunction) Large* (Arg1: CtlT.Any; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16709, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Large;

    PROCEDURE (this: WorksheetFunction) Small* (Arg1: CtlT.Any; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16710, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Small;

    PROCEDURE (this: WorksheetFunction) Quartile* (Arg1: CtlT.Any; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16711, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Quartile;

    PROCEDURE (this: WorksheetFunction) Percentile* (Arg1: CtlT.Any; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16712, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Percentile;

    PROCEDURE (this: WorksheetFunction) PercentRank* (Arg1: CtlT.Any; Arg2: REAL; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[2]);
        CtlC.RealVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16713, arg, ret);
        RETURN CtlC.VarReal(ret)
    END PercentRank;

    PROCEDURE (this: WorksheetFunction) Mode* (Arg1: CtlT.Any; (* optional *) Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16714, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Mode;

    PROCEDURE (this: WorksheetFunction) TrimMean* (Arg1: CtlT.Any; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16715, arg, ret);
        RETURN CtlC.VarReal(ret)
    END TrimMean;

    PROCEDURE (this: WorksheetFunction) TInv* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16716, arg, ret);
        RETURN CtlC.VarReal(ret)
    END TInv;

    PROCEDURE (this: WorksheetFunction) Power* (Arg1: REAL; Arg2: REAL): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.RealVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16721, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Power;

    PROCEDURE (this: WorksheetFunction) Radians* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16726, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Radians;

    PROCEDURE (this: WorksheetFunction) Degrees* (Arg1: REAL): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16727, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Degrees;

    PROCEDURE (this: WorksheetFunction) Subtotal* (Arg1: REAL; Arg2: Range; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[29]);
        CtlC.ObjVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 16728, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Subtotal;

    PROCEDURE (this: WorksheetFunction) SumIf* (Arg1: Range; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[2]);
        CtlC.AnyVar(Arg2, arg[1]);
        CtlC.AnyVar(Arg3, arg[0]);
        CtlC.CallParMethod(this, 16729, arg, ret);
        RETURN CtlC.VarReal(ret)
    END SumIf;

    PROCEDURE (this: WorksheetFunction) CountIf* (Arg1: Range; Arg2: CtlT.Any): REAL, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16730, arg, ret);
        RETURN CtlC.VarReal(ret)
    END CountIf;

    PROCEDURE (this: WorksheetFunction) CountBlank* (Arg1: Range): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16731, arg, ret);
        RETURN CtlC.VarReal(ret)
    END CountBlank;

    PROCEDURE (this: WorksheetFunction) Ispmt* (Arg1: REAL; Arg2: REAL; Arg3: REAL; Arg4: REAL): REAL, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[3]);
        CtlC.RealVar(Arg2, arg[2]);
        CtlC.RealVar(Arg3, arg[1]);
        CtlC.RealVar(Arg4, arg[0]);
        CtlC.CallParMethod(this, 16734, arg, ret);
        RETURN CtlC.VarReal(ret)
    END Ispmt;

    PROCEDURE (this: WorksheetFunction) Roman* (Arg1: REAL; (* optional *) Arg2: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Arg1, arg[1]);
        CtlC.AnyVar(Arg2, arg[0]);
        CtlC.CallParMethod(this, 16738, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Roman;

    PROCEDURE (this: WorksheetFunction) Asc* (Arg1: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16598, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Asc;

    PROCEDURE (this: WorksheetFunction) Dbcs* (Arg1: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Arg1, arg[0]);
        CtlC.CallParMethod(this, 16599, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Dbcs;


    (* ---------- Range ---------- *)

    PROCEDURE (this: Range) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Range) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Range) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Range) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: Range) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: Range) PUTAddIndent* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Range) Address* (RowAbsolute: CtlT.Any; ColumnAbsolute: CtlT.Any; ReferenceStyle: XlReferenceStyle; (* optional *) External: CtlT.Any; RelativeTo: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowAbsolute, arg[4]);
        CtlC.AnyVar(ColumnAbsolute, arg[3]);
        CtlC.IntVar(ReferenceStyle, arg[2]);
        CtlC.AnyVar(External, arg[1]);
        CtlC.AnyVar(RelativeTo, arg[0]);
        CtlC.CallGetMethod(this, 236, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Address;

    PROCEDURE (this: Range) AddressLocal* (RowAbsolute: CtlT.Any; ColumnAbsolute: CtlT.Any; ReferenceStyle: XlReferenceStyle; (* optional *) External: CtlT.Any; RelativeTo: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowAbsolute, arg[4]);
        CtlC.AnyVar(ColumnAbsolute, arg[3]);
        CtlC.IntVar(ReferenceStyle, arg[2]);
        CtlC.AnyVar(External, arg[1]);
        CtlC.AnyVar(RelativeTo, arg[0]);
        CtlC.CallGetMethod(this, 437, arg, ret);
        RETURN CtlC.VarStr(ret)
    END AddressLocal;

    PROCEDURE (this: Range) AdvancedFilter* (Action: XlFilterAction; (* optional *) CriteriaRange: CtlT.Any; CopyToRange: CtlT.Any; Unique: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Action, arg[3]);
        CtlC.AnyVar(CriteriaRange, arg[2]);
        CtlC.AnyVar(CopyToRange, arg[1]);
        CtlC.AnyVar(Unique, arg[0]);
        CtlC.CallParMethod(this, 876, arg, NIL);
    END AdvancedFilter;

    PROCEDURE (this: Range) ApplyNames* (Names: CtlT.Any; IgnoreRelativeAbsolute: CtlT.Any; UseRowColumnNames: CtlT.Any; OmitColumn: CtlT.Any; OmitRow: CtlT.Any; Order: XlApplyNamesOrder; (* optional *) AppendLast: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Names, arg[6]);
        CtlC.AnyVar(IgnoreRelativeAbsolute, arg[5]);
        CtlC.AnyVar(UseRowColumnNames, arg[4]);
        CtlC.AnyVar(OmitColumn, arg[3]);
        CtlC.AnyVar(OmitRow, arg[2]);
        CtlC.IntVar(Order, arg[1]);
        CtlC.AnyVar(AppendLast, arg[0]);
        CtlC.CallParMethod(this, 441, arg, NIL);
    END ApplyNames;

    PROCEDURE (this: Range) ApplyOutlineStyles* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 448, NIL);
    END ApplyOutlineStyles;

    PROCEDURE (this: Range) Areas* (): Areas, NEW;
    BEGIN
        RETURN ThisAreas(CtlC.GetAny(this, 568))
    END Areas;

    PROCEDURE (this: Range) AutoComplete* (String: ARRAY OF CHAR): CtlT.Strg, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(String, arg[0]);
        CtlC.CallParMethod(this, 1185, arg, ret);
        RETURN CtlC.VarStr(ret)
    END AutoComplete;

    PROCEDURE (this: Range) AutoFill* (Destination: Range; Type: XlAutoFillType), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Destination, arg[1]);
        CtlC.IntVar(Type, arg[0]);
        CtlC.CallParMethod(this, 449, arg, NIL);
    END AutoFill;

    PROCEDURE (this: Range) AutoFilter* (Field: CtlT.Any; Criteria1: CtlT.Any; Operator: XlAutoFilterOperator; (* optional *) Criteria2: CtlT.Any; VisibleDropDown: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Field, arg[4]);
        CtlC.AnyVar(Criteria1, arg[3]);
        CtlC.IntVar(Operator, arg[2]);
        CtlC.AnyVar(Criteria2, arg[1]);
        CtlC.AnyVar(VisibleDropDown, arg[0]);
        CtlC.CallParMethod(this, 793, arg, NIL);
    END AutoFilter;

    PROCEDURE (this: Range) AutoFit* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 237, NIL);
    END AutoFit;

    PROCEDURE (this: Range) AutoFormat* (Format: XlRangeAutoFormat; (* optional *) Number: CtlT.Any; Font: CtlT.Any; Alignment: CtlT.Any; Border: CtlT.Any; Pattern: CtlT.Any; Width: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Format, arg[6]);
        CtlC.AnyVar(Number, arg[5]);
        CtlC.AnyVar(Font, arg[4]);
        CtlC.AnyVar(Alignment, arg[3]);
        CtlC.AnyVar(Border, arg[2]);
        CtlC.AnyVar(Pattern, arg[1]);
        CtlC.AnyVar(Width, arg[0]);
        CtlC.CallParMethod(this, 114, arg, NIL);
    END AutoFormat;

    PROCEDURE (this: Range) AutoOutline* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1036, NIL);
    END AutoOutline;

    PROCEDURE (this: Range) BorderAround* (LineStyle: CtlT.Any; Weight: XlBorderWeight; ColorIndex: XlColorIndex; (* optional *) Color: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(LineStyle, arg[3]);
        CtlC.IntVar(Weight, arg[2]);
        CtlC.IntVar(ColorIndex, arg[1]);
        CtlC.AnyVar(Color, arg[0]);
        CtlC.CallParMethod(this, 1067, arg, NIL);
    END BorderAround;

    PROCEDURE (this: Range) Borders* (): Borders, NEW;
    BEGIN
        RETURN ThisBorders(CtlC.GetAny(this, 435))
    END Borders;

    PROCEDURE (this: Range) Calculate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 279, NIL);
    END Calculate;

    PROCEDURE (this: Range) Cells* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 238))
    END Cells;

    PROCEDURE (this: Range) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Range) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Range) Clear* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 111, NIL);
    END Clear;

    PROCEDURE (this: Range) ClearContents* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 113, NIL);
    END ClearContents;

    PROCEDURE (this: Range) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: Range) ClearNotes* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 239, NIL);
    END ClearNotes;

    PROCEDURE (this: Range) ClearOutline* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1037, NIL);
    END ClearOutline;

    PROCEDURE (this: Range) Column* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 240)
    END Column;

    PROCEDURE (this: Range) ColumnDifferences* (Comparison: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Comparison, arg[0]);
        CtlC.CallParMethod(this, 510, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END ColumnDifferences;

    PROCEDURE (this: Range) Columns* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 241))
    END Columns;

    PROCEDURE (this: Range) ColumnWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 242)
    END ColumnWidth;

    PROCEDURE (this: Range) PUTColumnWidth* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 242, p1)
    END PUTColumnWidth;

    PROCEDURE (this: Range) Consolidate* ((* optional *) Sources: CtlT.Any; Function: CtlT.Any; TopRow: CtlT.Any; LeftColumn: CtlT.Any; CreateLinks: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Sources, arg[4]);
        CtlC.AnyVar(Function, arg[3]);
        CtlC.AnyVar(TopRow, arg[2]);
        CtlC.AnyVar(LeftColumn, arg[1]);
        CtlC.AnyVar(CreateLinks, arg[0]);
        CtlC.CallParMethod(this, 482, arg, NIL);
    END Consolidate;

    PROCEDURE (this: Range) Copy* ((* optional *) Destination: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: Range) CopyFromRecordset* (Data: CtlT.IUnknown; (* optional *) MaxRows: CtlT.Any; MaxColumns: CtlT.Any): INTEGER, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntfceVar(Data, arg[2]);
        CtlC.AnyVar(MaxRows, arg[1]);
        CtlC.AnyVar(MaxColumns, arg[0]);
        CtlC.CallParMethod(this, 1152, arg, ret);
        RETURN CtlC.VarInt(ret)
    END CopyFromRecordset;

    PROCEDURE (this: Range) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Range) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Range) CreateNames* ((* optional *) Top: CtlT.Any; Left: CtlT.Any; Bottom: CtlT.Any; Right: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Top, arg[3]);
        CtlC.AnyVar(Left, arg[2]);
        CtlC.AnyVar(Bottom, arg[1]);
        CtlC.AnyVar(Right, arg[0]);
        CtlC.CallParMethod(this, 457, arg, NIL);
    END CreateNames;

    PROCEDURE (this: Range) CreatePublisher* (Edition: CtlT.Any; Appearance: XlPictureAppearance; (* optional *) ContainsPICT: CtlT.Any; ContainsBIFF: CtlT.Any; ContainsRTF: CtlT.Any; ContainsVALU: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Edition, arg[5]);
        CtlC.IntVar(Appearance, arg[4]);
        CtlC.AnyVar(ContainsPICT, arg[3]);
        CtlC.AnyVar(ContainsBIFF, arg[2]);
        CtlC.AnyVar(ContainsRTF, arg[1]);
        CtlC.AnyVar(ContainsVALU, arg[0]);
        CtlC.CallParMethod(this, 458, arg, NIL);
    END CreatePublisher;

    PROCEDURE (this: Range) CurrentArray* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 501))
    END CurrentArray;

    PROCEDURE (this: Range) CurrentRegion* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 243))
    END CurrentRegion;

    PROCEDURE (this: Range) Cut* ((* optional *) Destination: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[0]);
        CtlC.CallParMethod(this, 565, arg, NIL);
    END Cut;

    PROCEDURE (this: Range) DataSeries* (Rowcol: CtlT.Any; Type: XlDataSeriesType; Date: XlDataSeriesDate; (* optional *) Step: CtlT.Any; Stop: CtlT.Any; Trend: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Rowcol, arg[5]);
        CtlC.IntVar(Type, arg[4]);
        CtlC.IntVar(Date, arg[3]);
        CtlC.AnyVar(Step, arg[2]);
        CtlC.AnyVar(Stop, arg[1]);
        CtlC.AnyVar(Trend, arg[0]);
        CtlC.CallParMethod(this, 464, arg, NIL);
    END DataSeries;

    PROCEDURE (this: Range) _Default* ((* optional *) RowIndex: CtlT.Any; ColumnIndex: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[1]);
        CtlC.AnyVar(ColumnIndex, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Default;

    PROCEDURE (this: Range) PUT_Default* (RowIndex: CtlT.Any; (* optional *) ColumnIndex: CtlT.Any; p3: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[2]);
        CtlC.AnyVar(ColumnIndex, arg[1]);
        CtlC.AnyVar(p3, arg[0]);
        CtlC.CallPutMethod(this, 0, arg, NIL);
    END PUT_Default;

    PROCEDURE (this: Range) Delete* ((* optional *) Shift: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Shift, arg[0]);
        CtlC.CallParMethod(this, 117, arg, NIL);
    END Delete;

    PROCEDURE (this: Range) Dependents* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 543))
    END Dependents;

    PROCEDURE (this: Range) DialogBox* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 245, ret);
        RETURN CtlC.VarAny(ret)
    END DialogBox;

    PROCEDURE (this: Range) DirectDependents* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 545))
    END DirectDependents;

    PROCEDURE (this: Range) DirectPrecedents* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 546))
    END DirectPrecedents;

    PROCEDURE (this: Range) EditionOptions* (Type: XlEditionType; Option: XlEditionOptionsOption; Name: CtlT.Any; Reference: CtlT.Any; Appearance: XlPictureAppearance; ChartSize: XlPictureAppearance; (* optional *) Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[6]);
        CtlC.IntVar(Option, arg[5]);
        CtlC.AnyVar(Name, arg[4]);
        CtlC.AnyVar(Reference, arg[3]);
        CtlC.IntVar(Appearance, arg[2]);
        CtlC.IntVar(ChartSize, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 1131, arg, ret);
        RETURN CtlC.VarAny(ret)
    END EditionOptions;

    PROCEDURE (this: Range) End* (Direction: XlDirection): Range, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Direction, arg[0]);
        CtlC.CallGetMethod(this, 500, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END End;

    PROCEDURE (this: Range) EntireColumn* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 246))
    END EntireColumn;

    PROCEDURE (this: Range) EntireRow* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 247))
    END EntireRow;

    PROCEDURE (this: Range) FillDown* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 248, NIL);
    END FillDown;

    PROCEDURE (this: Range) FillLeft* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 249, NIL);
    END FillLeft;

    PROCEDURE (this: Range) FillRight* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 250, NIL);
    END FillRight;

    PROCEDURE (this: Range) FillUp* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 251, NIL);
    END FillUp;

    PROCEDURE (this: Range) Find* (What: CtlT.Any; After: CtlT.Any; LookIn: CtlT.Any; LookAt: CtlT.Any; SearchOrder: CtlT.Any; SearchDirection: XlSearchDirection; (* optional *) MatchCase: CtlT.Any; MatchByte: CtlT.Any; MatchControlCharacters: CtlT.Any; MatchDiacritics: CtlT.Any; MatchKashida: CtlT.Any; MatchAlefHamza: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 12 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(What, arg[11]);
        CtlC.AnyVar(After, arg[10]);
        CtlC.AnyVar(LookIn, arg[9]);
        CtlC.AnyVar(LookAt, arg[8]);
        CtlC.AnyVar(SearchOrder, arg[7]);
        CtlC.IntVar(SearchDirection, arg[6]);
        CtlC.AnyVar(MatchCase, arg[5]);
        CtlC.AnyVar(MatchByte, arg[4]);
        CtlC.AnyVar(MatchControlCharacters, arg[3]);
        CtlC.AnyVar(MatchDiacritics, arg[2]);
        CtlC.AnyVar(MatchKashida, arg[1]);
        CtlC.AnyVar(MatchAlefHamza, arg[0]);
        CtlC.CallParMethod(this, 398, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Find;

    PROCEDURE (this: Range) FindNext* ((* optional *) After: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 399, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END FindNext;

    PROCEDURE (this: Range) FindPrevious* ((* optional *) After: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 400, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END FindPrevious;

    PROCEDURE (this: Range) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Range) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: Range) PUTFormula* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Range) FormulaArray* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 586)
    END FormulaArray;

    PROCEDURE (this: Range) PUTFormulaArray* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 586, p1)
    END PUTFormulaArray;

    PROCEDURE (this: Range) FormulaLabel* (): XlFormulaLabel, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1380)
    END FormulaLabel;

    PROCEDURE (this: Range) PUTFormulaLabel* (p1: XlFormulaLabel), NEW;
    BEGIN
        CtlC.PutInt(this, 1380, p1)
    END PUTFormulaLabel;

    PROCEDURE (this: Range) FormulaHidden* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 262)
    END FormulaHidden;

    PROCEDURE (this: Range) PUTFormulaHidden* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 262, p1)
    END PUTFormulaHidden;

    PROCEDURE (this: Range) FormulaLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 263)
    END FormulaLocal;

    PROCEDURE (this: Range) PUTFormulaLocal* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 263, p1)
    END PUTFormulaLocal;

    PROCEDURE (this: Range) FormulaR1C1* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 264)
    END FormulaR1C1;

    PROCEDURE (this: Range) PUTFormulaR1C1* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 264, p1)
    END PUTFormulaR1C1;

    PROCEDURE (this: Range) FormulaR1C1Local* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 265)
    END FormulaR1C1Local;

    PROCEDURE (this: Range) PUTFormulaR1C1Local* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 265, p1)
    END PUTFormulaR1C1Local;

    PROCEDURE (this: Range) FunctionWizard* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 571, NIL);
    END FunctionWizard;

    PROCEDURE (this: Range) GoalSeek* (Goal: CtlT.Any; ChangingCell: Range): BOOLEAN, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Goal, arg[1]);
        CtlC.ObjVar(ChangingCell, arg[0]);
        CtlC.CallParMethod(this, 472, arg, ret);
        RETURN CtlC.VarBool(ret)
    END GoalSeek;

    PROCEDURE (this: Range) Group* ((* optional *) Start: CtlT.Any; End: CtlT.Any; By: CtlT.Any; Periods: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[3]);
        CtlC.AnyVar(End, arg[2]);
        CtlC.AnyVar(By, arg[1]);
        CtlC.AnyVar(Periods, arg[0]);
        CtlC.CallParMethod(this, 46, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Range) HasArray* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 266)
    END HasArray;

    PROCEDURE (this: Range) HasFormula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 267)
    END HasFormula;

    PROCEDURE (this: Range) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Range) Hidden* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 268)
    END Hidden;

    PROCEDURE (this: Range) PUTHidden* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 268, p1)
    END PUTHidden;

    PROCEDURE (this: Range) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Range) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Range) IndentLevel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 201)
    END IndentLevel;

    PROCEDURE (this: Range) PUTIndentLevel* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 201, p1)
    END PUTIndentLevel;

    PROCEDURE (this: Range) InsertIndent* (InsertAmount: INTEGER), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(InsertAmount, arg[0]);
        CtlC.CallParMethod(this, 1381, arg, NIL);
    END InsertIndent;

    PROCEDURE (this: Range) Insert* ((* optional *) Shift: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Shift, arg[0]);
        CtlC.CallParMethod(this, 252, arg, NIL);
    END Insert;

    PROCEDURE (this: Range) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Range) Item* (RowIndex: CtlT.Any; (* optional *) ColumnIndex: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[1]);
        CtlC.AnyVar(ColumnIndex, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Range) PUTItem* (RowIndex: CtlT.Any; ColumnIndex: CtlT.Any; (* optional *) p3: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[2]);
        CtlC.AnyVar(ColumnIndex, arg[1]);
        CtlC.AnyVar(p3, arg[0]);
        CtlC.CallPutMethod(this, 170, arg, NIL);
    END PUTItem;

    PROCEDURE (this: Range) Justify* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 495, NIL);
    END Justify;

    PROCEDURE (this: Range) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Range) ListHeaderRows* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1187)
    END ListHeaderRows;

    PROCEDURE (this: Range) ListNames* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 253, NIL);
    END ListNames;

    PROCEDURE (this: Range) LocationInTable* (): XlLocationInTable, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 691)
    END LocationInTable;

    PROCEDURE (this: Range) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Range) PUTLocked* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Range) Merge* ((* optional *) Across: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Across, arg[0]);
        CtlC.CallParMethod(this, 564, arg, NIL);
    END Merge;

    PROCEDURE (this: Range) UnMerge* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1384, NIL);
    END UnMerge;

    PROCEDURE (this: Range) MergeArea* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1385))
    END MergeArea;

    PROCEDURE (this: Range) MergeCells* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 208)
    END MergeCells;

    PROCEDURE (this: Range) PUTMergeCells* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 208, p1)
    END PUTMergeCells;

    PROCEDURE (this: Range) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Range) PUTName* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Range) NavigateArrow* ((* optional *) TowardPrecedent: CtlT.Any; ArrowNumber: CtlT.Any; LinkNumber: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(TowardPrecedent, arg[2]);
        CtlC.AnyVar(ArrowNumber, arg[1]);
        CtlC.AnyVar(LinkNumber, arg[0]);
        CtlC.CallParMethod(this, 1032, arg, NIL);
    END NavigateArrow;

    PROCEDURE (this: Range) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Range) Next* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 502))
    END Next;

    PROCEDURE (this: Range) NoteText* ((* optional *) Text: CtlT.Any; Start: CtlT.Any; Length: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[2]);
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 1127, arg, ret);
        RETURN CtlC.VarStr(ret)
    END NoteText;

    PROCEDURE (this: Range) NumberFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 193)
    END NumberFormat;

    PROCEDURE (this: Range) PUTNumberFormat* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 193, p1)
    END PUTNumberFormat;

    PROCEDURE (this: Range) NumberFormatLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1097)
    END NumberFormatLocal;

    PROCEDURE (this: Range) PUTNumberFormatLocal* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1097, p1)
    END PUTNumberFormatLocal;

    PROCEDURE (this: Range) Offset* ((* optional *) RowOffset: CtlT.Any; ColumnOffset: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowOffset, arg[1]);
        CtlC.AnyVar(ColumnOffset, arg[0]);
        CtlC.CallGetMethod(this, 254, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Offset;

    PROCEDURE (this: Range) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Range) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Range) OutlineLevel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 271)
    END OutlineLevel;

    PROCEDURE (this: Range) PUTOutlineLevel* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 271, p1)
    END PUTOutlineLevel;

    PROCEDURE (this: Range) PageBreak* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 255)
    END PageBreak;

    PROCEDURE (this: Range) PUTPageBreak* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 255, p1)
    END PUTPageBreak;

    PROCEDURE (this: Range) Parse* ((* optional *) ParseLine: CtlT.Any; Destination: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ParseLine, arg[1]);
        CtlC.AnyVar(Destination, arg[0]);
        CtlC.CallParMethod(this, 477, arg, NIL);
    END Parse;

    PROCEDURE (this: Range) PasteSpecial* (Paste: XlPasteType; Operation: XlPasteSpecialOperation; (* optional *) SkipBlanks: CtlT.Any; Transpose: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Paste, arg[3]);
        CtlC.IntVar(Operation, arg[2]);
        CtlC.AnyVar(SkipBlanks, arg[1]);
        CtlC.AnyVar(Transpose, arg[0]);
        CtlC.CallParMethod(this, 1027, arg, NIL);
    END PasteSpecial;

    PROCEDURE (this: Range) PivotField* (): PivotField, NEW;
    BEGIN
        RETURN ThisPivotField(CtlC.GetAny(this, 731))
    END PivotField;

    PROCEDURE (this: Range) PivotItem* (): PivotItem, NEW;
    BEGIN
        RETURN ThisPivotItem(CtlC.GetAny(this, 740))
    END PivotItem;

    PROCEDURE (this: Range) PivotTable* (): PivotTable, NEW;
    BEGIN
        RETURN ThisPivotTable(CtlC.GetAny(this, 716))
    END PivotTable;

    PROCEDURE (this: Range) Precedents* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 544))
    END Precedents;

    PROCEDURE (this: Range) PrefixCharacter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 504)
    END PrefixCharacter;

    PROCEDURE (this: Range) Previous* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 503))
    END Previous;

    PROCEDURE (this: Range) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: Range) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: Range) QueryTable* (): QueryTable, NEW;
    BEGIN
        RETURN This_QueryTable(CtlC.GetAny(this, 1386))
    END QueryTable;

    PROCEDURE (this: Range) Range* (Cell1: CtlT.Any; (* optional *) Cell2: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallGetMethod(this, 197, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Range;

    PROCEDURE (this: Range) RemoveSubtotal* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 883, NIL);
    END RemoveSubtotal;

    PROCEDURE (this: Range) Replace* (What: CtlT.Any; Replacement: CtlT.Any; (* optional *) LookAt: CtlT.Any; SearchOrder: CtlT.Any; MatchCase: CtlT.Any; MatchByte: CtlT.Any; MatchControlCharacters: CtlT.Any; MatchDiacritics: CtlT.Any; MatchKashida: CtlT.Any; MatchAlefHamza: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 10 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(What, arg[9]);
        CtlC.AnyVar(Replacement, arg[8]);
        CtlC.AnyVar(LookAt, arg[7]);
        CtlC.AnyVar(SearchOrder, arg[6]);
        CtlC.AnyVar(MatchCase, arg[5]);
        CtlC.AnyVar(MatchByte, arg[4]);
        CtlC.AnyVar(MatchControlCharacters, arg[3]);
        CtlC.AnyVar(MatchDiacritics, arg[2]);
        CtlC.AnyVar(MatchKashida, arg[1]);
        CtlC.AnyVar(MatchAlefHamza, arg[0]);
        CtlC.CallParMethod(this, 226, arg, ret);
        RETURN CtlC.VarBool(ret)
    END Replace;

    PROCEDURE (this: Range) Resize* ((* optional *) RowSize: CtlT.Any; ColumnSize: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowSize, arg[1]);
        CtlC.AnyVar(ColumnSize, arg[0]);
        CtlC.CallGetMethod(this, 256, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Resize;

    PROCEDURE (this: Range) Row* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 257)
    END Row;

    PROCEDURE (this: Range) RowDifferences* (Comparison: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Comparison, arg[0]);
        CtlC.CallParMethod(this, 511, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END RowDifferences;

    PROCEDURE (this: Range) RowHeight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 272)
    END RowHeight;

    PROCEDURE (this: Range) PUTRowHeight* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 272, p1)
    END PUTRowHeight;

    PROCEDURE (this: Range) Rows* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 258))
    END Rows;

    PROCEDURE (this: Range) Run* ((* optional *) Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 259, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Run;

    PROCEDURE (this: Range) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Range) Show* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 496, NIL);
    END Show;

    PROCEDURE (this: Range) ShowDependents* ((* optional *) Remove: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Remove, arg[0]);
        CtlC.CallParMethod(this, 877, arg, NIL);
    END ShowDependents;

    PROCEDURE (this: Range) ShowDetail* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 585)
    END ShowDetail;

    PROCEDURE (this: Range) PUTShowDetail* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 585, p1)
    END PUTShowDetail;

    PROCEDURE (this: Range) ShowErrors* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 878, NIL);
    END ShowErrors;

    PROCEDURE (this: Range) ShowPrecedents* ((* optional *) Remove: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Remove, arg[0]);
        CtlC.CallParMethod(this, 879, arg, NIL);
    END ShowPrecedents;

    PROCEDURE (this: Range) ShrinkToFit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 209)
    END ShrinkToFit;

    PROCEDURE (this: Range) PUTShrinkToFit* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 209, p1)
    END PUTShrinkToFit;

    PROCEDURE (this: Range) Sort* (Key1: CtlT.Any; Order1: XlSortOrder; Key2: CtlT.Any; Type: CtlT.Any; Order2: XlSortOrder; Key3: CtlT.Any; Order3: XlSortOrder; Header: XlYesNoGuess; OrderCustom: CtlT.Any; MatchCase: CtlT.Any; Orientation: XlSortOrientation; SortMethod: XlSortMethod; (* optional *) IgnoreControlCharacters: CtlT.Any; IgnoreDiacritics: CtlT.Any; IgnoreKashida: CtlT.Any), NEW;
        VAR arg: ARRAY 15 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Key1, arg[14]);
        CtlC.IntVar(Order1, arg[13]);
        CtlC.AnyVar(Key2, arg[12]);
        CtlC.AnyVar(Type, arg[11]);
        CtlC.IntVar(Order2, arg[10]);
        CtlC.AnyVar(Key3, arg[9]);
        CtlC.IntVar(Order3, arg[8]);
        CtlC.IntVar(Header, arg[7]);
        CtlC.AnyVar(OrderCustom, arg[6]);
        CtlC.AnyVar(MatchCase, arg[5]);
        CtlC.IntVar(Orientation, arg[4]);
        CtlC.IntVar(SortMethod, arg[3]);
        CtlC.AnyVar(IgnoreControlCharacters, arg[2]);
        CtlC.AnyVar(IgnoreDiacritics, arg[1]);
        CtlC.AnyVar(IgnoreKashida, arg[0]);
        CtlC.CallParMethod(this, 880, arg, NIL);
    END Sort;

    PROCEDURE (this: Range) SortSpecial* (SortMethod: XlSortMethod; Key1: CtlT.Any; Order1: XlSortOrder; Type: CtlT.Any; Key2: CtlT.Any; Order2: XlSortOrder; Key3: CtlT.Any; Order3: XlSortOrder; Header: XlYesNoGuess; OrderCustom: CtlT.Any; MatchCase: CtlT.Any; Orientation: XlSortOrientation), NEW;
        VAR arg: ARRAY 12 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(SortMethod, arg[11]);
        CtlC.AnyVar(Key1, arg[10]);
        CtlC.IntVar(Order1, arg[9]);
        CtlC.AnyVar(Type, arg[8]);
        CtlC.AnyVar(Key2, arg[7]);
        CtlC.IntVar(Order2, arg[6]);
        CtlC.AnyVar(Key3, arg[5]);
        CtlC.IntVar(Order3, arg[4]);
        CtlC.IntVar(Header, arg[3]);
        CtlC.AnyVar(OrderCustom, arg[2]);
        CtlC.AnyVar(MatchCase, arg[1]);
        CtlC.IntVar(Orientation, arg[0]);
        CtlC.CallParMethod(this, 881, arg, NIL);
    END SortSpecial;

    PROCEDURE (this: Range) SoundNote* (): SoundNote, NEW;
    BEGIN
        RETURN ThisSoundNote(CtlC.GetAny(this, 916))
    END SoundNote;

    PROCEDURE (this: Range) SpecialCells* (Type: XlCellType; (* optional *) Value: CtlT.Any): Range, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[1]);
        CtlC.AnyVar(Value, arg[0]);
        CtlC.CallParMethod(this, 410, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END SpecialCells;

    PROCEDURE (this: Range) Style* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 260)
    END Style;

    PROCEDURE (this: Range) PUTStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 260, p1)
    END PUTStyle;

    PROCEDURE (this: Range) SubscribeTo* (Edition: ARRAY OF CHAR; Format: XlSubscribeToFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Edition, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 481, arg, NIL);
    END SubscribeTo;

    PROCEDURE (this: Range) Subtotal* (GroupBy: INTEGER; Function: XlConsolidationFunction; TotalList: CtlT.Any; Replace: CtlT.Any; PageBreaks: CtlT.Any; SummaryBelowData: XlSummaryRow), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(GroupBy, arg[5]);
        CtlC.IntVar(Function, arg[4]);
        CtlC.AnyVar(TotalList, arg[3]);
        CtlC.AnyVar(Replace, arg[2]);
        CtlC.AnyVar(PageBreaks, arg[1]);
        CtlC.IntVar(SummaryBelowData, arg[0]);
        CtlC.CallParMethod(this, 882, arg, NIL);
    END Subtotal;

    PROCEDURE (this: Range) Summary* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 273)
    END Summary;

    PROCEDURE (this: Range) Table* ((* optional *) RowInput: CtlT.Any; ColumnInput: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowInput, arg[1]);
        CtlC.AnyVar(ColumnInput, arg[0]);
        CtlC.CallParMethod(this, 497, arg, NIL);
    END Table;

    PROCEDURE (this: Range) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: Range) TextToColumns* (Destination: CtlT.Any; DataType: XlTextParsingType; TextQualifier: XlTextQualifier; (* optional *) ConsecutiveDelimiter: CtlT.Any; Tab: CtlT.Any; Semicolon: CtlT.Any; Comma: CtlT.Any; Space: CtlT.Any; Other: CtlT.Any; OtherChar: CtlT.Any; FieldInfo: CtlT.Any), NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[10]);
        CtlC.IntVar(DataType, arg[9]);
        CtlC.IntVar(TextQualifier, arg[8]);
        CtlC.AnyVar(ConsecutiveDelimiter, arg[7]);
        CtlC.AnyVar(Tab, arg[6]);
        CtlC.AnyVar(Semicolon, arg[5]);
        CtlC.AnyVar(Comma, arg[4]);
        CtlC.AnyVar(Space, arg[3]);
        CtlC.AnyVar(Other, arg[2]);
        CtlC.AnyVar(OtherChar, arg[1]);
        CtlC.AnyVar(FieldInfo, arg[0]);
        CtlC.CallParMethod(this, 1040, arg, NIL);
    END TextToColumns;

    PROCEDURE (this: Range) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Range) Ungroup* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 244, NIL);
    END Ungroup;

    PROCEDURE (this: Range) UseStandardHeight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 274)
    END UseStandardHeight;

    PROCEDURE (this: Range) PUTUseStandardHeight* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 274, p1)
    END PUTUseStandardHeight;

    PROCEDURE (this: Range) UseStandardWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 275)
    END UseStandardWidth;

    PROCEDURE (this: Range) PUTUseStandardWidth* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 275, p1)
    END PUTUseStandardWidth;

    PROCEDURE (this: Range) Validation* (): Validation, NEW;
    BEGIN
        RETURN ThisValidation(CtlC.GetAny(this, 1387))
    END Validation;

    PROCEDURE (this: Range) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Range) PUTValue* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: Range) Value2* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1388)
    END Value2;

    PROCEDURE (this: Range) PUTValue2* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1388, p1)
    END PUTValue2;

    PROCEDURE (this: Range) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Range) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Range) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Range) Worksheet* (): Worksheet, NEW;
    BEGIN
        RETURN This_Worksheet(CtlC.GetAny(this, 348))
    END Worksheet;

    PROCEDURE (this: Range) WrapText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 276)
    END WrapText;

    PROCEDURE (this: Range) PUTWrapText* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 276, p1)
    END PUTWrapText;

    PROCEDURE (this: Range) AddComment* ((* optional *) Text: CtlT.Any): Comment, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[0]);
        CtlC.CallParMethod(this, 1389, arg, ret);
        RETURN ThisComment(CtlC.VarAny(ret))
    END AddComment;

    PROCEDURE (this: Range) Comment* (): Comment, NEW;
    BEGIN
        RETURN ThisComment(CtlC.GetAny(this, 910))
    END Comment;

    PROCEDURE (this: Range) ClearComments* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1390, NIL);
    END ClearComments;

    PROCEDURE (this: Range) Phonetic* (): Phonetic, NEW;
    BEGIN
        RETURN ThisPhonetic(CtlC.GetAny(this, 1391))
    END Phonetic;

    PROCEDURE (this: Range) FormatConditions* (): FormatConditions, NEW;
    BEGIN
        RETURN ThisFormatConditions(CtlC.GetAny(this, 1392))
    END FormatConditions;

    PROCEDURE (this: Range) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Range) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Range) Hyperlinks* (): Hyperlinks, NEW;
    BEGIN
        RETURN ThisHyperlinks(CtlC.GetAny(this, 1393))
    END Hyperlinks;


    (* ---------- ChartEvents, hidden ---------- *)

    PROCEDURE (this: ChartEvents) Activate* (), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) Deactivate* (), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) Resize* (), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) MouseDown* (Button: XlMouseButton; Shift: INTEGER; X: INTEGER; Y: INTEGER), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) MouseUp* (Button: XlMouseButton; Shift: INTEGER; X: INTEGER; Y: INTEGER), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) MouseMove* (Button: XlMouseButton; Shift: INTEGER; X: INTEGER; Y: INTEGER), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) BeforeRightClick* (VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) DragPlot* (), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) DragOver* (), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) BeforeDoubleClick* (ElementID: XlChartItem; Arg1: INTEGER; Arg2: INTEGER; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) Select* (ElementID: XlChartItem; Arg1: INTEGER; Arg2: INTEGER), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) SeriesChange* (SeriesIndex: INTEGER; PointIndex: INTEGER), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) Calculate* (), NEW, ABSTRACT;

    PROCEDURE (this: ChartEvents) Invoke* (id, n: INTEGER; VAR par: CtlT.ParList; VAR ret: CtlT.Variant);
    BEGIN
        CASE id OF
        | 304: ASSERT(n = 0, 11); this.Activate()
        | 1530: ASSERT(n = 0, 11); this.Deactivate()
        | 256: ASSERT(n = 0, 11); this.Resize()
        | 1531: ASSERT(n = 4, 11); this.MouseDown(CtlC.VarInt(par[3]), CtlC.VarInt(par[2]), CtlC.VarInt(par[1]), CtlC.VarInt(par[0]))
        | 1532: ASSERT(n = 4, 11); this.MouseUp(CtlC.VarInt(par[3]), CtlC.VarInt(par[2]), CtlC.VarInt(par[1]), CtlC.VarInt(par[0]))
        | 1533: ASSERT(n = 4, 11); this.MouseMove(CtlC.VarInt(par[3]), CtlC.VarInt(par[2]), CtlC.VarInt(par[1]), CtlC.VarInt(par[0]))
        | 1534: ASSERT(n = 1, 11); this.BeforeRightClick(CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1535: ASSERT(n = 0, 11); this.DragPlot()
        | 1536: ASSERT(n = 0, 11); this.DragOver()
        | 1537: ASSERT(n = 4, 11); this.BeforeDoubleClick(CtlC.VarInt(par[3]), CtlC.VarInt(par[2]), CtlC.VarInt(par[1]), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 235: ASSERT(n = 3, 11); this.Select(CtlC.VarInt(par[2]), CtlC.VarInt(par[1]), CtlC.VarInt(par[0]))
        | 1538: ASSERT(n = 2, 11); this.SeriesChange(CtlC.VarInt(par[1]), CtlC.VarInt(par[0]))
        | 279: ASSERT(n = 0, 11); this.Calculate()
        END
    END Invoke;

    PROCEDURE (this: ChartEvents) GetIID* (OUT iid: CtlT.GUID);
    BEGIN
        iid := "{0002440F-0000-0000-C000-000000000046}"
    END GetIID;


    (* ---------- VPageBreak ---------- *)

    PROCEDURE (this: VPageBreak) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: VPageBreak) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: VPageBreak) Parent* (): Worksheet, NEW;
    BEGIN
        RETURN This_Worksheet(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: VPageBreak) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: VPageBreak) DragOff* (Direction: XlDirection; RegionIndex: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Direction, arg[1]);
        CtlC.IntVar(RegionIndex, arg[0]);
        CtlC.CallParMethod(this, 1420, arg, NIL);
    END DragOff;

    PROCEDURE (this: VPageBreak) Type* (): XlPageBreak, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: VPageBreak) PUTType* (p1: XlPageBreak), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;

    PROCEDURE (this: VPageBreak) Extent* (): XlPageBreakExtent, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1422)
    END Extent;

    PROCEDURE (this: VPageBreak) Location* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1397))
    END Location;

    PROCEDURE (this: VPageBreak) PUTREFLocation* (p1: Range), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(p1, arg[0]);
        CtlC.CallPutRefMethod(this, 1397, arg, NIL);
    END PUTREFLocation;


    (* ---------- HPageBreak ---------- *)

    PROCEDURE (this: HPageBreak) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: HPageBreak) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: HPageBreak) Parent* (): Worksheet, NEW;
    BEGIN
        RETURN This_Worksheet(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: HPageBreak) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: HPageBreak) DragOff* (Direction: XlDirection; RegionIndex: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Direction, arg[1]);
        CtlC.IntVar(RegionIndex, arg[0]);
        CtlC.CallParMethod(this, 1420, arg, NIL);
    END DragOff;

    PROCEDURE (this: HPageBreak) Type* (): XlPageBreak, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: HPageBreak) PUTType* (p1: XlPageBreak), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;

    PROCEDURE (this: HPageBreak) Extent* (): XlPageBreakExtent, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1422)
    END Extent;

    PROCEDURE (this: HPageBreak) Location* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1397))
    END Location;

    PROCEDURE (this: HPageBreak) PUTREFLocation* (p1: Range), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(p1, arg[0]);
        CtlC.CallPutRefMethod(this, 1397, arg, NIL);
    END PUTREFLocation;


    (* ---------- HPageBreaks ---------- *)

    PROCEDURE (this: HPageBreaks) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: HPageBreaks) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: HPageBreaks) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: HPageBreaks) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: HPageBreaks) Item* (Index: INTEGER): HPageBreak, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisHPageBreak(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: HPageBreaks) _Default* (Index: INTEGER): HPageBreak, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisHPageBreak(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: HPageBreaks) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: HPageBreaks) Add* (Before: CtlT.Object): HPageBreak, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Before, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisHPageBreak(CtlC.VarAny(ret))
    END Add;


    (* ---------- VPageBreaks ---------- *)

    PROCEDURE (this: VPageBreaks) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: VPageBreaks) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: VPageBreaks) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: VPageBreaks) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: VPageBreaks) Item* (Index: INTEGER): VPageBreak, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisVPageBreak(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: VPageBreaks) _Default* (Index: INTEGER): VPageBreak, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisVPageBreak(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: VPageBreaks) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: VPageBreaks) Add* (Before: CtlT.Object): VPageBreak, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Before, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisVPageBreak(CtlC.VarAny(ret))
    END Add;


    (* ---------- RecentFile ---------- *)

    PROCEDURE (this: RecentFile) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: RecentFile) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: RecentFile) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: RecentFile) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: RecentFile) Path* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 291)
    END Path;

    PROCEDURE (this: RecentFile) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: RecentFile) Open* (): Workbook, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 682, ret);
        RETURN This_Workbook(CtlC.VarAny(ret))
    END Open;

    PROCEDURE (this: RecentFile) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- RecentFiles ---------- *)

    PROCEDURE (this: RecentFiles) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: RecentFiles) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: RecentFiles) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: RecentFiles) Maximum* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1423)
    END Maximum;

    PROCEDURE (this: RecentFiles) PUTMaximum* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1423, p1)
    END PUTMaximum;

    PROCEDURE (this: RecentFiles) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: RecentFiles) Item* (Index: INTEGER): RecentFile, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisRecentFile(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: RecentFiles) _Default* (Index: INTEGER): RecentFile, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisRecentFile(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: RecentFiles) Add* (Name: ARRAY OF CHAR): RecentFile, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisRecentFile(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: RecentFiles) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- DocEvents, hidden ---------- *)

    PROCEDURE (this: DocEvents) SelectionChange* (Target: Range), NEW, ABSTRACT;

    PROCEDURE (this: DocEvents) BeforeDoubleClick* (Target: Range; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: DocEvents) BeforeRightClick* (Target: Range; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: DocEvents) Activate* (), NEW, ABSTRACT;

    PROCEDURE (this: DocEvents) Deactivate* (), NEW, ABSTRACT;

    PROCEDURE (this: DocEvents) Calculate* (), NEW, ABSTRACT;

    PROCEDURE (this: DocEvents) Change* (Target: Range), NEW, ABSTRACT;

    PROCEDURE (this: DocEvents) Invoke* (id, n: INTEGER; VAR par: CtlT.ParList; VAR ret: CtlT.Variant);
    BEGIN
        CASE id OF
        | 1543: ASSERT(n = 1, 11); this.SelectionChange(ThisRange(CtlC.VarAny(par[0])))
        | 1537: ASSERT(n = 2, 11); this.BeforeDoubleClick(ThisRange(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1534: ASSERT(n = 2, 11); this.BeforeRightClick(ThisRange(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 304: ASSERT(n = 0, 11); this.Activate()
        | 1530: ASSERT(n = 0, 11); this.Deactivate()
        | 279: ASSERT(n = 0, 11); this.Calculate()
        | 1545: ASSERT(n = 1, 11); this.Change(ThisRange(CtlC.VarAny(par[0])))
        END
    END Invoke;

    PROCEDURE (this: DocEvents) GetIID* (OUT iid: CtlT.GUID);
    BEGIN
        iid := "{00024411-0000-0000-C000-000000000046}"
    END GetIID;


    (* ---------- Style ---------- *)

    PROCEDURE (this: Style) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Style) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Style) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Style) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Style) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Style) BuiltIn* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 553)
    END BuiltIn;

    PROCEDURE (this: Style) Borders* (): Borders, NEW;
    BEGIN
        RETURN ThisBorders(CtlC.GetAny(this, 435))
    END Borders;

    PROCEDURE (this: Style) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Style) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Style) FormulaHidden* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 262)
    END FormulaHidden;

    PROCEDURE (this: Style) PUTFormulaHidden* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 262, p1)
    END PUTFormulaHidden;

    PROCEDURE (this: Style) HorizontalAlignment* (): XlHAlign, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Style) PUTHorizontalAlignment* (p1: XlHAlign), NEW;
    BEGIN
        CtlC.PutInt(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Style) IncludeAlignment* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 413)
    END IncludeAlignment;

    PROCEDURE (this: Style) PUTIncludeAlignment* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 413, p1)
    END PUTIncludeAlignment;

    PROCEDURE (this: Style) IncludeBorder* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 414)
    END IncludeBorder;

    PROCEDURE (this: Style) PUTIncludeBorder* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 414, p1)
    END PUTIncludeBorder;

    PROCEDURE (this: Style) IncludeFont* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 415)
    END IncludeFont;

    PROCEDURE (this: Style) PUTIncludeFont* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 415, p1)
    END PUTIncludeFont;

    PROCEDURE (this: Style) IncludeNumber* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 416)
    END IncludeNumber;

    PROCEDURE (this: Style) PUTIncludeNumber* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 416, p1)
    END PUTIncludeNumber;

    PROCEDURE (this: Style) IncludePatterns* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 417)
    END IncludePatterns;

    PROCEDURE (this: Style) PUTIncludePatterns* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 417, p1)
    END PUTIncludePatterns;

    PROCEDURE (this: Style) IncludeProtection* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 418)
    END IncludeProtection;

    PROCEDURE (this: Style) PUTIncludeProtection* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 418, p1)
    END PUTIncludeProtection;

    PROCEDURE (this: Style) IndentLevel* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 201)
    END IndentLevel;

    PROCEDURE (this: Style) PUTIndentLevel* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 201, p1)
    END PUTIndentLevel;

    PROCEDURE (this: Style) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Style) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Style) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Style) MergeCells* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 208)
    END MergeCells;

    PROCEDURE (this: Style) PUTMergeCells* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 208, p1)
    END PUTMergeCells;

    PROCEDURE (this: Style) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Style) NameLocal* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 937)
    END NameLocal;

    PROCEDURE (this: Style) NumberFormat* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 193)
    END NumberFormat;

    PROCEDURE (this: Style) PUTNumberFormat* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 193, p1)
    END PUTNumberFormat;

    PROCEDURE (this: Style) NumberFormatLocal* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1097)
    END NumberFormatLocal;

    PROCEDURE (this: Style) PUTNumberFormatLocal* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1097, p1)
    END PUTNumberFormatLocal;

    PROCEDURE (this: Style) Orientation* (): XlOrientation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 134)
    END Orientation;

    PROCEDURE (this: Style) PUTOrientation* (p1: XlOrientation), NEW;
    BEGIN
        CtlC.PutInt(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Style) ShrinkToFit* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 209)
    END ShrinkToFit;

    PROCEDURE (this: Style) PUTShrinkToFit* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 209, p1)
    END PUTShrinkToFit;

    PROCEDURE (this: Style) Value* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 6)
    END Value;

    PROCEDURE (this: Style) VerticalAlignment* (): XlVAlign, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Style) PUTVerticalAlignment* (p1: XlVAlign), NEW;
    BEGIN
        CtlC.PutInt(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Style) WrapText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 276)
    END WrapText;

    PROCEDURE (this: Style) PUTWrapText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 276, p1)
    END PUTWrapText;

    PROCEDURE (this: Style) _Default* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 0)
    END _Default;

    PROCEDURE (this: Style) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Style) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;


    (* ---------- Styles ---------- *)

    PROCEDURE (this: Styles) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Styles) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Styles) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Styles) Add* (Name: ARRAY OF CHAR; (* optional *) BasedOn: CtlT.Any): Style, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[1]);
        CtlC.AnyVar(BasedOn, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisStyle(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Styles) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Styles) Item* (Index: CtlT.Any): Style, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisStyle(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Styles) Merge* (Workbook: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Workbook, arg[0]);
        CtlC.CallParMethod(this, 564, arg, NIL);
    END Merge;

    PROCEDURE (this: Styles) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Styles) _Default* (Index: CtlT.Any): Style, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisStyle(CtlC.VarAny(ret))
    END _Default;


    (* ---------- Borders ---------- *)

    PROCEDURE (this: Borders) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Borders) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Borders) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Borders) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Borders) PUTColor* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, p1)
    END PUTColor;

    PROCEDURE (this: Borders) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Borders) PUTColorIndex* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, p1)
    END PUTColorIndex;

    PROCEDURE (this: Borders) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Borders) Item* (Index: XlBordersIndex): Border, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisBorder(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Borders) LineStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 119)
    END LineStyle;

    PROCEDURE (this: Borders) PUTLineStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 119, p1)
    END PUTLineStyle;

    PROCEDURE (this: Borders) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Borders) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Borders) PUTValue* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: Borders) Weight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 120)
    END Weight;

    PROCEDURE (this: Borders) PUTWeight* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 120, p1)
    END PUTWeight;

    PROCEDURE (this: Borders) _Default* (Index: XlBordersIndex): Border, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisBorder(CtlC.VarAny(ret))
    END _Default;


    (* ---------- AddIn ---------- *)

    PROCEDURE (this: AddIn) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: AddIn) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: AddIn) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: AddIn) Author* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 574)
    END Author;

    PROCEDURE (this: AddIn) Comments* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 575)
    END Comments;

    PROCEDURE (this: AddIn) FullName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 289)
    END FullName;

    PROCEDURE (this: AddIn) Installed* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 550)
    END Installed;

    PROCEDURE (this: AddIn) PUTInstalled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 550, p1)
    END PUTInstalled;

    PROCEDURE (this: AddIn) Keywords* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 577)
    END Keywords;

    PROCEDURE (this: AddIn) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: AddIn) Path* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 291)
    END Path;

    PROCEDURE (this: AddIn) Subject* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 953)
    END Subject;

    PROCEDURE (this: AddIn) Title* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 199)
    END Title;


    (* ---------- AddIns ---------- *)

    PROCEDURE (this: AddIns) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: AddIns) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: AddIns) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: AddIns) Add* (Filename: ARRAY OF CHAR; (* optional *) CopyFile: CtlT.Any): AddIn, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[1]);
        CtlC.AnyVar(CopyFile, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisAddIn(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: AddIns) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: AddIns) Item* (Index: CtlT.Any): AddIn, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisAddIn(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: AddIns) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: AddIns) _Default* (Index: CtlT.Any): AddIn, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisAddIn(CtlC.VarAny(ret))
    END _Default;


    (* ---------- Toolbar, hidden ---------- *)

    PROCEDURE (this: Toolbar) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Toolbar) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Toolbar) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Toolbar) BuiltIn* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 553)
    END BuiltIn;

    PROCEDURE (this: Toolbar) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Toolbar) Height* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 123)
    END Height;

    PROCEDURE (this: Toolbar) PUTHeight* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Toolbar) Left* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 127)
    END Left;

    PROCEDURE (this: Toolbar) PUTLeft* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Toolbar) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Toolbar) Position* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 133)
    END Position;

    PROCEDURE (this: Toolbar) PUTPosition* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 133, p1)
    END PUTPosition;

    PROCEDURE (this: Toolbar) Protection* (): XlToolbarProtection, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 176)
    END Protection;

    PROCEDURE (this: Toolbar) PUTProtection* (p1: XlToolbarProtection), NEW;
    BEGIN
        CtlC.PutInt(this, 176, p1)
    END PUTProtection;

    PROCEDURE (this: Toolbar) Reset* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 555, NIL);
    END Reset;

    PROCEDURE (this: Toolbar) ToolbarButtons* (): ToolbarButtons, NEW;
    BEGIN
        RETURN ThisToolbarButtons(CtlC.GetAny(this, 964))
    END ToolbarButtons;

    PROCEDURE (this: Toolbar) Top* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 126)
    END Top;

    PROCEDURE (this: Toolbar) PUTTop* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Toolbar) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Toolbar) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Toolbar) Width* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 122)
    END Width;

    PROCEDURE (this: Toolbar) PUTWidth* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 122, p1)
    END PUTWidth;


    (* ---------- Toolbars, hidden ---------- *)

    PROCEDURE (this: Toolbars) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Toolbars) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Toolbars) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Toolbars) Add* ((* optional *) Name: CtlT.Any): Toolbar, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisToolbar(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Toolbars) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Toolbars) _Default* (Index: CtlT.Any): Toolbar, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisToolbar(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Toolbars) Item* (Index: CtlT.Any): Toolbar, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisToolbar(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Toolbars) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- ToolbarButton, hidden ---------- *)

    PROCEDURE (this: ToolbarButton) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ToolbarButton) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ToolbarButton) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ToolbarButton) BuiltIn* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 553)
    END BuiltIn;

    PROCEDURE (this: ToolbarButton) BuiltInFace* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 554)
    END BuiltInFace;

    PROCEDURE (this: ToolbarButton) PUTBuiltInFace* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 554, p1)
    END PUTBuiltInFace;

    PROCEDURE (this: ToolbarButton) Copy* (toolbar: Toolbar; Before: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(toolbar, arg[1]);
        CtlC.IntVar(Before, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: ToolbarButton) CopyFace* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 966, NIL);
    END CopyFace;

    PROCEDURE (this: ToolbarButton) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ToolbarButton) Edit* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 562, NIL);
    END Edit;

    PROCEDURE (this: ToolbarButton) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ToolbarButton) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ToolbarButton) HelpContextID* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 355)
    END HelpContextID;

    PROCEDURE (this: ToolbarButton) PUTHelpContextID* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 355, p1)
    END PUTHelpContextID;

    PROCEDURE (this: ToolbarButton) HelpFile* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 360)
    END HelpFile;

    PROCEDURE (this: ToolbarButton) PUTHelpFile* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 360, p1)
    END PUTHelpFile;

    PROCEDURE (this: ToolbarButton) Id* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 570)
    END Id;

    PROCEDURE (this: ToolbarButton) IsGap* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 561)
    END IsGap;

    PROCEDURE (this: ToolbarButton) Move* (toolbar: Toolbar; Before: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(toolbar, arg[1]);
        CtlC.IntVar(Before, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: ToolbarButton) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ToolbarButton) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: ToolbarButton) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: ToolbarButton) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: ToolbarButton) PasteFace* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 967, NIL);
    END PasteFace;

    PROCEDURE (this: ToolbarButton) Pushed* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 560)
    END Pushed;

    PROCEDURE (this: ToolbarButton) PUTPushed* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 560, p1)
    END PUTPushed;

    PROCEDURE (this: ToolbarButton) Reset* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 555, NIL);
    END Reset;

    PROCEDURE (this: ToolbarButton) StatusBar* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 386)
    END StatusBar;

    PROCEDURE (this: ToolbarButton) PUTStatusBar* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 386, p1)
    END PUTStatusBar;

    PROCEDURE (this: ToolbarButton) Width* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 122)
    END Width;

    PROCEDURE (this: ToolbarButton) PUTWidth* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 122, p1)
    END PUTWidth;


    (* ---------- ToolbarButtons, hidden ---------- *)

    PROCEDURE (this: ToolbarButtons) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ToolbarButtons) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ToolbarButtons) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ToolbarButtons) Add* ((* optional *) Button: CtlT.Any; Before: CtlT.Any; OnAction: CtlT.Any; Pushed: CtlT.Any; Enabled: CtlT.Any; StatusBar: CtlT.Any; HelpFile: CtlT.Any; HelpContextID: CtlT.Any): ToolbarButton, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Button, arg[7]);
        CtlC.AnyVar(Before, arg[6]);
        CtlC.AnyVar(OnAction, arg[5]);
        CtlC.AnyVar(Pushed, arg[4]);
        CtlC.AnyVar(Enabled, arg[3]);
        CtlC.AnyVar(StatusBar, arg[2]);
        CtlC.AnyVar(HelpFile, arg[1]);
        CtlC.AnyVar(HelpContextID, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisToolbarButton(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: ToolbarButtons) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: ToolbarButtons) Item* (Index: INTEGER): ToolbarButton, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisToolbarButton(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: ToolbarButtons) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: ToolbarButtons) _Default* (Index: INTEGER): ToolbarButton, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisToolbarButton(CtlC.VarAny(ret))
    END _Default;


    (* ---------- Areas ---------- *)

    PROCEDURE (this: Areas) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Areas) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Areas) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Areas) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Areas) Item* (Index: INTEGER): Range, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Areas) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Areas) _Default* (Index: INTEGER): Range, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisRange(CtlC.VarAny(ret))
    END _Default;


    (* ---------- WorkbookEvents, hidden ---------- *)

    PROCEDURE (this: WorkbookEvents) Open* (), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) Activate* (), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) Deactivate* (), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) BeforeClose* (VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) BeforeSave* (SaveAsUI: BOOLEAN; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) BeforePrint* (VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) NewSheet* (Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) AddinInstall* (), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) AddinUninstall* (), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) WindowResize* (Wn: Window), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) WindowActivate* (Wn: Window), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) WindowDeactivate* (Wn: Window), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) SheetSelectionChange* (Sh: CtlT.Object; Target: Range), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) SheetBeforeDoubleClick* (Sh: CtlT.Object; Target: Range; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) SheetBeforeRightClick* (Sh: CtlT.Object; Target: Range; VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) SheetActivate* (Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) SheetDeactivate* (Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) SheetCalculate* (Sh: CtlT.Object), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) SheetChange* (Sh: CtlT.Object; Target: Range), NEW, ABSTRACT;

    PROCEDURE (this: WorkbookEvents) Invoke* (id, n: INTEGER; VAR par: CtlT.ParList; VAR ret: CtlT.Variant);
    BEGIN
        CASE id OF
        | 682: ASSERT(n = 0, 11); this.Open()
        | 304: ASSERT(n = 0, 11); this.Activate()
        | 1530: ASSERT(n = 0, 11); this.Deactivate()
        | 1546: ASSERT(n = 1, 11); this.BeforeClose(CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1547: ASSERT(n = 2, 11); this.BeforeSave(CtlC.VarBool(par[1]), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1549: ASSERT(n = 1, 11); this.BeforePrint(CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1550: ASSERT(n = 1, 11); this.NewSheet(CtlC.VarObj(par[0]))
        | 1552: ASSERT(n = 0, 11); this.AddinInstall()
        | 1553: ASSERT(n = 0, 11); this.AddinUninstall()
        | 1554: ASSERT(n = 1, 11); this.WindowResize(ThisWindow(CtlC.VarAny(par[0])))
        | 1556: ASSERT(n = 1, 11); this.WindowActivate(ThisWindow(CtlC.VarAny(par[0])))
        | 1557: ASSERT(n = 1, 11); this.WindowDeactivate(ThisWindow(CtlC.VarAny(par[0])))
        | 1558: ASSERT(n = 2, 11); this.SheetSelectionChange(CtlC.VarObj(par[1]), ThisRange(CtlC.VarAny(par[0])))
        | 1559: ASSERT(n = 3, 11); this.SheetBeforeDoubleClick(CtlC.VarObj(par[2]), ThisRange(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1560: ASSERT(n = 3, 11); this.SheetBeforeRightClick(CtlC.VarObj(par[2]), ThisRange(CtlC.VarAny(par[1])), CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1561: ASSERT(n = 1, 11); this.SheetActivate(CtlC.VarObj(par[0]))
        | 1562: ASSERT(n = 1, 11); this.SheetDeactivate(CtlC.VarObj(par[0]))
        | 1563: ASSERT(n = 1, 11); this.SheetCalculate(CtlC.VarObj(par[0]))
        | 1564: ASSERT(n = 2, 11); this.SheetChange(CtlC.VarObj(par[1]), ThisRange(CtlC.VarAny(par[0])))
        END
    END Invoke;

    PROCEDURE (this: WorkbookEvents) GetIID* (OUT iid: CtlT.GUID);
    BEGIN
        iid := "{00024412-0000-0000-C000-000000000046}"
    END GetIID;


    (* ---------- MenuBars, hidden ---------- *)

    PROCEDURE (this: MenuBars) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: MenuBars) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: MenuBars) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: MenuBars) Add* ((* optional *) Name: CtlT.Any): MenuBar, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisMenuBar(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: MenuBars) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: MenuBars) _Default* (Index: CtlT.Any): MenuBar, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisMenuBar(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: MenuBars) Item* (Index: CtlT.Any): MenuBar, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisMenuBar(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: MenuBars) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- MenuBar, hidden ---------- *)

    PROCEDURE (this: MenuBar) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: MenuBar) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: MenuBar) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: MenuBar) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: MenuBar) BuiltIn* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 553)
    END BuiltIn;

    PROCEDURE (this: MenuBar) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: MenuBar) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: MenuBar) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: MenuBar) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: MenuBar) Menus* (): Menus, NEW;
    BEGIN
        RETURN ThisMenus(CtlC.GetAny(this, 591))
    END Menus;

    PROCEDURE (this: MenuBar) Reset* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 555, NIL);
    END Reset;


    (* ---------- Menus, hidden ---------- *)

    PROCEDURE (this: Menus) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Menus) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Menus) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Menus) Add* (Caption: ARRAY OF CHAR; (* optional *) Before: CtlT.Any; Restore: CtlT.Any): Menu, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Caption, arg[2]);
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(Restore, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisMenu(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Menus) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Menus) _Default* (Index: CtlT.Any): Menu, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisMenu(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Menus) Item* (Index: CtlT.Any): Menu, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisMenu(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Menus) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- Menu, hidden ---------- *)

    PROCEDURE (this: Menu) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Menu) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Menu) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Menu) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Menu) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Menu) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Menu) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Menu) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Menu) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Menu) MenuItems* (): MenuItems, NEW;
    BEGIN
        RETURN ThisMenuItems(CtlC.GetAny(this, 593))
    END MenuItems;


    (* ---------- MenuItems, hidden ---------- *)

    PROCEDURE (this: MenuItems) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: MenuItems) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: MenuItems) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: MenuItems) Add* (Caption: ARRAY OF CHAR; (* optional *) OnAction: CtlT.Any; ShortcutKey: CtlT.Any; Before: CtlT.Any; Restore: CtlT.Any; StatusBar: CtlT.Any; HelpFile: CtlT.Any; HelpContextID: CtlT.Any): MenuItem, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Caption, arg[7]);
        CtlC.AnyVar(OnAction, arg[6]);
        CtlC.AnyVar(ShortcutKey, arg[5]);
        CtlC.AnyVar(Before, arg[4]);
        CtlC.AnyVar(Restore, arg[3]);
        CtlC.AnyVar(StatusBar, arg[2]);
        CtlC.AnyVar(HelpFile, arg[1]);
        CtlC.AnyVar(HelpContextID, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisMenuItem(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: MenuItems) AddMenu* (Caption: ARRAY OF CHAR; (* optional *) Before: CtlT.Any; Restore: CtlT.Any): Menu, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Caption, arg[2]);
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(Restore, arg[0]);
        CtlC.CallParMethod(this, 598, arg, ret);
        RETURN ThisMenu(CtlC.VarAny(ret))
    END AddMenu;

    PROCEDURE (this: MenuItems) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: MenuItems) _Default* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarObj(ret)
    END _Default;

    PROCEDURE (this: MenuItems) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: MenuItems) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- MenuItem, hidden ---------- *)

    PROCEDURE (this: MenuItem) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: MenuItem) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: MenuItem) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: MenuItem) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: MenuItem) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: MenuItem) Checked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 599)
    END Checked;

    PROCEDURE (this: MenuItem) PUTChecked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 599, p1)
    END PUTChecked;

    PROCEDURE (this: MenuItem) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: MenuItem) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: MenuItem) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: MenuItem) HelpContextID* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 355)
    END HelpContextID;

    PROCEDURE (this: MenuItem) PUTHelpContextID* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 355, p1)
    END PUTHelpContextID;

    PROCEDURE (this: MenuItem) HelpFile* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 360)
    END HelpFile;

    PROCEDURE (this: MenuItem) PUTHelpFile* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 360, p1)
    END PUTHelpFile;

    PROCEDURE (this: MenuItem) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: MenuItem) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: MenuItem) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: MenuItem) StatusBar* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 386)
    END StatusBar;

    PROCEDURE (this: MenuItem) PUTStatusBar* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 386, p1)
    END PUTStatusBar;


    (* ---------- Charts ---------- *)

    PROCEDURE (this: Charts) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Charts) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Charts) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Charts) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any): Chart, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[2]);
        CtlC.AnyVar(After, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN This_Chart(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Charts) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: Charts) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Charts) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Charts) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Charts) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: Charts) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Charts) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: Charts) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: Charts) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Charts) HPageBreaks* (): HPageBreaks, NEW;
    BEGIN
        RETURN ThisHPageBreaks(CtlC.GetAny(this, 1418))
    END HPageBreaks;

    PROCEDURE (this: Charts) VPageBreaks* (): VPageBreaks, NEW;
    BEGIN
        RETURN ThisVPageBreaks(CtlC.GetAny(this, 1419))
    END VPageBreaks;

    PROCEDURE (this: Charts) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Charts) PUTVisible* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Charts) _Default* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarObj(ret)
    END _Default;


    (* ---------- DrawingObjects, hidden ---------- *)

    PROCEDURE (this: DrawingObjects) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DrawingObjects) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DrawingObjects) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DrawingObjects) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: DrawingObjects) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: DrawingObjects) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: DrawingObjects) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: DrawingObjects) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DrawingObjects) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: DrawingObjects) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: DrawingObjects) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: DrawingObjects) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: DrawingObjects) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: DrawingObjects) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: DrawingObjects) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: DrawingObjects) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: DrawingObjects) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: DrawingObjects) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: DrawingObjects) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: DrawingObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: DrawingObjects) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: DrawingObjects) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: DrawingObjects) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: DrawingObjects) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: DrawingObjects) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: DrawingObjects) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: DrawingObjects) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: DrawingObjects) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: DrawingObjects) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: DrawingObjects) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: DrawingObjects) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: DrawingObjects) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: DrawingObjects) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: DrawingObjects) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: DrawingObjects) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: DrawingObjects) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: DrawingObjects) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: DrawingObjects) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, NIL);
    END AddItem;

    PROCEDURE (this: DrawingObjects) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: DrawingObjects) PUTArrowHeadLength* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, p1)
    END PUTArrowHeadLength;

    PROCEDURE (this: DrawingObjects) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: DrawingObjects) PUTArrowHeadStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, p1)
    END PUTArrowHeadStyle;

    PROCEDURE (this: DrawingObjects) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: DrawingObjects) PUTArrowHeadWidth* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, p1)
    END PUTArrowHeadWidth;

    PROCEDURE (this: DrawingObjects) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: DrawingObjects) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: DrawingObjects) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: DrawingObjects) CancelButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 858)
    END CancelButton;

    PROCEDURE (this: DrawingObjects) PUTCancelButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 858, p1)
    END PUTCancelButton;

    PROCEDURE (this: DrawingObjects) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: DrawingObjects) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: DrawingObjects) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: DrawingObjects) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: DrawingObjects) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: DrawingObjects) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: DrawingObjects) DefaultButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 857)
    END DefaultButton;

    PROCEDURE (this: DrawingObjects) PUTDefaultButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 857, p1)
    END PUTDefaultButton;

    PROCEDURE (this: DrawingObjects) DismissButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 859)
    END DismissButton;

    PROCEDURE (this: DrawingObjects) PUTDismissButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 859, p1)
    END PUTDismissButton;

    PROCEDURE (this: DrawingObjects) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: DrawingObjects) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: DrawingObjects) DisplayVerticalScrollBar* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: DrawingObjects) PUTDisplayVerticalScrollBar* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 922, p1)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: DrawingObjects) DropDownLines* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 848)
    END DropDownLines;

    PROCEDURE (this: DrawingObjects) PUTDropDownLines* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 848, p1)
    END PUTDropDownLines;

    PROCEDURE (this: DrawingObjects) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: DrawingObjects) HelpButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 860)
    END HelpButton;

    PROCEDURE (this: DrawingObjects) PUTHelpButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 860, p1)
    END PUTHelpButton;

    PROCEDURE (this: DrawingObjects) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: DrawingObjects) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: DrawingObjects) InputType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 854)
    END InputType;

    PROCEDURE (this: DrawingObjects) PUTInputType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 854, p1)
    END PUTInputType;

    PROCEDURE (this: DrawingObjects) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: DrawingObjects) LargeChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 845)
    END LargeChange;

    PROCEDURE (this: DrawingObjects) PUTLargeChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 845, p1)
    END PUTLargeChange;

    PROCEDURE (this: DrawingObjects) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: DrawingObjects) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: DrawingObjects) List* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 861, arg, ret);
        RETURN CtlC.VarAny(ret)
    END List;

    PROCEDURE (this: DrawingObjects) ListFillRange* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 847)
    END ListFillRange;

    PROCEDURE (this: DrawingObjects) PUTListFillRange* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 847, p1)
    END PUTListFillRange;

    PROCEDURE (this: DrawingObjects) ListIndex* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 850)
    END ListIndex;

    PROCEDURE (this: DrawingObjects) PUTListIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 850, p1)
    END PUTListIndex;

    PROCEDURE (this: DrawingObjects) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: DrawingObjects) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: DrawingObjects) Max* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 842)
    END Max;

    PROCEDURE (this: DrawingObjects) PUTMax* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 842, p1)
    END PUTMax;

    PROCEDURE (this: DrawingObjects) Min* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 843)
    END Min;

    PROCEDURE (this: DrawingObjects) PUTMin* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 843, p1)
    END PUTMin;

    PROCEDURE (this: DrawingObjects) MultiLine* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 855)
    END MultiLine;

    PROCEDURE (this: DrawingObjects) PUTMultiLine* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 855, p1)
    END PUTMultiLine;

    PROCEDURE (this: DrawingObjects) MultiSelect* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 32)
    END MultiSelect;

    PROCEDURE (this: DrawingObjects) PUTMultiSelect* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 32, p1)
    END PUTMultiSelect;

    PROCEDURE (this: DrawingObjects) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: DrawingObjects) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: DrawingObjects) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: DrawingObjects) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: DrawingObjects) RemoveAllItems* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 853, NIL);
    END RemoveAllItems;

    PROCEDURE (this: DrawingObjects) RemoveItem* (Index: INTEGER; (* optional *) Count: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, NIL);
    END RemoveItem;

    PROCEDURE (this: DrawingObjects) Reshape* (Vertex: INTEGER; Insert: CtlT.Any; (* optional *) Left: CtlT.Any; Top: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Vertex, arg[3]);
        CtlC.AnyVar(Insert, arg[2]);
        CtlC.AnyVar(Left, arg[1]);
        CtlC.AnyVar(Top, arg[0]);
        CtlC.CallParMethod(this, 604, arg, NIL);
    END Reshape;

    PROCEDURE (this: DrawingObjects) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: DrawingObjects) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: DrawingObjects) Selected* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1123, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Selected;

    PROCEDURE (this: DrawingObjects) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: DrawingObjects) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: DrawingObjects) SmallChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 844)
    END SmallChange;

    PROCEDURE (this: DrawingObjects) PUTSmallChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 844, p1)
    END PUTSmallChange;

    PROCEDURE (this: DrawingObjects) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: DrawingObjects) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: DrawingObjects) Ungroup* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN CtlC.VarObj(ret)
    END Ungroup;

    PROCEDURE (this: DrawingObjects) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: DrawingObjects) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: DrawingObjects) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: DrawingObjects) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: DrawingObjects) Vertices* ((* optional *) Index1: CtlT.Any; Index2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index1, arg[1]);
        CtlC.AnyVar(Index2, arg[0]);
        CtlC.CallParMethod(this, 621, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Vertices;

    PROCEDURE (this: DrawingObjects) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: DrawingObjects) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: DrawingObjects) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: DrawingObjects) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: DrawingObjects) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: DrawingObjects) LinkCombo* ((* optional *) Link: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 856, arg, NIL);
    END LinkCombo;

    PROCEDURE (this: DrawingObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- PivotCache ---------- *)

    PROCEDURE (this: PivotCache) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotCache) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotCache) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PivotCache) BackgroundQuery* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1427)
    END BackgroundQuery;

    PROCEDURE (this: PivotCache) PUTBackgroundQuery* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1427, p1)
    END PUTBackgroundQuery;

    PROCEDURE (this: PivotCache) Connection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1432)
    END Connection;

    PROCEDURE (this: PivotCache) PUTConnection* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1432, p1)
    END PUTConnection;

    PROCEDURE (this: PivotCache) EnableRefresh* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1477)
    END EnableRefresh;

    PROCEDURE (this: PivotCache) PUTEnableRefresh* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1477, p1)
    END PUTEnableRefresh;

    PROCEDURE (this: PivotCache) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: PivotCache) MemoryUsed* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 372)
    END MemoryUsed;

    PROCEDURE (this: PivotCache) OptimizeCache* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1428)
    END OptimizeCache;

    PROCEDURE (this: PivotCache) PUTOptimizeCache* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1428, p1)
    END PUTOptimizeCache;

    PROCEDURE (this: PivotCache) RecordCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1478)
    END RecordCount;

    PROCEDURE (this: PivotCache) Refresh* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1417, NIL);
    END Refresh;

    PROCEDURE (this: PivotCache) RefreshDate* (): CtlT.OleDate, NEW;
    BEGIN
        RETURN CtlC.GetDate(this, 696)
    END RefreshDate;

    PROCEDURE (this: PivotCache) RefreshName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 697)
    END RefreshName;

    PROCEDURE (this: PivotCache) RefreshOnFileOpen* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1479)
    END RefreshOnFileOpen;

    PROCEDURE (this: PivotCache) PUTRefreshOnFileOpen* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1479, p1)
    END PUTRefreshOnFileOpen;

    PROCEDURE (this: PivotCache) Sql* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1480)
    END Sql;

    PROCEDURE (this: PivotCache) PUTSql* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1480, p1)
    END PUTSql;

    PROCEDURE (this: PivotCache) SavePassword* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1481)
    END SavePassword;

    PROCEDURE (this: PivotCache) PUTSavePassword* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1481, p1)
    END PUTSavePassword;

    PROCEDURE (this: PivotCache) SourceData* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 686)
    END SourceData;

    PROCEDURE (this: PivotCache) PUTSourceData* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 686, p1)
    END PUTSourceData;


    (* ---------- PivotCaches ---------- *)

    PROCEDURE (this: PivotCaches) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotCaches) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotCaches) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PivotCaches) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: PivotCaches) Item* (Index: CtlT.Any): PivotCache, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisPivotCache(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: PivotCaches) _Default* (Index: CtlT.Any): PivotCache, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisPivotCache(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: PivotCaches) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- PivotFormula ---------- *)

    PROCEDURE (this: PivotFormula) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotFormula) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotFormula) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PivotFormula) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: PivotFormula) _Default* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 0)
    END _Default;

    PROCEDURE (this: PivotFormula) PUT_Default* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: PivotFormula) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: PivotFormula) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: PivotFormula) Value* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 6)
    END Value;

    PROCEDURE (this: PivotFormula) PUTValue* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: PivotFormula) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: PivotFormula) PUTIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 486, p1)
    END PUTIndex;


    (* ---------- PivotFormulas ---------- *)

    PROCEDURE (this: PivotFormulas) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotFormulas) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotFormulas) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PivotFormulas) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: PivotFormulas) Add* (Formula: ARRAY OF CHAR): PivotFormula, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Formula, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisPivotFormula(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: PivotFormulas) Item* (Index: CtlT.Any): PivotFormula, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisPivotFormula(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: PivotFormulas) _Default* (Index: CtlT.Any): PivotFormula, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisPivotFormula(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: PivotFormulas) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- PivotTable ---------- *)

    PROCEDURE (this: PivotTable) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotTable) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotTable) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PivotTable) AddFields* ((* optional *) RowFields: CtlT.Any; ColumnFields: CtlT.Any; PageFields: CtlT.Any; AddToTable: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowFields, arg[3]);
        CtlC.AnyVar(ColumnFields, arg[2]);
        CtlC.AnyVar(PageFields, arg[1]);
        CtlC.AnyVar(AddToTable, arg[0]);
        CtlC.CallParMethod(this, 708, arg, NIL);
    END AddFields;

    PROCEDURE (this: PivotTable) ColumnFields* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 713, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ColumnFields;

    PROCEDURE (this: PivotTable) ColumnGrand* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 694)
    END ColumnGrand;

    PROCEDURE (this: PivotTable) PUTColumnGrand* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 694, p1)
    END PUTColumnGrand;

    PROCEDURE (this: PivotTable) ColumnRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 702))
    END ColumnRange;

    PROCEDURE (this: PivotTable) ShowPages* ((* optional *) PageField: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(PageField, arg[0]);
        CtlC.CallParMethod(this, 706, arg, NIL);
    END ShowPages;

    PROCEDURE (this: PivotTable) DataBodyRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 705))
    END DataBodyRange;

    PROCEDURE (this: PivotTable) DataFields* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 715, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DataFields;

    PROCEDURE (this: PivotTable) DataLabelRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 704))
    END DataLabelRange;

    PROCEDURE (this: PivotTable) _Default* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 0)
    END _Default;

    PROCEDURE (this: PivotTable) PUT_Default* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: PivotTable) HasAutoFormat* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 695)
    END HasAutoFormat;

    PROCEDURE (this: PivotTable) PUTHasAutoFormat* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 695, p1)
    END PUTHasAutoFormat;

    PROCEDURE (this: PivotTable) HiddenFields* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 711, arg, ret);
        RETURN CtlC.VarObj(ret)
    END HiddenFields;

    PROCEDURE (this: PivotTable) InnerDetail* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 698)
    END InnerDetail;

    PROCEDURE (this: PivotTable) PUTInnerDetail* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 698, p1)
    END PUTInnerDetail;

    PROCEDURE (this: PivotTable) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: PivotTable) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: PivotTable) PageFields* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 714, arg, ret);
        RETURN CtlC.VarObj(ret)
    END PageFields;

    PROCEDURE (this: PivotTable) PageRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 703))
    END PageRange;

    PROCEDURE (this: PivotTable) PageRangeCells* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1482))
    END PageRangeCells;

    PROCEDURE (this: PivotTable) PivotFields* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 718, arg, ret);
        RETURN CtlC.VarObj(ret)
    END PivotFields;

    PROCEDURE (this: PivotTable) RefreshDate* (): CtlT.OleDate, NEW;
    BEGIN
        RETURN CtlC.GetDate(this, 696)
    END RefreshDate;

    PROCEDURE (this: PivotTable) RefreshName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 697)
    END RefreshName;

    PROCEDURE (this: PivotTable) RefreshTable* (): BOOLEAN, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 717, ret);
        RETURN CtlC.VarBool(ret)
    END RefreshTable;

    PROCEDURE (this: PivotTable) RowFields* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 712, arg, ret);
        RETURN CtlC.VarObj(ret)
    END RowFields;

    PROCEDURE (this: PivotTable) RowGrand* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 693)
    END RowGrand;

    PROCEDURE (this: PivotTable) PUTRowGrand* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 693, p1)
    END PUTRowGrand;

    PROCEDURE (this: PivotTable) RowRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 701))
    END RowRange;

    PROCEDURE (this: PivotTable) SaveData* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 692)
    END SaveData;

    PROCEDURE (this: PivotTable) PUTSaveData* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 692, p1)
    END PUTSaveData;

    PROCEDURE (this: PivotTable) SourceData* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 686)
    END SourceData;

    PROCEDURE (this: PivotTable) PUTSourceData* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 686, p1)
    END PUTSourceData;

    PROCEDURE (this: PivotTable) TableRange1* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 699))
    END TableRange1;

    PROCEDURE (this: PivotTable) TableRange2* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 700))
    END TableRange2;

    PROCEDURE (this: PivotTable) Value* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 6)
    END Value;

    PROCEDURE (this: PivotTable) PUTValue* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: PivotTable) VisibleFields* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 710, arg, ret);
        RETURN CtlC.VarObj(ret)
    END VisibleFields;

    PROCEDURE (this: PivotTable) CacheIndex* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1483)
    END CacheIndex;

    PROCEDURE (this: PivotTable) PUTCacheIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1483, p1)
    END PUTCacheIndex;

    PROCEDURE (this: PivotTable) CalculatedFields* (): CalculatedFields, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1484, ret);
        RETURN ThisCalculatedFields(CtlC.VarAny(ret))
    END CalculatedFields;

    PROCEDURE (this: PivotTable) DisplayErrorString* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1485)
    END DisplayErrorString;

    PROCEDURE (this: PivotTable) PUTDisplayErrorString* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1485, p1)
    END PUTDisplayErrorString;

    PROCEDURE (this: PivotTable) DisplayNullString* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1486)
    END DisplayNullString;

    PROCEDURE (this: PivotTable) PUTDisplayNullString* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1486, p1)
    END PUTDisplayNullString;

    PROCEDURE (this: PivotTable) EnableDrilldown* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1487)
    END EnableDrilldown;

    PROCEDURE (this: PivotTable) PUTEnableDrilldown* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1487, p1)
    END PUTEnableDrilldown;

    PROCEDURE (this: PivotTable) EnableFieldDialog* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1488)
    END EnableFieldDialog;

    PROCEDURE (this: PivotTable) PUTEnableFieldDialog* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1488, p1)
    END PUTEnableFieldDialog;

    PROCEDURE (this: PivotTable) EnableWizard* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1489)
    END EnableWizard;

    PROCEDURE (this: PivotTable) PUTEnableWizard* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1489, p1)
    END PUTEnableWizard;

    PROCEDURE (this: PivotTable) ErrorString* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1490)
    END ErrorString;

    PROCEDURE (this: PivotTable) PUTErrorString* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1490, p1)
    END PUTErrorString;

    PROCEDURE (this: PivotTable) GetData* (Name: ARRAY OF CHAR): REAL, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1491, arg, ret);
        RETURN CtlC.VarReal(ret)
    END GetData;

    PROCEDURE (this: PivotTable) ListFormulas* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1492, NIL);
    END ListFormulas;

    PROCEDURE (this: PivotTable) ManualUpdate* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1493)
    END ManualUpdate;

    PROCEDURE (this: PivotTable) PUTManualUpdate* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1493, p1)
    END PUTManualUpdate;

    PROCEDURE (this: PivotTable) MergeLabels* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1494)
    END MergeLabels;

    PROCEDURE (this: PivotTable) PUTMergeLabels* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1494, p1)
    END PUTMergeLabels;

    PROCEDURE (this: PivotTable) NullString* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1495)
    END NullString;

    PROCEDURE (this: PivotTable) PUTNullString* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1495, p1)
    END PUTNullString;

    PROCEDURE (this: PivotTable) PivotCache* (): PivotCache, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1496, ret);
        RETURN ThisPivotCache(CtlC.VarAny(ret))
    END PivotCache;

    PROCEDURE (this: PivotTable) PivotFormulas* (): PivotFormulas, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1497, ret);
        RETURN ThisPivotFormulas(CtlC.VarAny(ret))
    END PivotFormulas;

    PROCEDURE (this: PivotTable) PivotTableWizard* ((* optional *) SourceType: CtlT.Any; SourceData: CtlT.Any; TableDestination: CtlT.Any; TableName: CtlT.Any; RowGrand: CtlT.Any; ColumnGrand: CtlT.Any; SaveData: CtlT.Any; HasAutoFormat: CtlT.Any; AutoPage: CtlT.Any; Reserved: CtlT.Any; BackgroundQuery: CtlT.Any; OptimizeCache: CtlT.Any; PageFieldOrder: CtlT.Any; PageFieldWrapCount: CtlT.Any; ReadData: CtlT.Any; Connection: CtlT.Any), NEW;
        VAR arg: ARRAY 16 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SourceType, arg[15]);
        CtlC.AnyVar(SourceData, arg[14]);
        CtlC.AnyVar(TableDestination, arg[13]);
        CtlC.AnyVar(TableName, arg[12]);
        CtlC.AnyVar(RowGrand, arg[11]);
        CtlC.AnyVar(ColumnGrand, arg[10]);
        CtlC.AnyVar(SaveData, arg[9]);
        CtlC.AnyVar(HasAutoFormat, arg[8]);
        CtlC.AnyVar(AutoPage, arg[7]);
        CtlC.AnyVar(Reserved, arg[6]);
        CtlC.AnyVar(BackgroundQuery, arg[5]);
        CtlC.AnyVar(OptimizeCache, arg[4]);
        CtlC.AnyVar(PageFieldOrder, arg[3]);
        CtlC.AnyVar(PageFieldWrapCount, arg[2]);
        CtlC.AnyVar(ReadData, arg[1]);
        CtlC.AnyVar(Connection, arg[0]);
        CtlC.CallParMethod(this, 684, arg, NIL);
    END PivotTableWizard;

    PROCEDURE (this: PivotTable) SubtotalHiddenPageItems* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1498)
    END SubtotalHiddenPageItems;

    PROCEDURE (this: PivotTable) PUTSubtotalHiddenPageItems* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1498, p1)
    END PUTSubtotalHiddenPageItems;

    PROCEDURE (this: PivotTable) PageFieldOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1429)
    END PageFieldOrder;

    PROCEDURE (this: PivotTable) PUTPageFieldOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1429, p1)
    END PUTPageFieldOrder;

    PROCEDURE (this: PivotTable) PageFieldStyle* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1499)
    END PageFieldStyle;

    PROCEDURE (this: PivotTable) PUTPageFieldStyle* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1499, p1)
    END PUTPageFieldStyle;

    PROCEDURE (this: PivotTable) PageFieldWrapCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1430)
    END PageFieldWrapCount;

    PROCEDURE (this: PivotTable) PUTPageFieldWrapCount* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1430, p1)
    END PUTPageFieldWrapCount;

    PROCEDURE (this: PivotTable) PreserveFormatting* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1500)
    END PreserveFormatting;

    PROCEDURE (this: PivotTable) PUTPreserveFormatting* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1500, p1)
    END PUTPreserveFormatting;

    PROCEDURE (this: PivotTable) PivotSelect* (Name: ARRAY OF CHAR; Mode: XlPTSelectionMode), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[1]);
        CtlC.IntVar(Mode, arg[0]);
        CtlC.CallParMethod(this, 1501, arg, NIL);
    END PivotSelect;

    PROCEDURE (this: PivotTable) PivotSelection* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1502)
    END PivotSelection;

    PROCEDURE (this: PivotTable) PUTPivotSelection* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1502, p1)
    END PUTPivotSelection;

    PROCEDURE (this: PivotTable) SelectionMode* (): XlPTSelectionMode, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1503)
    END SelectionMode;

    PROCEDURE (this: PivotTable) PUTSelectionMode* (p1: XlPTSelectionMode), NEW;
    BEGIN
        CtlC.PutInt(this, 1503, p1)
    END PUTSelectionMode;

    PROCEDURE (this: PivotTable) TableStyle* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1504)
    END TableStyle;

    PROCEDURE (this: PivotTable) PUTTableStyle* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1504, p1)
    END PUTTableStyle;

    PROCEDURE (this: PivotTable) Tag* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1505)
    END Tag;

    PROCEDURE (this: PivotTable) PUTTag* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1505, p1)
    END PUTTag;

    PROCEDURE (this: PivotTable) Update* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 680, NIL);
    END Update;

    PROCEDURE (this: PivotTable) VacatedStyle* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1506)
    END VacatedStyle;

    PROCEDURE (this: PivotTable) PUTVacatedStyle* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1506, p1)
    END PUTVacatedStyle;


    (* ---------- PivotTables ---------- *)

    PROCEDURE (this: PivotTables) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotTables) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotTables) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PivotTables) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: PivotTables) Item* (Index: CtlT.Any): PivotTable, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisPivotTable(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: PivotTables) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- PivotField ---------- *)

    PROCEDURE (this: PivotField) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotField) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotField) Parent* (): PivotTable, NEW;
    BEGIN
        RETURN ThisPivotTable(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: PivotField) Calculation* (): XlPivotFieldCalculation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 316)
    END Calculation;

    PROCEDURE (this: PivotField) PUTCalculation* (p1: XlPivotFieldCalculation), NEW;
    BEGIN
        CtlC.PutInt(this, 316, p1)
    END PUTCalculation;

    PROCEDURE (this: PivotField) ChildField* (): PivotField, NEW;
    BEGIN
        RETURN ThisPivotField(CtlC.GetAny(this, 736))
    END ChildField;

    PROCEDURE (this: PivotField) ChildItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 730, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChildItems;

    PROCEDURE (this: PivotField) CurrentPage* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 738)
    END CurrentPage;

    PROCEDURE (this: PivotField) PUTCurrentPage* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 738, p1)
    END PUTCurrentPage;

    PROCEDURE (this: PivotField) DataRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 720))
    END DataRange;

    PROCEDURE (this: PivotField) DataType* (): XlPivotFieldDataType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 722)
    END DataType;

    PROCEDURE (this: PivotField) _Default* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 0)
    END _Default;

    PROCEDURE (this: PivotField) PUT_Default* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: PivotField) Function* (): XlConsolidationFunction, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 899)
    END Function;

    PROCEDURE (this: PivotField) PUTFunction* (p1: XlConsolidationFunction), NEW;
    BEGIN
        CtlC.PutInt(this, 899, p1)
    END PUTFunction;

    PROCEDURE (this: PivotField) GroupLevel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 723)
    END GroupLevel;

    PROCEDURE (this: PivotField) HiddenItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 728, arg, ret);
        RETURN CtlC.VarAny(ret)
    END HiddenItems;

    PROCEDURE (this: PivotField) LabelRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 719))
    END LabelRange;

    PROCEDURE (this: PivotField) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: PivotField) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: PivotField) NumberFormat* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 193)
    END NumberFormat;

    PROCEDURE (this: PivotField) PUTNumberFormat* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 193, p1)
    END PUTNumberFormat;

    PROCEDURE (this: PivotField) Orientation* (): XlPivotFieldOrientation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 134)
    END Orientation;

    PROCEDURE (this: PivotField) PUTOrientation* (p1: XlPivotFieldOrientation), NEW;
    BEGIN
        CtlC.PutInt(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: PivotField) ShowAllItems* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 452)
    END ShowAllItems;

    PROCEDURE (this: PivotField) PUTShowAllItems* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 452, p1)
    END PUTShowAllItems;

    PROCEDURE (this: PivotField) ParentField* (): PivotField, NEW;
    BEGIN
        RETURN ThisPivotField(CtlC.GetAny(this, 732))
    END ParentField;

    PROCEDURE (this: PivotField) ParentItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 729, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ParentItems;

    PROCEDURE (this: PivotField) PivotItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 737, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PivotItems;

    PROCEDURE (this: PivotField) Position* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 133)
    END Position;

    PROCEDURE (this: PivotField) PUTPosition* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 133, p1)
    END PUTPosition;

    PROCEDURE (this: PivotField) SourceName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 721)
    END SourceName;

    PROCEDURE (this: PivotField) Subtotals* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 733, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Subtotals;

    PROCEDURE (this: PivotField) BaseField* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 734)
    END BaseField;

    PROCEDURE (this: PivotField) PUTBaseField* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 734, p1)
    END PUTBaseField;

    PROCEDURE (this: PivotField) BaseItem* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 735)
    END BaseItem;

    PROCEDURE (this: PivotField) PUTBaseItem* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 735, p1)
    END PUTBaseItem;

    PROCEDURE (this: PivotField) TotalLevels* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 724)
    END TotalLevels;

    PROCEDURE (this: PivotField) Value* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 6)
    END Value;

    PROCEDURE (this: PivotField) PUTValue* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: PivotField) VisibleItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 727, arg, ret);
        RETURN CtlC.VarAny(ret)
    END VisibleItems;

    PROCEDURE (this: PivotField) CalculatedItems* (): CalculatedItems, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1507, ret);
        RETURN ThisCalculatedItems(CtlC.VarAny(ret))
    END CalculatedItems;

    PROCEDURE (this: PivotField) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: PivotField) DragToColumn* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1508)
    END DragToColumn;

    PROCEDURE (this: PivotField) PUTDragToColumn* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1508, p1)
    END PUTDragToColumn;

    PROCEDURE (this: PivotField) DragToHide* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1509)
    END DragToHide;

    PROCEDURE (this: PivotField) PUTDragToHide* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1509, p1)
    END PUTDragToHide;

    PROCEDURE (this: PivotField) DragToPage* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1510)
    END DragToPage;

    PROCEDURE (this: PivotField) PUTDragToPage* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1510, p1)
    END PUTDragToPage;

    PROCEDURE (this: PivotField) DragToRow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1511)
    END DragToRow;

    PROCEDURE (this: PivotField) PUTDragToRow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1511, p1)
    END PUTDragToRow;

    PROCEDURE (this: PivotField) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: PivotField) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: PivotField) IsCalculated* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1512)
    END IsCalculated;

    PROCEDURE (this: PivotField) MemoryUsed* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 372)
    END MemoryUsed;

    PROCEDURE (this: PivotField) ServerBased* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1513)
    END ServerBased;

    PROCEDURE (this: PivotField) PUTServerBased* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1513, p1)
    END PUTServerBased;

    PROCEDURE (this: PivotField) AutoSort* (Order: INTEGER; Field: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Order, arg[1]);
        CtlC.StrVar(Field, arg[0]);
        CtlC.CallParMethod(this, 1514, arg, NIL);
    END AutoSort;

    PROCEDURE (this: PivotField) AutoShow* (Type: INTEGER; Range: INTEGER; Count: INTEGER; Field: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[3]);
        CtlC.IntVar(Range, arg[2]);
        CtlC.IntVar(Count, arg[1]);
        CtlC.StrVar(Field, arg[0]);
        CtlC.CallParMethod(this, 1515, arg, NIL);
    END AutoShow;

    PROCEDURE (this: PivotField) AutoSortOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1516)
    END AutoSortOrder;

    PROCEDURE (this: PivotField) AutoSortField* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1517)
    END AutoSortField;

    PROCEDURE (this: PivotField) AutoShowType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1518)
    END AutoShowType;

    PROCEDURE (this: PivotField) AutoShowRange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1519)
    END AutoShowRange;

    PROCEDURE (this: PivotField) AutoShowCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1520)
    END AutoShowCount;

    PROCEDURE (this: PivotField) AutoShowField* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1521)
    END AutoShowField;


    (* ---------- PivotFields ---------- *)

    PROCEDURE (this: PivotFields) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotFields) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotFields) Parent* (): PivotTable, NEW;
    BEGIN
        RETURN ThisPivotTable(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: PivotFields) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: PivotFields) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: PivotFields) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- CalculatedFields ---------- *)

    PROCEDURE (this: CalculatedFields) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: CalculatedFields) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: CalculatedFields) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: CalculatedFields) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: CalculatedFields) Add* (Name: ARRAY OF CHAR; Formula: ARRAY OF CHAR): PivotField, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[1]);
        CtlC.StrVar(Formula, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisPivotField(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: CalculatedFields) Item* (Index: CtlT.Any): PivotField, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisPivotField(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: CalculatedFields) _Default* (Field: CtlT.Any): PivotField, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Field, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisPivotField(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: CalculatedFields) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- PivotItem ---------- *)

    PROCEDURE (this: PivotItem) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotItem) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotItem) Parent* (): PivotField, NEW;
    BEGIN
        RETURN ThisPivotField(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: PivotItem) ChildItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 730, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChildItems;

    PROCEDURE (this: PivotItem) DataRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 720))
    END DataRange;

    PROCEDURE (this: PivotItem) _Default* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 0)
    END _Default;

    PROCEDURE (this: PivotItem) PUT_Default* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: PivotItem) LabelRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 719))
    END LabelRange;

    PROCEDURE (this: PivotItem) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: PivotItem) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: PivotItem) ParentItem* (): PivotItem, NEW;
    BEGIN
        RETURN ThisPivotItem(CtlC.GetAny(this, 741))
    END ParentItem;

    PROCEDURE (this: PivotItem) ParentShowDetail* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 739)
    END ParentShowDetail;

    PROCEDURE (this: PivotItem) Position* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 133)
    END Position;

    PROCEDURE (this: PivotItem) PUTPosition* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 133, p1)
    END PUTPosition;

    PROCEDURE (this: PivotItem) ShowDetail* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 585)
    END ShowDetail;

    PROCEDURE (this: PivotItem) PUTShowDetail* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 585, p1)
    END PUTShowDetail;

    PROCEDURE (this: PivotItem) SourceName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 721)
    END SourceName;

    PROCEDURE (this: PivotItem) Value* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 6)
    END Value;

    PROCEDURE (this: PivotItem) PUTValue* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: PivotItem) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: PivotItem) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: PivotItem) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: PivotItem) IsCalculated* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1512)
    END IsCalculated;

    PROCEDURE (this: PivotItem) RecordCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1478)
    END RecordCount;

    PROCEDURE (this: PivotItem) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: PivotItem) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;


    (* ---------- PivotItems ---------- *)

    PROCEDURE (this: PivotItems) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PivotItems) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PivotItems) Parent* (): PivotField, NEW;
    BEGIN
        RETURN ThisPivotField(CtlC.GetAny(this, 150))
    END Parent;

    PROCEDURE (this: PivotItems) Add* (Name: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, NIL);
    END Add;

    PROCEDURE (this: PivotItems) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: PivotItems) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: PivotItems) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- CalculatedItems ---------- *)

    PROCEDURE (this: CalculatedItems) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: CalculatedItems) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: CalculatedItems) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: CalculatedItems) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: CalculatedItems) Add* (Name: ARRAY OF CHAR; Formula: ARRAY OF CHAR): PivotItem, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[1]);
        CtlC.StrVar(Formula, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisPivotItem(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: CalculatedItems) Item* (Index: CtlT.Any): PivotItem, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisPivotItem(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: CalculatedItems) _Default* (Field: CtlT.Any): PivotItem, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Field, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisPivotItem(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: CalculatedItems) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Characters ---------- *)

    PROCEDURE (this: Characters) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Characters) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Characters) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Characters) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Characters) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Characters) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Characters) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Characters) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Characters) Insert* (String: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(String, arg[0]);
        CtlC.CallParMethod(this, 252, arg, NIL);
    END Insert;

    PROCEDURE (this: Characters) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Characters) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Characters) PhoneticCharacters* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1522)
    END PhoneticCharacters;

    PROCEDURE (this: Characters) PUTPhoneticCharacters* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1522, p1)
    END PUTPhoneticCharacters;


    (* ---------- Dialogs ---------- *)

    PROCEDURE (this: Dialogs) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Dialogs) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Dialogs) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Dialogs) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Dialogs) Item* (Index: XlBuiltInDialog): Dialog, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisDialog(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Dialogs) _Default* (Index: XlBuiltInDialog): Dialog, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisDialog(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Dialogs) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- Dialog ---------- *)

    PROCEDURE (this: Dialog) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Dialog) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Dialog) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Dialog) Show* ((* optional *) Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 496, arg, ret);
        RETURN CtlC.VarBool(ret)
    END Show;


    (* ---------- SoundNote ---------- *)

    PROCEDURE (this: SoundNote) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: SoundNote) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: SoundNote) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: SoundNote) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: SoundNote) Import* (Filename: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 917, arg, NIL);
    END Import;

    PROCEDURE (this: SoundNote) Play* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 918, NIL);
    END Play;

    PROCEDURE (this: SoundNote) Record* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 919, NIL);
    END Record;


    (* ---------- Button, hidden ---------- *)

    PROCEDURE (this: Button) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Button) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Button) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Button) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Button) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Button) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Button) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Button) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Button) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Button) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Button) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Button) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Button) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Button) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Button) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Button) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Button) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Button) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Button) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Button) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Button) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Button) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Button) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Button) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Button) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Button) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Button) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Button) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Button) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Button) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Button) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Button) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Button) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Button) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Button) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Button) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Button) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Button) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Button) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Button) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Button) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Button) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Button) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Button) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Button) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Button) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Button) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Button) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Button) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Button) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Button) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Button) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Button) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Button) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Button) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Button) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Button) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Button) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Button) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Button) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Button) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Button) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Button) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Button) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Button) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: Button) CancelButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 858)
    END CancelButton;

    PROCEDURE (this: Button) PUTCancelButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 858, p1)
    END PUTCancelButton;

    PROCEDURE (this: Button) DefaultButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 857)
    END DefaultButton;

    PROCEDURE (this: Button) PUTDefaultButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 857, p1)
    END PUTDefaultButton;

    PROCEDURE (this: Button) DismissButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 859)
    END DismissButton;

    PROCEDURE (this: Button) PUTDismissButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 859, p1)
    END PUTDismissButton;

    PROCEDURE (this: Button) HelpButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 860)
    END HelpButton;

    PROCEDURE (this: Button) PUTHelpButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 860, p1)
    END PUTHelpButton;

    PROCEDURE (this: Button) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Button) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;


    (* ---------- Buttons, hidden ---------- *)

    PROCEDURE (this: Buttons) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Buttons) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Buttons) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Buttons) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Buttons) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Buttons) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Buttons) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Buttons) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Buttons) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Buttons) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Buttons) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Buttons) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Buttons) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Buttons) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Buttons) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Buttons) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Buttons) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Buttons) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Buttons) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Buttons) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Buttons) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Buttons) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Buttons) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Buttons) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Buttons) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Buttons) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Buttons) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Buttons) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Buttons) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Buttons) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Buttons) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Buttons) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Buttons) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Buttons) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Buttons) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Buttons) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Buttons) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Buttons) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Buttons) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Buttons) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Buttons) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Buttons) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Buttons) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Buttons) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Buttons) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Buttons) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Buttons) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Buttons) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Buttons) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Buttons) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Buttons) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Buttons) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Buttons) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Buttons) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Buttons) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Buttons) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Buttons) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Buttons) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Buttons) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Buttons) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: Buttons) CancelButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 858)
    END CancelButton;

    PROCEDURE (this: Buttons) PUTCancelButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 858, p1)
    END PUTCancelButton;

    PROCEDURE (this: Buttons) DefaultButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 857)
    END DefaultButton;

    PROCEDURE (this: Buttons) PUTDefaultButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 857, p1)
    END PUTDefaultButton;

    PROCEDURE (this: Buttons) DismissButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 859)
    END DismissButton;

    PROCEDURE (this: Buttons) PUTDismissButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 859, p1)
    END PUTDismissButton;

    PROCEDURE (this: Buttons) HelpButton* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 860)
    END HelpButton;

    PROCEDURE (this: Buttons) PUTHelpButton* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 860, p1)
    END PUTHelpButton;

    PROCEDURE (this: Buttons) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Buttons) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: Buttons) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): Button, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisButton(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Buttons) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Buttons) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Buttons) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Buttons) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- CheckBox, hidden ---------- *)

    PROCEDURE (this: CheckBox) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: CheckBox) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: CheckBox) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: CheckBox) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: CheckBox) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: CheckBox) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: CheckBox) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: CheckBox) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: CheckBox) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: CheckBox) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: CheckBox) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: CheckBox) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: CheckBox) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: CheckBox) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: CheckBox) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: CheckBox) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: CheckBox) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: CheckBox) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: CheckBox) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: CheckBox) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: CheckBox) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: CheckBox) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: CheckBox) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: CheckBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: CheckBox) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: CheckBox) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: CheckBox) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: CheckBox) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: CheckBox) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: CheckBox) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: CheckBox) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: CheckBox) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: CheckBox) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: CheckBox) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: CheckBox) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: CheckBox) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: CheckBox) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: CheckBox) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: CheckBox) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: CheckBox) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: CheckBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: CheckBox) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: CheckBox) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: CheckBox) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: CheckBox) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: CheckBox) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: CheckBox) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: CheckBox) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: CheckBox) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: CheckBox) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: CheckBox) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: CheckBox) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: CheckBox) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: CheckBox) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: CheckBox) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: CheckBox) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: CheckBox) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: CheckBox) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: CheckBox) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: CheckBox) PUTValue* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, p1)
    END PUTValue;


    (* ---------- CheckBoxes, hidden ---------- *)

    PROCEDURE (this: CheckBoxes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: CheckBoxes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: CheckBoxes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: CheckBoxes) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: CheckBoxes) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: CheckBoxes) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: CheckBoxes) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: CheckBoxes) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: CheckBoxes) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: CheckBoxes) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: CheckBoxes) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: CheckBoxes) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: CheckBoxes) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: CheckBoxes) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: CheckBoxes) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: CheckBoxes) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: CheckBoxes) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: CheckBoxes) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: CheckBoxes) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: CheckBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: CheckBoxes) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: CheckBoxes) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: CheckBoxes) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: CheckBoxes) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: CheckBoxes) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: CheckBoxes) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: CheckBoxes) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: CheckBoxes) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: CheckBoxes) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: CheckBoxes) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: CheckBoxes) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: CheckBoxes) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: CheckBoxes) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: CheckBoxes) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: CheckBoxes) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: CheckBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: CheckBoxes) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: CheckBoxes) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: CheckBoxes) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: CheckBoxes) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: CheckBoxes) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: CheckBoxes) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: CheckBoxes) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: CheckBoxes) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: CheckBoxes) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: CheckBoxes) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: CheckBoxes) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: CheckBoxes) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: CheckBoxes) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: CheckBoxes) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: CheckBoxes) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: CheckBoxes) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: CheckBoxes) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: CheckBoxes) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: CheckBoxes) PUTValue* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: CheckBoxes) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): CheckBox, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisCheckBox(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: CheckBoxes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: CheckBoxes) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: CheckBoxes) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: CheckBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- OptionButton, hidden ---------- *)

    PROCEDURE (this: OptionButton) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: OptionButton) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: OptionButton) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: OptionButton) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: OptionButton) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: OptionButton) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: OptionButton) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: OptionButton) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: OptionButton) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: OptionButton) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: OptionButton) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: OptionButton) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: OptionButton) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: OptionButton) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: OptionButton) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: OptionButton) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: OptionButton) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: OptionButton) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: OptionButton) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: OptionButton) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: OptionButton) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: OptionButton) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: OptionButton) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: OptionButton) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: OptionButton) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: OptionButton) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: OptionButton) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: OptionButton) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: OptionButton) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: OptionButton) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: OptionButton) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: OptionButton) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: OptionButton) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: OptionButton) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: OptionButton) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: OptionButton) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: OptionButton) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: OptionButton) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: OptionButton) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: OptionButton) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: OptionButton) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: OptionButton) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: OptionButton) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: OptionButton) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: OptionButton) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: OptionButton) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: OptionButton) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: OptionButton) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: OptionButton) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: OptionButton) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: OptionButton) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: OptionButton) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: OptionButton) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: OptionButton) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: OptionButton) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: OptionButton) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: OptionButton) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: OptionButton) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: OptionButton) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: OptionButton) PUTValue* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: OptionButton) GroupBox* (): GroupBox, NEW;
    BEGIN
        RETURN ThisGroupBox(CtlC.GetAny(this, 833))
    END GroupBox;


    (* ---------- OptionButtons, hidden ---------- *)

    PROCEDURE (this: OptionButtons) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: OptionButtons) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: OptionButtons) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: OptionButtons) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: OptionButtons) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: OptionButtons) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: OptionButtons) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: OptionButtons) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: OptionButtons) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: OptionButtons) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: OptionButtons) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: OptionButtons) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: OptionButtons) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: OptionButtons) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: OptionButtons) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: OptionButtons) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: OptionButtons) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: OptionButtons) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: OptionButtons) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: OptionButtons) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: OptionButtons) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: OptionButtons) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: OptionButtons) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: OptionButtons) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: OptionButtons) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: OptionButtons) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: OptionButtons) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: OptionButtons) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: OptionButtons) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: OptionButtons) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: OptionButtons) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: OptionButtons) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: OptionButtons) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: OptionButtons) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: OptionButtons) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: OptionButtons) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: OptionButtons) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: OptionButtons) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: OptionButtons) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: OptionButtons) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: OptionButtons) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: OptionButtons) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: OptionButtons) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: OptionButtons) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: OptionButtons) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: OptionButtons) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: OptionButtons) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: OptionButtons) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: OptionButtons) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: OptionButtons) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: OptionButtons) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: OptionButtons) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: OptionButtons) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: OptionButtons) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: OptionButtons) PUTValue* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: OptionButtons) GroupBox* (): GroupBox, NEW;
    BEGIN
        RETURN ThisGroupBox(CtlC.GetAny(this, 833))
    END GroupBox;

    PROCEDURE (this: OptionButtons) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): OptionButton, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisOptionButton(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: OptionButtons) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: OptionButtons) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: OptionButtons) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: OptionButtons) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- EditBox, hidden ---------- *)

    PROCEDURE (this: EditBox) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: EditBox) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: EditBox) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: EditBox) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: EditBox) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: EditBox) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: EditBox) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: EditBox) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: EditBox) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: EditBox) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: EditBox) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: EditBox) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: EditBox) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: EditBox) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: EditBox) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: EditBox) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: EditBox) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: EditBox) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: EditBox) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: EditBox) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: EditBox) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: EditBox) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: EditBox) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: EditBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: EditBox) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: EditBox) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: EditBox) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: EditBox) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: EditBox) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: EditBox) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: EditBox) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: EditBox) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: EditBox) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: EditBox) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: EditBox) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: EditBox) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: EditBox) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: EditBox) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: EditBox) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: EditBox) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: EditBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: EditBox) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: EditBox) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: EditBox) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: EditBox) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: EditBox) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: EditBox) DisplayVerticalScrollBar* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: EditBox) PUTDisplayVerticalScrollBar* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 922, p1)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: EditBox) InputType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 854)
    END InputType;

    PROCEDURE (this: EditBox) PUTInputType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 854, p1)
    END PUTInputType;

    PROCEDURE (this: EditBox) LinkedObject* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 862)
    END LinkedObject;

    PROCEDURE (this: EditBox) MultiLine* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 855)
    END MultiLine;

    PROCEDURE (this: EditBox) PUTMultiLine* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 855, p1)
    END PUTMultiLine;

    PROCEDURE (this: EditBox) PasswordEdit* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1162)
    END PasswordEdit;

    PROCEDURE (this: EditBox) PUTPasswordEdit* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1162, p1)
    END PUTPasswordEdit;


    (* ---------- EditBoxes, hidden ---------- *)

    PROCEDURE (this: EditBoxes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: EditBoxes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: EditBoxes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: EditBoxes) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: EditBoxes) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: EditBoxes) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: EditBoxes) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: EditBoxes) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: EditBoxes) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: EditBoxes) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: EditBoxes) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: EditBoxes) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: EditBoxes) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: EditBoxes) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: EditBoxes) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: EditBoxes) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: EditBoxes) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: EditBoxes) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: EditBoxes) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: EditBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: EditBoxes) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: EditBoxes) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: EditBoxes) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: EditBoxes) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: EditBoxes) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: EditBoxes) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: EditBoxes) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: EditBoxes) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: EditBoxes) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: EditBoxes) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: EditBoxes) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: EditBoxes) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: EditBoxes) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: EditBoxes) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: EditBoxes) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: EditBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: EditBoxes) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: EditBoxes) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: EditBoxes) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: EditBoxes) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: EditBoxes) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: EditBoxes) DisplayVerticalScrollBar* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: EditBoxes) PUTDisplayVerticalScrollBar* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 922, p1)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: EditBoxes) InputType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 854)
    END InputType;

    PROCEDURE (this: EditBoxes) PUTInputType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 854, p1)
    END PUTInputType;

    PROCEDURE (this: EditBoxes) MultiLine* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 855)
    END MultiLine;

    PROCEDURE (this: EditBoxes) PUTMultiLine* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 855, p1)
    END PUTMultiLine;

    PROCEDURE (this: EditBoxes) PasswordEdit* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1162)
    END PasswordEdit;

    PROCEDURE (this: EditBoxes) PUTPasswordEdit* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1162, p1)
    END PUTPasswordEdit;

    PROCEDURE (this: EditBoxes) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): EditBox, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisEditBox(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: EditBoxes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: EditBoxes) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: EditBoxes) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: EditBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- ScrollBar, hidden ---------- *)

    PROCEDURE (this: ScrollBar) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ScrollBar) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ScrollBar) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ScrollBar) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: ScrollBar) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: ScrollBar) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: ScrollBar) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: ScrollBar) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: ScrollBar) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ScrollBar) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: ScrollBar) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ScrollBar) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ScrollBar) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: ScrollBar) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ScrollBar) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: ScrollBar) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ScrollBar) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ScrollBar) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: ScrollBar) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: ScrollBar) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ScrollBar) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: ScrollBar) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: ScrollBar) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: ScrollBar) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ScrollBar) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: ScrollBar) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: ScrollBar) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: ScrollBar) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: ScrollBar) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: ScrollBar) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ScrollBar) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ScrollBar) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: ScrollBar) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: ScrollBar) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: ScrollBar) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: ScrollBar) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ScrollBar) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: ScrollBar) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: ScrollBar) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: ScrollBar) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: ScrollBar) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ScrollBar) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: ScrollBar) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ScrollBar) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: ScrollBar) Max* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 842)
    END Max;

    PROCEDURE (this: ScrollBar) PUTMax* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 842, p1)
    END PUTMax;

    PROCEDURE (this: ScrollBar) Min* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 843)
    END Min;

    PROCEDURE (this: ScrollBar) PUTMin* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 843, p1)
    END PUTMin;

    PROCEDURE (this: ScrollBar) SmallChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 844)
    END SmallChange;

    PROCEDURE (this: ScrollBar) PUTSmallChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 844, p1)
    END PUTSmallChange;

    PROCEDURE (this: ScrollBar) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: ScrollBar) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: ScrollBar) LargeChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 845)
    END LargeChange;

    PROCEDURE (this: ScrollBar) PUTLargeChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 845, p1)
    END PUTLargeChange;


    (* ---------- ScrollBars, hidden ---------- *)

    PROCEDURE (this: ScrollBars) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ScrollBars) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ScrollBars) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ScrollBars) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: ScrollBars) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: ScrollBars) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: ScrollBars) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: ScrollBars) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ScrollBars) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: ScrollBars) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ScrollBars) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ScrollBars) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: ScrollBars) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ScrollBars) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ScrollBars) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ScrollBars) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: ScrollBars) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: ScrollBars) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: ScrollBars) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: ScrollBars) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ScrollBars) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: ScrollBars) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: ScrollBars) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: ScrollBars) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: ScrollBars) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: ScrollBars) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ScrollBars) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ScrollBars) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: ScrollBars) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: ScrollBars) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: ScrollBars) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ScrollBars) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: ScrollBars) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: ScrollBars) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: ScrollBars) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: ScrollBars) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ScrollBars) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: ScrollBars) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ScrollBars) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: ScrollBars) Max* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 842)
    END Max;

    PROCEDURE (this: ScrollBars) PUTMax* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 842, p1)
    END PUTMax;

    PROCEDURE (this: ScrollBars) Min* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 843)
    END Min;

    PROCEDURE (this: ScrollBars) PUTMin* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 843, p1)
    END PUTMin;

    PROCEDURE (this: ScrollBars) SmallChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 844)
    END SmallChange;

    PROCEDURE (this: ScrollBars) PUTSmallChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 844, p1)
    END PUTSmallChange;

    PROCEDURE (this: ScrollBars) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: ScrollBars) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: ScrollBars) LargeChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 845)
    END LargeChange;

    PROCEDURE (this: ScrollBars) PUTLargeChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 845, p1)
    END PUTLargeChange;

    PROCEDURE (this: ScrollBars) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): ScrollBar, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisScrollBar(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: ScrollBars) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: ScrollBars) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: ScrollBars) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: ScrollBars) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- ListBox, hidden ---------- *)

    PROCEDURE (this: ListBox) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ListBox) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ListBox) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ListBox) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: ListBox) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: ListBox) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: ListBox) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: ListBox) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: ListBox) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ListBox) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: ListBox) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ListBox) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ListBox) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: ListBox) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ListBox) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: ListBox) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ListBox) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ListBox) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: ListBox) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: ListBox) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ListBox) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: ListBox) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: ListBox) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: ListBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ListBox) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: ListBox) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: ListBox) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: ListBox) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: ListBox) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: ListBox) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ListBox) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ListBox) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: ListBox) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: ListBox) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: ListBox) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: ListBox) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ListBox) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: ListBox) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: ListBox) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, NIL);
    END AddItem;

    PROCEDURE (this: ListBox) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ListBox) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: ListBox) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: ListBox) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: ListBox) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ListBox) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: ListBox) LinkedObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 862)
    END LinkedObject;

    PROCEDURE (this: ListBox) List* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 861, arg, ret);
        RETURN CtlC.VarAny(ret)
    END List;

    PROCEDURE (this: ListBox) ListCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 849)
    END ListCount;

    PROCEDURE (this: ListBox) ListFillRange* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 847)
    END ListFillRange;

    PROCEDURE (this: ListBox) PUTListFillRange* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 847, p1)
    END PUTListFillRange;

    PROCEDURE (this: ListBox) ListIndex* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 850)
    END ListIndex;

    PROCEDURE (this: ListBox) PUTListIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 850, p1)
    END PUTListIndex;

    PROCEDURE (this: ListBox) MultiSelect* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 32)
    END MultiSelect;

    PROCEDURE (this: ListBox) PUTMultiSelect* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 32, p1)
    END PUTMultiSelect;

    PROCEDURE (this: ListBox) RemoveAllItems* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 853, NIL);
    END RemoveAllItems;

    PROCEDURE (this: ListBox) RemoveItem* (Index: INTEGER; (* optional *) Count: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, NIL);
    END RemoveItem;

    PROCEDURE (this: ListBox) Selected* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1123, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Selected;

    PROCEDURE (this: ListBox) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: ListBox) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;


    (* ---------- ListBoxes, hidden ---------- *)

    PROCEDURE (this: ListBoxes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ListBoxes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ListBoxes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ListBoxes) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: ListBoxes) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: ListBoxes) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: ListBoxes) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: ListBoxes) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ListBoxes) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: ListBoxes) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ListBoxes) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ListBoxes) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: ListBoxes) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ListBoxes) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ListBoxes) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ListBoxes) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: ListBoxes) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: ListBoxes) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: ListBoxes) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: ListBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ListBoxes) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: ListBoxes) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: ListBoxes) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: ListBoxes) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: ListBoxes) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: ListBoxes) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ListBoxes) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ListBoxes) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: ListBoxes) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: ListBoxes) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: ListBoxes) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ListBoxes) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: ListBoxes) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: ListBoxes) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, NIL);
    END AddItem;

    PROCEDURE (this: ListBoxes) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ListBoxes) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: ListBoxes) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: ListBoxes) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: ListBoxes) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ListBoxes) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: ListBoxes) List* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 861, arg, ret);
        RETURN CtlC.VarAny(ret)
    END List;

    PROCEDURE (this: ListBoxes) ListFillRange* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 847)
    END ListFillRange;

    PROCEDURE (this: ListBoxes) PUTListFillRange* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 847, p1)
    END PUTListFillRange;

    PROCEDURE (this: ListBoxes) ListIndex* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 850)
    END ListIndex;

    PROCEDURE (this: ListBoxes) PUTListIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 850, p1)
    END PUTListIndex;

    PROCEDURE (this: ListBoxes) MultiSelect* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 32)
    END MultiSelect;

    PROCEDURE (this: ListBoxes) PUTMultiSelect* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 32, p1)
    END PUTMultiSelect;

    PROCEDURE (this: ListBoxes) RemoveAllItems* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 853, NIL);
    END RemoveAllItems;

    PROCEDURE (this: ListBoxes) RemoveItem* (Index: INTEGER; (* optional *) Count: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, NIL);
    END RemoveItem;

    PROCEDURE (this: ListBoxes) Selected* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1123, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Selected;

    PROCEDURE (this: ListBoxes) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: ListBoxes) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: ListBoxes) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): ListBox, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisListBox(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: ListBoxes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: ListBoxes) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: ListBoxes) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: ListBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- GroupBox, hidden ---------- *)

    PROCEDURE (this: GroupBox) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: GroupBox) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: GroupBox) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: GroupBox) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: GroupBox) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: GroupBox) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: GroupBox) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: GroupBox) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: GroupBox) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: GroupBox) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: GroupBox) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: GroupBox) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: GroupBox) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: GroupBox) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: GroupBox) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: GroupBox) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: GroupBox) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: GroupBox) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: GroupBox) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: GroupBox) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: GroupBox) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: GroupBox) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: GroupBox) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: GroupBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupBox) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: GroupBox) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupBox) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: GroupBox) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: GroupBox) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: GroupBox) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: GroupBox) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: GroupBox) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: GroupBox) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: GroupBox) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: GroupBox) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: GroupBox) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: GroupBox) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupBox) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: GroupBox) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: GroupBox) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: GroupBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: GroupBox) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: GroupBox) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: GroupBox) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: GroupBox) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: GroupBox) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: GroupBox) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: GroupBox) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: GroupBox) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: GroupBox) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: GroupBox) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: GroupBox) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;


    (* ---------- GroupBoxes, hidden ---------- *)

    PROCEDURE (this: GroupBoxes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: GroupBoxes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: GroupBoxes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: GroupBoxes) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: GroupBoxes) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: GroupBoxes) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: GroupBoxes) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: GroupBoxes) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: GroupBoxes) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: GroupBoxes) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: GroupBoxes) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: GroupBoxes) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: GroupBoxes) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: GroupBoxes) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: GroupBoxes) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: GroupBoxes) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: GroupBoxes) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: GroupBoxes) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: GroupBoxes) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: GroupBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupBoxes) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: GroupBoxes) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupBoxes) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: GroupBoxes) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: GroupBoxes) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: GroupBoxes) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: GroupBoxes) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: GroupBoxes) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: GroupBoxes) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: GroupBoxes) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: GroupBoxes) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: GroupBoxes) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupBoxes) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: GroupBoxes) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: GroupBoxes) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: GroupBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: GroupBoxes) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: GroupBoxes) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: GroupBoxes) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: GroupBoxes) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: GroupBoxes) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: GroupBoxes) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: GroupBoxes) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: GroupBoxes) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: GroupBoxes) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: GroupBoxes) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: GroupBoxes) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: GroupBoxes) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): GroupBox, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisGroupBox(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: GroupBoxes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: GroupBoxes) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: GroupBoxes) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: GroupBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- DropDown, hidden ---------- *)

    PROCEDURE (this: DropDown) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DropDown) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DropDown) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DropDown) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: DropDown) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: DropDown) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: DropDown) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: DropDown) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: DropDown) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DropDown) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: DropDown) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: DropDown) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: DropDown) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: DropDown) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: DropDown) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: DropDown) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: DropDown) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: DropDown) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: DropDown) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: DropDown) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: DropDown) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: DropDown) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: DropDown) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: DropDown) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: DropDown) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: DropDown) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: DropDown) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: DropDown) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: DropDown) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: DropDown) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: DropDown) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: DropDown) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: DropDown) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: DropDown) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: DropDown) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: DropDown) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: DropDown) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: DropDown) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: DropDown) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, NIL);
    END AddItem;

    PROCEDURE (this: DropDown) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: DropDown) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: DropDown) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: DropDown) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: DropDown) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: DropDown) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: DropDown) LinkedObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 862)
    END LinkedObject;

    PROCEDURE (this: DropDown) List* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 861, arg, ret);
        RETURN CtlC.VarAny(ret)
    END List;

    PROCEDURE (this: DropDown) ListCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 849)
    END ListCount;

    PROCEDURE (this: DropDown) ListFillRange* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 847)
    END ListFillRange;

    PROCEDURE (this: DropDown) PUTListFillRange* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 847, p1)
    END PUTListFillRange;

    PROCEDURE (this: DropDown) ListIndex* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 850)
    END ListIndex;

    PROCEDURE (this: DropDown) PUTListIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 850, p1)
    END PUTListIndex;

    PROCEDURE (this: DropDown) RemoveAllItems* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 853, NIL);
    END RemoveAllItems;

    PROCEDURE (this: DropDown) RemoveItem* (Index: INTEGER; (* optional *) Count: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, NIL);
    END RemoveItem;

    PROCEDURE (this: DropDown) Selected* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1123, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Selected;

    PROCEDURE (this: DropDown) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: DropDown) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: DropDown) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: DropDown) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: DropDown) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: DropDown) DropDownLines* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 848)
    END DropDownLines;

    PROCEDURE (this: DropDown) PUTDropDownLines* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 848, p1)
    END PUTDropDownLines;

    PROCEDURE (this: DropDown) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: DropDown) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;


    (* ---------- DropDowns, hidden ---------- *)

    PROCEDURE (this: DropDowns) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DropDowns) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DropDowns) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DropDowns) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: DropDowns) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: DropDowns) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: DropDowns) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: DropDowns) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DropDowns) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: DropDowns) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: DropDowns) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: DropDowns) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: DropDowns) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: DropDowns) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: DropDowns) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: DropDowns) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: DropDowns) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: DropDowns) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: DropDowns) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: DropDowns) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: DropDowns) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: DropDowns) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: DropDowns) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: DropDowns) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: DropDowns) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: DropDowns) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: DropDowns) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: DropDowns) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: DropDowns) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: DropDowns) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: DropDowns) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: DropDowns) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: DropDowns) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: DropDowns) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, NIL);
    END AddItem;

    PROCEDURE (this: DropDowns) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: DropDowns) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: DropDowns) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: DropDowns) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: DropDowns) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: DropDowns) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: DropDowns) List* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 861, arg, ret);
        RETURN CtlC.VarAny(ret)
    END List;

    PROCEDURE (this: DropDowns) ListFillRange* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 847)
    END ListFillRange;

    PROCEDURE (this: DropDowns) PUTListFillRange* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 847, p1)
    END PUTListFillRange;

    PROCEDURE (this: DropDowns) ListIndex* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 850)
    END ListIndex;

    PROCEDURE (this: DropDowns) PUTListIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 850, p1)
    END PUTListIndex;

    PROCEDURE (this: DropDowns) RemoveAllItems* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 853, NIL);
    END RemoveAllItems;

    PROCEDURE (this: DropDowns) RemoveItem* (Index: INTEGER; (* optional *) Count: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, NIL);
    END RemoveItem;

    PROCEDURE (this: DropDowns) Selected* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1123, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Selected;

    PROCEDURE (this: DropDowns) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: DropDowns) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: DropDowns) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: DropDowns) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: DropDowns) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: DropDowns) DropDownLines* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 848)
    END DropDownLines;

    PROCEDURE (this: DropDowns) PUTDropDownLines* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 848, p1)
    END PUTDropDownLines;

    PROCEDURE (this: DropDowns) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: DropDowns) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: DropDowns) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL; (* optional *) Editable: CtlT.Any): DropDown, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[4]);
        CtlC.RealVar(Top, arg[3]);
        CtlC.RealVar(Width, arg[2]);
        CtlC.RealVar(Height, arg[1]);
        CtlC.AnyVar(Editable, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisDropDown(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: DropDowns) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: DropDowns) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: DropDowns) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: DropDowns) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Spinner, hidden ---------- *)

    PROCEDURE (this: Spinner) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Spinner) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Spinner) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Spinner) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Spinner) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Spinner) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Spinner) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Spinner) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Spinner) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Spinner) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Spinner) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Spinner) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Spinner) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Spinner) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Spinner) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Spinner) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Spinner) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Spinner) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Spinner) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Spinner) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Spinner) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Spinner) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Spinner) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Spinner) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Spinner) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Spinner) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Spinner) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Spinner) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Spinner) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Spinner) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Spinner) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Spinner) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Spinner) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Spinner) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Spinner) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Spinner) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Spinner) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Spinner) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Spinner) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: Spinner) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: Spinner) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: Spinner) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: Spinner) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: Spinner) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: Spinner) Max* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 842)
    END Max;

    PROCEDURE (this: Spinner) PUTMax* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 842, p1)
    END PUTMax;

    PROCEDURE (this: Spinner) Min* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 843)
    END Min;

    PROCEDURE (this: Spinner) PUTMin* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 843, p1)
    END PUTMin;

    PROCEDURE (this: Spinner) SmallChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 844)
    END SmallChange;

    PROCEDURE (this: Spinner) PUTSmallChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 844, p1)
    END PUTSmallChange;

    PROCEDURE (this: Spinner) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: Spinner) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;


    (* ---------- Spinners, hidden ---------- *)

    PROCEDURE (this: Spinners) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Spinners) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Spinners) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Spinners) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Spinners) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Spinners) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Spinners) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Spinners) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Spinners) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Spinners) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Spinners) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Spinners) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Spinners) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Spinners) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Spinners) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Spinners) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Spinners) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Spinners) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Spinners) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Spinners) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Spinners) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Spinners) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Spinners) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Spinners) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Spinners) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Spinners) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Spinners) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Spinners) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Spinners) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Spinners) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Spinners) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Spinners) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Spinners) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Spinners) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: Spinners) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: Spinners) Display3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1122)
    END Display3DShading;

    PROCEDURE (this: Spinners) PUTDisplay3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1122, p1)
    END PUTDisplay3DShading;

    PROCEDURE (this: Spinners) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: Spinners) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: Spinners) Max* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 842)
    END Max;

    PROCEDURE (this: Spinners) PUTMax* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 842, p1)
    END PUTMax;

    PROCEDURE (this: Spinners) Min* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 843)
    END Min;

    PROCEDURE (this: Spinners) PUTMin* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 843, p1)
    END PUTMin;

    PROCEDURE (this: Spinners) SmallChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 844)
    END SmallChange;

    PROCEDURE (this: Spinners) PUTSmallChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 844, p1)
    END PUTSmallChange;

    PROCEDURE (this: Spinners) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: Spinners) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: Spinners) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): Spinner, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisSpinner(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Spinners) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Spinners) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Spinners) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Spinners) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- DialogFrame, hidden ---------- *)

    PROCEDURE (this: DialogFrame) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DialogFrame) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DialogFrame) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DialogFrame) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: DialogFrame) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: DialogFrame) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: DialogFrame) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: DialogFrame) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: DialogFrame) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: DialogFrame) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: DialogFrame) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: DialogFrame) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: DialogFrame) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: DialogFrame) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: DialogFrame) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: DialogFrame) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: DialogFrame) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: DialogFrame) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: DialogFrame) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: DialogFrame) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: DialogFrame) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: DialogFrame) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: DialogFrame) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: DialogFrame) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: DialogFrame) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: DialogFrame) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: DialogFrame) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: DialogFrame) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;


    (* ---------- Label, hidden ---------- *)

    PROCEDURE (this: Label) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Label) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Label) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Label) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Label) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Label) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Label) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Label) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Label) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Label) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Label) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Label) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Label) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Label) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Label) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Label) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Label) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Label) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Label) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Label) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Label) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Label) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Label) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Label) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Label) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Label) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Label) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Label) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Label) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Label) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Label) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Label) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Label) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Label) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Label) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Label) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Label) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Label) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Label) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Label) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Label) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Label) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Label) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Label) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Label) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Label) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Label) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Label) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: Label) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Label) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;


    (* ---------- Labels, hidden ---------- *)

    PROCEDURE (this: Labels) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Labels) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Labels) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Labels) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Labels) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Labels) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Labels) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Labels) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Labels) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Labels) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Labels) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Labels) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Labels) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Labels) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Labels) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Labels) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Labels) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Labels) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Labels) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Labels) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Labels) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Labels) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Labels) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Labels) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Labels) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Labels) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Labels) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Labels) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Labels) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Labels) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Labels) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Labels) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Labels) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Labels) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Labels) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Labels) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Labels) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Labels) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Labels) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Labels) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Labels) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Labels) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Labels) PUTAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, p1)
    END PUTAccelerator;

    PROCEDURE (this: Labels) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Labels) PUTPhoneticAccelerator* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, p1)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: Labels) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): Label, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisLabel(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Labels) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Labels) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Labels) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Labels) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Panes ---------- *)

    PROCEDURE (this: Panes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Panes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Panes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Panes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Panes) Item* (Index: INTEGER): Pane, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisPane(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Panes) _Default* (Index: INTEGER): Pane, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisPane(CtlC.VarAny(ret))
    END _Default;


    (* ---------- Pane ---------- *)

    PROCEDURE (this: Pane) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Pane) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Pane) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Pane) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: Pane) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Pane) LargeScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 547, arg, NIL);
    END LargeScroll;

    PROCEDURE (this: Pane) ScrollColumn* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 654)
    END ScrollColumn;

    PROCEDURE (this: Pane) PUTScrollColumn* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 654, p1)
    END PUTScrollColumn;

    PROCEDURE (this: Pane) ScrollRow* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 655)
    END ScrollRow;

    PROCEDURE (this: Pane) PUTScrollRow* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 655, p1)
    END PUTScrollRow;

    PROCEDURE (this: Pane) SmallScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 548, arg, NIL);
    END SmallScroll;

    PROCEDURE (this: Pane) VisibleRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1118))
    END VisibleRange;


    (* ---------- Scenarios ---------- *)

    PROCEDURE (this: Scenarios) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Scenarios) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Scenarios) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Scenarios) Add* (Name: ARRAY OF CHAR; ChangingCells: CtlT.Any; (* optional *) Values: CtlT.Any; Comment: CtlT.Any; Locked: CtlT.Any; Hidden: CtlT.Any): Scenario, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[5]);
        CtlC.AnyVar(ChangingCells, arg[4]);
        CtlC.AnyVar(Values, arg[3]);
        CtlC.AnyVar(Comment, arg[2]);
        CtlC.AnyVar(Locked, arg[1]);
        CtlC.AnyVar(Hidden, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisScenario(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Scenarios) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Scenarios) CreateSummary* (ReportType: XlSummaryReportType; (* optional *) ResultCells: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(ReportType, arg[1]);
        CtlC.AnyVar(ResultCells, arg[0]);
        CtlC.CallParMethod(this, 913, arg, NIL);
    END CreateSummary;

    PROCEDURE (this: Scenarios) Item* (Index: CtlT.Any): Scenario, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisScenario(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Scenarios) Merge* (Source: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[0]);
        CtlC.CallParMethod(this, 564, arg, NIL);
    END Merge;

    PROCEDURE (this: Scenarios) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Scenario ---------- *)

    PROCEDURE (this: Scenario) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Scenario) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Scenario) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Scenario) ChangeScenario* (ChangingCells: CtlT.Any; (* optional *) Values: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ChangingCells, arg[1]);
        CtlC.AnyVar(Values, arg[0]);
        CtlC.CallParMethod(this, 912, arg, NIL);
    END ChangeScenario;

    PROCEDURE (this: Scenario) ChangingCells* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 911))
    END ChangingCells;

    PROCEDURE (this: Scenario) Comment* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 910)
    END Comment;

    PROCEDURE (this: Scenario) PUTComment* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 910, p1)
    END PUTComment;

    PROCEDURE (this: Scenario) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Scenario) Hidden* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 268)
    END Hidden;

    PROCEDURE (this: Scenario) PUTHidden* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 268, p1)
    END PUTHidden;

    PROCEDURE (this: Scenario) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Scenario) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Scenario) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Scenario) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Scenario) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Scenario) Show* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 496, NIL);
    END Show;

    PROCEDURE (this: Scenario) Values* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 164, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Values;


    (* ---------- GroupObject, hidden ---------- *)

    PROCEDURE (this: GroupObject) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: GroupObject) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: GroupObject) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: GroupObject) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: GroupObject) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: GroupObject) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: GroupObject) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: GroupObject) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: GroupObject) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: GroupObject) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: GroupObject) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: GroupObject) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: GroupObject) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: GroupObject) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: GroupObject) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: GroupObject) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: GroupObject) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: GroupObject) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: GroupObject) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: GroupObject) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: GroupObject) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: GroupObject) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: GroupObject) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: GroupObject) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupObject) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: GroupObject) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupObject) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: GroupObject) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: GroupObject) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: GroupObject) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: GroupObject) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: GroupObject) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: GroupObject) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: GroupObject) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: GroupObject) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: GroupObject) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: GroupObject) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupObject) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: GroupObject) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: GroupObject) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: GroupObject) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: GroupObject) PUTArrowHeadLength* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, p1)
    END PUTArrowHeadLength;

    PROCEDURE (this: GroupObject) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: GroupObject) PUTArrowHeadStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, p1)
    END PUTArrowHeadStyle;

    PROCEDURE (this: GroupObject) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: GroupObject) PUTArrowHeadWidth* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, p1)
    END PUTArrowHeadWidth;

    PROCEDURE (this: GroupObject) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: GroupObject) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: GroupObject) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: GroupObject) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: GroupObject) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: GroupObject) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: GroupObject) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: GroupObject) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: GroupObject) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: GroupObject) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: GroupObject) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: GroupObject) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: GroupObject) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: GroupObject) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: GroupObject) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: GroupObject) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: GroupObject) Ungroup* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN CtlC.VarObj(ret)
    END Ungroup;

    PROCEDURE (this: GroupObject) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: GroupObject) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: GroupObject) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: GroupObject) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;


    (* ---------- GroupObjects, hidden ---------- *)

    PROCEDURE (this: GroupObjects) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: GroupObjects) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: GroupObjects) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: GroupObjects) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: GroupObjects) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: GroupObjects) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: GroupObjects) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: GroupObjects) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: GroupObjects) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: GroupObjects) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: GroupObjects) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: GroupObjects) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: GroupObjects) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: GroupObjects) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: GroupObjects) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: GroupObjects) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: GroupObjects) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: GroupObjects) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: GroupObjects) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: GroupObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupObjects) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: GroupObjects) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupObjects) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: GroupObjects) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: GroupObjects) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: GroupObjects) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: GroupObjects) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: GroupObjects) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: GroupObjects) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: GroupObjects) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: GroupObjects) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: GroupObjects) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupObjects) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: GroupObjects) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: GroupObjects) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: GroupObjects) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: GroupObjects) PUTArrowHeadLength* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, p1)
    END PUTArrowHeadLength;

    PROCEDURE (this: GroupObjects) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: GroupObjects) PUTArrowHeadStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, p1)
    END PUTArrowHeadStyle;

    PROCEDURE (this: GroupObjects) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: GroupObjects) PUTArrowHeadWidth* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, p1)
    END PUTArrowHeadWidth;

    PROCEDURE (this: GroupObjects) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: GroupObjects) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: GroupObjects) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: GroupObjects) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: GroupObjects) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: GroupObjects) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: GroupObjects) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: GroupObjects) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: GroupObjects) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: GroupObjects) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: GroupObjects) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: GroupObjects) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: GroupObjects) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: GroupObjects) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: GroupObjects) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: GroupObjects) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: GroupObjects) Ungroup* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN CtlC.VarObj(ret)
    END Ungroup;

    PROCEDURE (this: GroupObjects) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: GroupObjects) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: GroupObjects) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: GroupObjects) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: GroupObjects) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: GroupObjects) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: GroupObjects) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: GroupObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Line, hidden ---------- *)

    PROCEDURE (this: Line) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Line) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Line) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Line) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Line) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Line) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Line) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Line) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Line) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Line) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Line) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Line) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Line) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Line) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Line) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Line) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Line) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Line) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Line) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Line) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Line) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Line) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Line) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Line) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Line) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Line) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Line) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Line) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Line) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Line) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Line) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Line) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Line) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Line) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Line) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Line) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Line) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Line) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Line) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: Line) PUTArrowHeadLength* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, p1)
    END PUTArrowHeadLength;

    PROCEDURE (this: Line) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: Line) PUTArrowHeadStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, p1)
    END PUTArrowHeadStyle;

    PROCEDURE (this: Line) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: Line) PUTArrowHeadWidth* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, p1)
    END PUTArrowHeadWidth;

    PROCEDURE (this: Line) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;


    (* ---------- Lines, hidden ---------- *)

    PROCEDURE (this: Lines) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Lines) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Lines) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Lines) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Lines) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Lines) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Lines) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Lines) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Lines) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Lines) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Lines) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Lines) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Lines) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Lines) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Lines) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Lines) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Lines) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Lines) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Lines) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Lines) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Lines) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Lines) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Lines) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Lines) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Lines) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Lines) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Lines) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Lines) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Lines) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Lines) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Lines) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Lines) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Lines) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Lines) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: Lines) PUTArrowHeadLength* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, p1)
    END PUTArrowHeadLength;

    PROCEDURE (this: Lines) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: Lines) PUTArrowHeadStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, p1)
    END PUTArrowHeadStyle;

    PROCEDURE (this: Lines) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: Lines) PUTArrowHeadWidth* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, p1)
    END PUTArrowHeadWidth;

    PROCEDURE (this: Lines) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Lines) Add* (X1: REAL; Y1: REAL; X2: REAL; Y2: REAL): Line, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(X1, arg[3]);
        CtlC.RealVar(Y1, arg[2]);
        CtlC.RealVar(X2, arg[1]);
        CtlC.RealVar(Y2, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisLine(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Lines) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Lines) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Lines) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Lines) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Rectangle, hidden ---------- *)

    PROCEDURE (this: Rectangle) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Rectangle) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Rectangle) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Rectangle) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Rectangle) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Rectangle) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Rectangle) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Rectangle) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Rectangle) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Rectangle) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Rectangle) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Rectangle) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Rectangle) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Rectangle) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Rectangle) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Rectangle) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Rectangle) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Rectangle) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Rectangle) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Rectangle) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Rectangle) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Rectangle) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Rectangle) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Rectangle) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Rectangle) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Rectangle) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Rectangle) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Rectangle) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Rectangle) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Rectangle) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Rectangle) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Rectangle) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Rectangle) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Rectangle) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Rectangle) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Rectangle) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Rectangle) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Rectangle) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Rectangle) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Rectangle) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Rectangle) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Rectangle) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Rectangle) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Rectangle) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Rectangle) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Rectangle) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Rectangle) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Rectangle) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Rectangle) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Rectangle) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Rectangle) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Rectangle) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Rectangle) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Rectangle) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Rectangle) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Rectangle) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Rectangle) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Rectangle) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Rectangle) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Rectangle) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Rectangle) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Rectangle) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Rectangle) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Rectangle) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Rectangle) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Rectangle) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Rectangle) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Rectangle) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: Rectangle) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;


    (* ---------- Rectangles, hidden ---------- *)

    PROCEDURE (this: Rectangles) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Rectangles) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Rectangles) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Rectangles) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Rectangles) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Rectangles) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Rectangles) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Rectangles) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Rectangles) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Rectangles) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Rectangles) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Rectangles) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Rectangles) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Rectangles) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Rectangles) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Rectangles) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Rectangles) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Rectangles) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Rectangles) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Rectangles) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Rectangles) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Rectangles) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Rectangles) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Rectangles) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Rectangles) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Rectangles) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Rectangles) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Rectangles) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Rectangles) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Rectangles) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Rectangles) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Rectangles) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Rectangles) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Rectangles) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Rectangles) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Rectangles) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Rectangles) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Rectangles) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Rectangles) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Rectangles) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Rectangles) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Rectangles) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Rectangles) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Rectangles) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Rectangles) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Rectangles) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Rectangles) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Rectangles) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Rectangles) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Rectangles) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Rectangles) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Rectangles) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Rectangles) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Rectangles) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Rectangles) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Rectangles) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Rectangles) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Rectangles) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Rectangles) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Rectangles) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Rectangles) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Rectangles) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Rectangles) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: Rectangles) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: Rectangles) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): Rectangle, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisRectangle(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Rectangles) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Rectangles) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Rectangles) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Rectangles) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Oval, hidden ---------- *)

    PROCEDURE (this: Oval) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Oval) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Oval) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Oval) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Oval) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Oval) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Oval) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Oval) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Oval) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Oval) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Oval) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Oval) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Oval) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Oval) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Oval) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Oval) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Oval) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Oval) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Oval) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Oval) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Oval) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Oval) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Oval) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Oval) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Oval) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Oval) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Oval) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Oval) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Oval) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Oval) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Oval) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Oval) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Oval) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Oval) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Oval) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Oval) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Oval) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Oval) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Oval) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Oval) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Oval) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Oval) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Oval) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Oval) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Oval) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Oval) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Oval) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Oval) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Oval) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Oval) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Oval) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Oval) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Oval) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Oval) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Oval) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Oval) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Oval) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Oval) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Oval) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Oval) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Oval) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Oval) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Oval) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Oval) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Oval) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Oval) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Oval) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;


    (* ---------- Ovals, hidden ---------- *)

    PROCEDURE (this: Ovals) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Ovals) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Ovals) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Ovals) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Ovals) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Ovals) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Ovals) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Ovals) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Ovals) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Ovals) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Ovals) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Ovals) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Ovals) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Ovals) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Ovals) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Ovals) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Ovals) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Ovals) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Ovals) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Ovals) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Ovals) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Ovals) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Ovals) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Ovals) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Ovals) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Ovals) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Ovals) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Ovals) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Ovals) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Ovals) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Ovals) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Ovals) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Ovals) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Ovals) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Ovals) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Ovals) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Ovals) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Ovals) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Ovals) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Ovals) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Ovals) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Ovals) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Ovals) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Ovals) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Ovals) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Ovals) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Ovals) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Ovals) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Ovals) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Ovals) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Ovals) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Ovals) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Ovals) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Ovals) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Ovals) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Ovals) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Ovals) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Ovals) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Ovals) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Ovals) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Ovals) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Ovals) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Ovals) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): Oval, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisOval(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Ovals) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Ovals) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Ovals) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Ovals) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Arc, hidden ---------- *)

    PROCEDURE (this: Arc) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Arc) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Arc) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Arc) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Arc) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Arc) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Arc) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Arc) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Arc) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Arc) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Arc) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Arc) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Arc) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Arc) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Arc) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Arc) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Arc) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Arc) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Arc) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Arc) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Arc) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Arc) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Arc) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Arc) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Arc) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Arc) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Arc) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Arc) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Arc) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Arc) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Arc) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Arc) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Arc) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Arc) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Arc) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Arc) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Arc) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Arc) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Arc) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Arc) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Arc) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Arc) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Arc) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Arc) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Arc) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Arc) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Arc) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Arc) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Arc) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Arc) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Arc) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Arc) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Arc) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Arc) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Arc) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Arc) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Arc) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Arc) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Arc) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Arc) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Arc) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Arc) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Arc) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Arc) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Arc) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;


    (* ---------- Arcs, hidden ---------- *)

    PROCEDURE (this: Arcs) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Arcs) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Arcs) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Arcs) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Arcs) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Arcs) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Arcs) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Arcs) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Arcs) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Arcs) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Arcs) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Arcs) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Arcs) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Arcs) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Arcs) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Arcs) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Arcs) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Arcs) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Arcs) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Arcs) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Arcs) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Arcs) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Arcs) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Arcs) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Arcs) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Arcs) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Arcs) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Arcs) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Arcs) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Arcs) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Arcs) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Arcs) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Arcs) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Arcs) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Arcs) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Arcs) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Arcs) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Arcs) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Arcs) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Arcs) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Arcs) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Arcs) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Arcs) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Arcs) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Arcs) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Arcs) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Arcs) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Arcs) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Arcs) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Arcs) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Arcs) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Arcs) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Arcs) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Arcs) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Arcs) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Arcs) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Arcs) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Arcs) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Arcs) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Arcs) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Arcs) Add* (X1: REAL; Y1: REAL; X2: REAL; Y2: REAL): Arc, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(X1, arg[3]);
        CtlC.RealVar(Y1, arg[2]);
        CtlC.RealVar(X2, arg[1]);
        CtlC.RealVar(Y2, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisArc(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Arcs) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Arcs) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Arcs) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Arcs) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- OLEObjectEvents, hidden ---------- *)

    PROCEDURE (this: OLEObjectEvents) GotFocus* (), NEW, ABSTRACT;

    PROCEDURE (this: OLEObjectEvents) LostFocus* (), NEW, ABSTRACT;

    PROCEDURE (this: OLEObjectEvents) Invoke* (id, n: INTEGER; VAR par: CtlT.ParList; VAR ret: CtlT.Variant);
    BEGIN
        CASE id OF
        | 1541: ASSERT(n = 0, 11); this.GotFocus()
        | 1542: ASSERT(n = 0, 11); this.LostFocus()
        END
    END Invoke;

    PROCEDURE (this: OLEObjectEvents) GetIID* (OUT iid: CtlT.GUID);
    BEGIN
        iid := "{00024410-0000-0000-C000-000000000046}"
    END GetIID;


    (* ---------- _OLEObject ---------- *)

    PROCEDURE (this: _OLEObject) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, -2147417964))
    END Application;

    PROCEDURE (this: _OLEObject) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, -2147417963)
    END Creator;

    PROCEDURE (this: _OLEObject) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, -2147417962)
    END Parent;

    PROCEDURE (this: _OLEObject) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, -2147417497))
    END BottomRightCell;

    PROCEDURE (this: _OLEObject) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, -2147417510, NIL);
    END BringToFront;

    PROCEDURE (this: _OLEObject) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, -2147417561, NIL);
    END Copy;

    PROCEDURE (this: _OLEObject) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, -2147417899, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: _OLEObject) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, -2147417547, NIL);
    END Cut;

    PROCEDURE (this: _OLEObject) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, -2147417995, NIL);
    END Delete;

    PROCEDURE (this: _OLEObject) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -2147417073, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: _OLEObject) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, -2147417512)
    END Enabled;

    PROCEDURE (this: _OLEObject) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, -2147417512, p1)
    END PUTEnabled;

    PROCEDURE (this: _OLEObject) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, -2147417989)
    END Height;

    PROCEDURE (this: _OLEObject) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, -2147417989, p1)
    END PUTHeight;

    PROCEDURE (this: _OLEObject) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, -2147417626)
    END Index;

    PROCEDURE (this: _OLEObject) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, -2147417985)
    END Left;

    PROCEDURE (this: _OLEObject) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, -2147417985, p1)
    END PUTLeft;

    PROCEDURE (this: _OLEObject) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, -2147417843)
    END Locked;

    PROCEDURE (this: _OLEObject) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, -2147417843, p1)
    END PUTLocked;

    PROCEDURE (this: _OLEObject) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147418002)
    END Name;

    PROCEDURE (this: _OLEObject) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147418002, p1)
    END PUTName;

    PROCEDURE (this: _OLEObject) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147417516)
    END OnAction;

    PROCEDURE (this: _OLEObject) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147417516, p1)
    END PUTOnAction;

    PROCEDURE (this: _OLEObject) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, -2147417495)
    END Placement;

    PROCEDURE (this: _OLEObject) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, -2147417495, p1)
    END PUTPlacement;

    PROCEDURE (this: _OLEObject) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, -2147417494)
    END PrintObject;

    PROCEDURE (this: _OLEObject) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, -2147417494, p1)
    END PUTPrintObject;

    PROCEDURE (this: _OLEObject) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, -2147417877, arg, NIL);
    END Select;

    PROCEDURE (this: _OLEObject) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, -2147417507, NIL);
    END SendToBack;

    PROCEDURE (this: _OLEObject) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, -2147417986)
    END Top;

    PROCEDURE (this: _OLEObject) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, -2147417986, p1)
    END PUTTop;

    PROCEDURE (this: _OLEObject) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, -2147417492))
    END TopLeftCell;

    PROCEDURE (this: _OLEObject) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, -2147417554)
    END Visible;

    PROCEDURE (this: _OLEObject) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, -2147417554, p1)
    END PUTVisible;

    PROCEDURE (this: _OLEObject) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, -2147417990)
    END Width;

    PROCEDURE (this: _OLEObject) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, -2147417990, p1)
    END PUTWidth;

    PROCEDURE (this: _OLEObject) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, -2147417490)
    END ZOrder;

    PROCEDURE (this: _OLEObject) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, -2147416584))
    END ShapeRange;

    PROCEDURE (this: _OLEObject) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, -2147417984))
    END Border;

    PROCEDURE (this: _OLEObject) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, -2147417983))
    END Interior;

    PROCEDURE (this: _OLEObject) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, -2147418009)
    END Shadow;

    PROCEDURE (this: _OLEObject) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, -2147418009, p1)
    END PUTShadow;

    PROCEDURE (this: _OLEObject) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, -2147417808, NIL);
    END Activate;

    PROCEDURE (this: _OLEObject) AutoLoad* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, -2147416926)
    END AutoLoad;

    PROCEDURE (this: _OLEObject) PUTAutoLoad* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, -2147416926, p1)
    END PUTAutoLoad;

    PROCEDURE (this: _OLEObject) AutoUpdate* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, -2147417064)
    END AutoUpdate;

    PROCEDURE (this: _OLEObject) PUTAutoUpdate* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, -2147417064, p1)
    END PUTAutoUpdate;

    PROCEDURE (this: _OLEObject) Object* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, -2147417063)
    END Object;

    PROCEDURE (this: _OLEObject) OLEType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, -2147417058)
    END OLEType;

    PROCEDURE (this: _OLEObject) SourceName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147417391)
    END SourceName;

    PROCEDURE (this: _OLEObject) PUTSourceName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147417391, p1)
    END PUTSourceName;

    PROCEDURE (this: _OLEObject) Update* (), NEW;
    BEGIN
        CtlC.CallMethod(this, -2147417432, NIL);
    END Update;

    PROCEDURE (this: _OLEObject) Verb* (Verb: XlOLEVerb), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Verb, arg[0]);
        CtlC.CallParMethod(this, -2147417506, arg, NIL);
    END Verb;

    PROCEDURE (this: _OLEObject) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147417054)
    END LinkedCell;

    PROCEDURE (this: _OLEObject) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147417054, p1)
    END PUTLinkedCell;

    PROCEDURE (this: _OLEObject) ListFillRange* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147417265)
    END ListFillRange;

    PROCEDURE (this: _OLEObject) PUTListFillRange* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147417265, p1)
    END PUTListFillRange;

    PROCEDURE (this: _OLEObject) ProgId* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147416589)
    END ProgId;


    (* ---------- OLEObjects ---------- *)

    PROCEDURE (this: OLEObjects) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: OLEObjects) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: OLEObjects) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: OLEObjects) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: OLEObjects) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: OLEObjects) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: OLEObjects) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: OLEObjects) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: OLEObjects) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: OLEObjects) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: OLEObjects) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: OLEObjects) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: OLEObjects) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: OLEObjects) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: OLEObjects) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: OLEObjects) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: OLEObjects) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: OLEObjects) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: OLEObjects) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: OLEObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: OLEObjects) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: OLEObjects) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: OLEObjects) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: OLEObjects) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: OLEObjects) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: OLEObjects) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: OLEObjects) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: OLEObjects) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: OLEObjects) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: OLEObjects) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: OLEObjects) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: OLEObjects) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: OLEObjects) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: OLEObjects) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: OLEObjects) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: OLEObjects) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: OLEObjects) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: OLEObjects) AutoLoad* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1186)
    END AutoLoad;

    PROCEDURE (this: OLEObjects) PUTAutoLoad* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1186, p1)
    END PUTAutoLoad;

    PROCEDURE (this: OLEObjects) SourceName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 721)
    END SourceName;

    PROCEDURE (this: OLEObjects) PUTSourceName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 721, p1)
    END PUTSourceName;

    PROCEDURE (this: OLEObjects) Add* ((* optional *) ClassType: CtlT.Any; Filename: CtlT.Any; Link: CtlT.Any; DisplayAsIcon: CtlT.Any; IconFileName: CtlT.Any; IconIndex: CtlT.Any; IconLabel: CtlT.Any; Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): OLEObject, NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ClassType, arg[10]);
        CtlC.AnyVar(Filename, arg[9]);
        CtlC.AnyVar(Link, arg[8]);
        CtlC.AnyVar(DisplayAsIcon, arg[7]);
        CtlC.AnyVar(IconFileName, arg[6]);
        CtlC.AnyVar(IconIndex, arg[5]);
        CtlC.AnyVar(IconLabel, arg[4]);
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN This_OLEObject(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: OLEObjects) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: OLEObjects) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: OLEObjects) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: OLEObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- TextBox, hidden ---------- *)

    PROCEDURE (this: TextBox) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: TextBox) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: TextBox) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: TextBox) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: TextBox) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: TextBox) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: TextBox) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: TextBox) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: TextBox) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: TextBox) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: TextBox) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: TextBox) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: TextBox) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: TextBox) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: TextBox) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: TextBox) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: TextBox) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: TextBox) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: TextBox) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: TextBox) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: TextBox) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: TextBox) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: TextBox) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: TextBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: TextBox) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: TextBox) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: TextBox) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: TextBox) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: TextBox) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: TextBox) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: TextBox) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: TextBox) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: TextBox) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: TextBox) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: TextBox) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: TextBox) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: TextBox) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: TextBox) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: TextBox) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: TextBox) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: TextBox) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: TextBox) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: TextBox) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: TextBox) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: TextBox) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: TextBox) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: TextBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: TextBox) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: TextBox) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: TextBox) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: TextBox) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: TextBox) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: TextBox) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: TextBox) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: TextBox) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: TextBox) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: TextBox) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: TextBox) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: TextBox) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: TextBox) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: TextBox) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: TextBox) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: TextBox) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: TextBox) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: TextBox) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: TextBox) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: TextBox) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: TextBox) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: TextBox) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;


    (* ---------- TextBoxes, hidden ---------- *)

    PROCEDURE (this: TextBoxes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: TextBoxes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: TextBoxes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: TextBoxes) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: TextBoxes) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: TextBoxes) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: TextBoxes) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: TextBoxes) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: TextBoxes) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: TextBoxes) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: TextBoxes) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: TextBoxes) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: TextBoxes) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: TextBoxes) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: TextBoxes) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: TextBoxes) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: TextBoxes) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: TextBoxes) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: TextBoxes) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: TextBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: TextBoxes) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: TextBoxes) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: TextBoxes) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: TextBoxes) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: TextBoxes) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: TextBoxes) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: TextBoxes) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: TextBoxes) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: TextBoxes) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: TextBoxes) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: TextBoxes) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: TextBoxes) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: TextBoxes) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: TextBoxes) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: TextBoxes) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: TextBoxes) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: TextBoxes) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: TextBoxes) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: TextBoxes) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: TextBoxes) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: TextBoxes) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: TextBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: TextBoxes) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: TextBoxes) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: TextBoxes) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: TextBoxes) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: TextBoxes) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: TextBoxes) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: TextBoxes) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: TextBoxes) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: TextBoxes) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: TextBoxes) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: TextBoxes) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: TextBoxes) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: TextBoxes) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: TextBoxes) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: TextBoxes) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: TextBoxes) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: TextBoxes) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: TextBoxes) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: TextBoxes) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: TextBoxes) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: TextBoxes) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: TextBoxes) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: TextBoxes) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): TextBox, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisTextBox(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: TextBoxes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: TextBoxes) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: TextBoxes) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: TextBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Picture, hidden ---------- *)

    PROCEDURE (this: Picture) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Picture) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Picture) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Picture) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Picture) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Picture) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Picture) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Picture) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Picture) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Picture) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Picture) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Picture) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Picture) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Picture) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Picture) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Picture) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Picture) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Picture) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Picture) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Picture) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Picture) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Picture) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Picture) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Picture) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Picture) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Picture) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Picture) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Picture) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Picture) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Picture) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Picture) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Picture) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Picture) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Picture) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Picture) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Picture) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Picture) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Picture) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Picture) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Picture) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Picture) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Picture) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Picture) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Picture) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;


    (* ---------- Pictures, hidden ---------- *)

    PROCEDURE (this: Pictures) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Pictures) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Pictures) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Pictures) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Pictures) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Pictures) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Pictures) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Pictures) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Pictures) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Pictures) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Pictures) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Pictures) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Pictures) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Pictures) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Pictures) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Pictures) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Pictures) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Pictures) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Pictures) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Pictures) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Pictures) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Pictures) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Pictures) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Pictures) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Pictures) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Pictures) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Pictures) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Pictures) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Pictures) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Pictures) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Pictures) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Pictures) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Pictures) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Pictures) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Pictures) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Pictures) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Pictures) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Pictures) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Pictures) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Pictures) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): Picture, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisPicture(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Pictures) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Pictures) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Pictures) Insert* (Filename: ARRAY OF CHAR; (* optional *) Converter: CtlT.Any): Picture, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[1]);
        CtlC.AnyVar(Converter, arg[0]);
        CtlC.CallParMethod(this, 252, arg, ret);
        RETURN ThisPicture(CtlC.VarAny(ret))
    END Insert;

    PROCEDURE (this: Pictures) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Pictures) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Pictures) Paste* ((* optional *) Link: CtlT.Any): Picture, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 211, arg, ret);
        RETURN ThisPicture(CtlC.VarAny(ret))
    END Paste;


    (* ---------- Drawing, hidden ---------- *)

    PROCEDURE (this: Drawing) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Drawing) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Drawing) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Drawing) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Drawing) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Drawing) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Drawing) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Drawing) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Drawing) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Drawing) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Drawing) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Drawing) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Drawing) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Drawing) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Drawing) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Drawing) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Drawing) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Drawing) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Drawing) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Drawing) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Drawing) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Drawing) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Drawing) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Drawing) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Drawing) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Drawing) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Drawing) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Drawing) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Drawing) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Drawing) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Drawing) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Drawing) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Drawing) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Drawing) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Drawing) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Drawing) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Drawing) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Drawing) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Drawing) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Drawing) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Drawing) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Drawing) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Drawing) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Drawing) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Drawing) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Drawing) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Drawing) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Drawing) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Drawing) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Drawing) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Drawing) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Drawing) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Drawing) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Drawing) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Drawing) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Drawing) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Drawing) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Drawing) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Drawing) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Drawing) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Drawing) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Drawing) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Drawing) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Drawing) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Drawing) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Drawing) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Drawing) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Drawing) AddVertex* (Left: REAL; Top: REAL), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[1]);
        CtlC.RealVar(Top, arg[0]);
        CtlC.CallParMethod(this, 601, arg, NIL);
    END AddVertex;

    PROCEDURE (this: Drawing) Reshape* (Vertex: INTEGER; Insert: BOOLEAN; (* optional *) Left: CtlT.Any; Top: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Vertex, arg[3]);
        CtlC.BoolVar(Insert, arg[2]);
        CtlC.AnyVar(Left, arg[1]);
        CtlC.AnyVar(Top, arg[0]);
        CtlC.CallParMethod(this, 604, arg, NIL);
    END Reshape;

    PROCEDURE (this: Drawing) Vertices* ((* optional *) Index1: CtlT.Any; Index2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index1, arg[1]);
        CtlC.AnyVar(Index2, arg[0]);
        CtlC.CallGetMethod(this, 621, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Vertices;


    (* ---------- Drawings, hidden ---------- *)

    PROCEDURE (this: Drawings) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Drawings) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Drawings) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Drawings) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: Drawings) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Drawings) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Drawings) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Drawings) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Drawings) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: Drawings) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: Drawings) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: Drawings) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Drawings) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Drawings) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Drawings) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Drawings) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Drawings) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Drawings) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Drawings) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Drawings) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Drawings) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Drawings) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: Drawings) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: Drawings) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Drawings) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: Drawings) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Drawings) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Drawings) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Drawings) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Drawings) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Drawings) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Drawings) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: Drawings) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: Drawings) AddIndent* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1063)
    END AddIndent;

    PROCEDURE (this: Drawings) PUTAddIndent* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1063, p1)
    END PUTAddIndent;

    PROCEDURE (this: Drawings) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Drawings) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: Drawings) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: Drawings) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: Drawings) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: Drawings) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: Drawings) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: Drawings) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: Drawings) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Drawings) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Drawings) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Drawings) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Drawings) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Drawings) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: Drawings) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: Drawings) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Drawings) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: Drawings) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Drawings) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: Drawings) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Drawings) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: Drawings) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: Drawings) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: Drawings) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Drawings) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Drawings) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Drawings) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Drawings) Reshape* (Vertex: INTEGER; Insert: BOOLEAN; (* optional *) Left: CtlT.Any; Top: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Vertex, arg[3]);
        CtlC.BoolVar(Insert, arg[2]);
        CtlC.AnyVar(Left, arg[1]);
        CtlC.AnyVar(Top, arg[0]);
        CtlC.CallParMethod(this, 604, arg, NIL);
    END Reshape;

    PROCEDURE (this: Drawings) Add* (X1: REAL; Y1: REAL; X2: REAL; Y2: REAL; Closed: BOOLEAN): Drawing, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(X1, arg[4]);
        CtlC.RealVar(Y1, arg[3]);
        CtlC.RealVar(X2, arg[2]);
        CtlC.RealVar(Y2, arg[1]);
        CtlC.BoolVar(Closed, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisDrawing(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Drawings) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Drawings) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: Drawings) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Drawings) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- RoutingSlip ---------- *)

    PROCEDURE (this: RoutingSlip) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: RoutingSlip) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: RoutingSlip) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: RoutingSlip) Delivery* (): XlRoutingSlipDelivery, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 955)
    END Delivery;

    PROCEDURE (this: RoutingSlip) PUTDelivery* (p1: XlRoutingSlipDelivery), NEW;
    BEGIN
        CtlC.PutInt(this, 955, p1)
    END PUTDelivery;

    PROCEDURE (this: RoutingSlip) Message* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 954)
    END Message;

    PROCEDURE (this: RoutingSlip) PUTMessage* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 954, p1)
    END PUTMessage;

    PROCEDURE (this: RoutingSlip) Recipients* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 952, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Recipients;

    PROCEDURE (this: RoutingSlip) Reset* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 555, NIL);
    END Reset;

    PROCEDURE (this: RoutingSlip) ReturnWhenDone* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 956)
    END ReturnWhenDone;

    PROCEDURE (this: RoutingSlip) PUTReturnWhenDone* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 956, p1)
    END PUTReturnWhenDone;

    PROCEDURE (this: RoutingSlip) Status* (): XlRoutingSlipStatus, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 958)
    END Status;

    PROCEDURE (this: RoutingSlip) Subject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 953)
    END Subject;

    PROCEDURE (this: RoutingSlip) PUTSubject* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 953, p1)
    END PUTSubject;

    PROCEDURE (this: RoutingSlip) TrackStatus* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 957)
    END TrackStatus;

    PROCEDURE (this: RoutingSlip) PUTTrackStatus* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 957, p1)
    END PUTTrackStatus;


    (* ---------- Outline ---------- *)

    PROCEDURE (this: Outline) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Outline) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Outline) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Outline) AutomaticStyles* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 959)
    END AutomaticStyles;

    PROCEDURE (this: Outline) PUTAutomaticStyles* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 959, p1)
    END PUTAutomaticStyles;

    PROCEDURE (this: Outline) ShowLevels* ((* optional *) RowLevels: CtlT.Any; ColumnLevels: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowLevels, arg[1]);
        CtlC.AnyVar(ColumnLevels, arg[0]);
        CtlC.CallParMethod(this, 960, arg, NIL);
    END ShowLevels;

    PROCEDURE (this: Outline) SummaryColumn* (): XlSummaryColumn, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 961)
    END SummaryColumn;

    PROCEDURE (this: Outline) PUTSummaryColumn* (p1: XlSummaryColumn), NEW;
    BEGIN
        CtlC.PutInt(this, 961, p1)
    END PUTSummaryColumn;

    PROCEDURE (this: Outline) SummaryRow* (): XlSummaryRow, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 902)
    END SummaryRow;

    PROCEDURE (this: Outline) PUTSummaryRow* (p1: XlSummaryRow), NEW;
    BEGIN
        CtlC.PutInt(this, 902, p1)
    END PUTSummaryRow;


    (* ---------- Module, hidden ---------- *)

    PROCEDURE (this: Module) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Module) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Module) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Module) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: Module) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: Module) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Module) CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1373)
    END CodeName;

    PROCEDURE (this: Module) _CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147418112)
    END _CodeName;

    PROCEDURE (this: Module) PUT_CodeName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147418112, p1)
    END PUT_CodeName;

    PROCEDURE (this: Module) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Module) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: Module) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Module) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Module) Next* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 502)
    END Next;

    PROCEDURE (this: Module) OnDoubleClick* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: Module) PUTOnDoubleClick* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 628, p1)
    END PUTOnDoubleClick;

    PROCEDURE (this: Module) OnSheetActivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: Module) PUTOnSheetActivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1031, p1)
    END PUTOnSheetActivate;

    PROCEDURE (this: Module) OnSheetDeactivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: Module) PUTOnSheetDeactivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1081, p1)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: Module) PageSetup* (): PageSetup, NEW;
    BEGIN
        RETURN ThisPageSetup(CtlC.GetAny(this, 998))
    END PageSetup;

    PROCEDURE (this: Module) Previous* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 503)
    END Previous;

    PROCEDURE (this: Module) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: Module) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, NIL);
    END Protect;

    PROCEDURE (this: Module) ProtectContents* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 292)
    END ProtectContents;

    PROCEDURE (this: Module) ProtectionMode* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: Module) SaveAs* (Filename: ARRAY OF CHAR; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any; AddToMru: CtlT.Any; TextCodepage: CtlT.Any; TextVisualLayout: CtlT.Any), NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[8]);
        CtlC.AnyVar(FileFormat, arg[7]);
        CtlC.AnyVar(Password, arg[6]);
        CtlC.AnyVar(WriteResPassword, arg[5]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[4]);
        CtlC.AnyVar(CreateBackup, arg[3]);
        CtlC.AnyVar(AddToMru, arg[2]);
        CtlC.AnyVar(TextCodepage, arg[1]);
        CtlC.AnyVar(TextVisualLayout, arg[0]);
        CtlC.CallParMethod(this, 284, arg, NIL);
    END SaveAs;

    PROCEDURE (this: Module) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Module) Unprotect* ((* optional *) Password: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, NIL);
    END Unprotect;

    PROCEDURE (this: Module) Visible* (): XlSheetVisibility, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 558)
    END Visible;

    PROCEDURE (this: Module) PUTVisible* (p1: XlSheetVisibility), NEW;
    BEGIN
        CtlC.PutInt(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Module) Shapes* (): Shapes, NEW;
    BEGIN
        RETURN ThisShapes(CtlC.GetAny(this, 1377))
    END Shapes;

    PROCEDURE (this: Module) InsertFile* (Filename: CtlT.Any; (* optional *) Merge: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(Merge, arg[0]);
        CtlC.CallParMethod(this, 584, arg, NIL);
    END InsertFile;


    (* ---------- Modules, hidden ---------- *)

    PROCEDURE (this: Modules) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Modules) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Modules) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Modules) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any): Module, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[2]);
        CtlC.AnyVar(After, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisModule(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Modules) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: Modules) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Modules) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Modules) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Modules) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: Modules) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Modules) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: Modules) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Modules) HPageBreaks* (): HPageBreaks, NEW;
    BEGIN
        RETURN ThisHPageBreaks(CtlC.GetAny(this, 1418))
    END HPageBreaks;

    PROCEDURE (this: Modules) VPageBreaks* (): VPageBreaks, NEW;
    BEGIN
        RETURN ThisVPageBreaks(CtlC.GetAny(this, 1419))
    END VPageBreaks;

    PROCEDURE (this: Modules) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Modules) PUTVisible* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Modules) _Default* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarObj(ret)
    END _Default;


    (* ---------- DialogSheet, hidden ---------- *)

    PROCEDURE (this: DialogSheet) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DialogSheet) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DialogSheet) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DialogSheet) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: DialogSheet) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: DialogSheet) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DialogSheet) CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1373)
    END CodeName;

    PROCEDURE (this: DialogSheet) _CodeName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, -2147418112)
    END _CodeName;

    PROCEDURE (this: DialogSheet) PUT_CodeName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, -2147418112, p1)
    END PUT_CodeName;

    PROCEDURE (this: DialogSheet) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: DialogSheet) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: DialogSheet) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: DialogSheet) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: DialogSheet) Next* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 502)
    END Next;

    PROCEDURE (this: DialogSheet) OnDoubleClick* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: DialogSheet) PUTOnDoubleClick* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 628, p1)
    END PUTOnDoubleClick;

    PROCEDURE (this: DialogSheet) OnSheetActivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: DialogSheet) PUTOnSheetActivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1031, p1)
    END PUTOnSheetActivate;

    PROCEDURE (this: DialogSheet) OnSheetDeactivate* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: DialogSheet) PUTOnSheetDeactivate* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1081, p1)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: DialogSheet) PageSetup* (): PageSetup, NEW;
    BEGIN
        RETURN ThisPageSetup(CtlC.GetAny(this, 998))
    END PageSetup;

    PROCEDURE (this: DialogSheet) Previous* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 503)
    END Previous;

    PROCEDURE (this: DialogSheet) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: DialogSheet) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: DialogSheet) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, NIL);
    END Protect;

    PROCEDURE (this: DialogSheet) ProtectContents* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 292)
    END ProtectContents;

    PROCEDURE (this: DialogSheet) ProtectDrawingObjects* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 293)
    END ProtectDrawingObjects;

    PROCEDURE (this: DialogSheet) ProtectionMode* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: DialogSheet) ProtectScenarios* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 294)
    END ProtectScenarios;

    PROCEDURE (this: DialogSheet) SaveAs* (Filename: ARRAY OF CHAR; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any; AddToMru: CtlT.Any; TextCodepage: CtlT.Any; TextVisualLayout: CtlT.Any), NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[8]);
        CtlC.AnyVar(FileFormat, arg[7]);
        CtlC.AnyVar(Password, arg[6]);
        CtlC.AnyVar(WriteResPassword, arg[5]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[4]);
        CtlC.AnyVar(CreateBackup, arg[3]);
        CtlC.AnyVar(AddToMru, arg[2]);
        CtlC.AnyVar(TextCodepage, arg[1]);
        CtlC.AnyVar(TextVisualLayout, arg[0]);
        CtlC.CallParMethod(this, 284, arg, NIL);
    END SaveAs;

    PROCEDURE (this: DialogSheet) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: DialogSheet) Unprotect* ((* optional *) Password: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, NIL);
    END Unprotect;

    PROCEDURE (this: DialogSheet) Visible* (): XlSheetVisibility, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 558)
    END Visible;

    PROCEDURE (this: DialogSheet) PUTVisible* (p1: XlSheetVisibility), NEW;
    BEGIN
        CtlC.PutInt(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: DialogSheet) Shapes* (): Shapes, NEW;
    BEGIN
        RETURN ThisShapes(CtlC.GetAny(this, 1377))
    END Shapes;

    PROCEDURE (this: DialogSheet) Arcs* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 760, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Arcs;

    PROCEDURE (this: DialogSheet) Buttons* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 557, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Buttons;

    PROCEDURE (this: DialogSheet) EnableCalculation* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1424)
    END EnableCalculation;

    PROCEDURE (this: DialogSheet) PUTEnableCalculation* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1424, p1)
    END PUTEnableCalculation;

    PROCEDURE (this: DialogSheet) ChartObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1060, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ChartObjects;

    PROCEDURE (this: DialogSheet) CheckBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 824, arg, ret);
        RETURN CtlC.VarObj(ret)
    END CheckBoxes;

    PROCEDURE (this: DialogSheet) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any; IgnoreInitialAlefHamza: CtlT.Any; IgnoreFinalYaa: CtlT.Any; SpellScript: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[5]);
        CtlC.AnyVar(IgnoreUppercase, arg[4]);
        CtlC.AnyVar(AlwaysSuggest, arg[3]);
        CtlC.AnyVar(IgnoreInitialAlefHamza, arg[2]);
        CtlC.AnyVar(IgnoreFinalYaa, arg[1]);
        CtlC.AnyVar(SpellScript, arg[0]);
        CtlC.CallParMethod(this, 505, arg, NIL);
    END CheckSpelling;

    PROCEDURE (this: DialogSheet) DisplayAutomaticPageBreaks* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 643)
    END DisplayAutomaticPageBreaks;

    PROCEDURE (this: DialogSheet) PUTDisplayAutomaticPageBreaks* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 643, p1)
    END PUTDisplayAutomaticPageBreaks;

    PROCEDURE (this: DialogSheet) Drawings* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 772, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Drawings;

    PROCEDURE (this: DialogSheet) DrawingObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 88, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DrawingObjects;

    PROCEDURE (this: DialogSheet) DropDowns* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 836, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DropDowns;

    PROCEDURE (this: DialogSheet) EnableAutoFilter* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1156)
    END EnableAutoFilter;

    PROCEDURE (this: DialogSheet) PUTEnableAutoFilter* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1156, p1)
    END PUTEnableAutoFilter;

    PROCEDURE (this: DialogSheet) EnableSelection* (): XlEnableSelection, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1425)
    END EnableSelection;

    PROCEDURE (this: DialogSheet) PUTEnableSelection* (p1: XlEnableSelection), NEW;
    BEGIN
        CtlC.PutInt(this, 1425, p1)
    END PUTEnableSelection;

    PROCEDURE (this: DialogSheet) EnableOutlining* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1157)
    END EnableOutlining;

    PROCEDURE (this: DialogSheet) PUTEnableOutlining* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1157, p1)
    END PUTEnableOutlining;

    PROCEDURE (this: DialogSheet) EnablePivotTable* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1158)
    END EnablePivotTable;

    PROCEDURE (this: DialogSheet) PUTEnablePivotTable* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1158, p1)
    END PUTEnablePivotTable;

    PROCEDURE (this: DialogSheet) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: DialogSheet) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: DialogSheet) ResetAllPageBreaks* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1426, NIL);
    END ResetAllPageBreaks;

    PROCEDURE (this: DialogSheet) GroupBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 834, arg, ret);
        RETURN CtlC.VarObj(ret)
    END GroupBoxes;

    PROCEDURE (this: DialogSheet) GroupObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1113, arg, ret);
        RETURN CtlC.VarObj(ret)
    END GroupObjects;

    PROCEDURE (this: DialogSheet) Labels* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 841, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Labels;

    PROCEDURE (this: DialogSheet) Lines* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 767, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Lines;

    PROCEDURE (this: DialogSheet) ListBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 832, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ListBoxes;

    PROCEDURE (this: DialogSheet) Names* (): Names, NEW;
    BEGIN
        RETURN ThisNames(CtlC.GetAny(this, 442))
    END Names;

    PROCEDURE (this: DialogSheet) OLEObjects* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 799, arg, ret);
        RETURN CtlC.VarObj(ret)
    END OLEObjects;

    PROCEDURE (this: DialogSheet) OptionButtons* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 826, arg, ret);
        RETURN CtlC.VarObj(ret)
    END OptionButtons;

    PROCEDURE (this: DialogSheet) Ovals* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 801, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Ovals;

    PROCEDURE (this: DialogSheet) Paste* ((* optional *) Destination: CtlT.Any; Link: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[1]);
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 211, arg, NIL);
    END Paste;

    PROCEDURE (this: DialogSheet) PasteSpecial* ((* optional *) Format: CtlT.Any; Link: CtlT.Any; DisplayAsIcon: CtlT.Any; IconFileName: CtlT.Any; IconIndex: CtlT.Any; IconLabel: CtlT.Any), NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Format, arg[5]);
        CtlC.AnyVar(Link, arg[4]);
        CtlC.AnyVar(DisplayAsIcon, arg[3]);
        CtlC.AnyVar(IconFileName, arg[2]);
        CtlC.AnyVar(IconIndex, arg[1]);
        CtlC.AnyVar(IconLabel, arg[0]);
        CtlC.CallParMethod(this, 1027, arg, NIL);
    END PasteSpecial;

    PROCEDURE (this: DialogSheet) Pictures* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 771, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Pictures;

    PROCEDURE (this: DialogSheet) Rectangles* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 774, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Rectangles;

    PROCEDURE (this: DialogSheet) ScrollArea* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1433)
    END ScrollArea;

    PROCEDURE (this: DialogSheet) PUTScrollArea* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1433, p1)
    END PUTScrollArea;

    PROCEDURE (this: DialogSheet) ScrollBars* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 830, arg, ret);
        RETURN CtlC.VarObj(ret)
    END ScrollBars;

    PROCEDURE (this: DialogSheet) Spinners* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 838, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Spinners;

    PROCEDURE (this: DialogSheet) TextBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 777, arg, ret);
        RETURN CtlC.VarObj(ret)
    END TextBoxes;

    PROCEDURE (this: DialogSheet) HPageBreaks* (): HPageBreaks, NEW;
    BEGIN
        RETURN ThisHPageBreaks(CtlC.GetAny(this, 1418))
    END HPageBreaks;

    PROCEDURE (this: DialogSheet) VPageBreaks* (): VPageBreaks, NEW;
    BEGIN
        RETURN ThisVPageBreaks(CtlC.GetAny(this, 1419))
    END VPageBreaks;

    PROCEDURE (this: DialogSheet) QueryTables* (): QueryTables, NEW;
    BEGIN
        RETURN ThisQueryTables(CtlC.GetAny(this, 1434))
    END QueryTables;

    PROCEDURE (this: DialogSheet) DisplayPageBreaks* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1435)
    END DisplayPageBreaks;

    PROCEDURE (this: DialogSheet) PUTDisplayPageBreaks* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1435, p1)
    END PUTDisplayPageBreaks;

    PROCEDURE (this: DialogSheet) Comments* (): Comments, NEW;
    BEGIN
        RETURN ThisComments(CtlC.GetAny(this, 575))
    END Comments;

    PROCEDURE (this: DialogSheet) Hyperlinks* (): Hyperlinks, NEW;
    BEGIN
        RETURN ThisHyperlinks(CtlC.GetAny(this, 1393))
    END Hyperlinks;

    PROCEDURE (this: DialogSheet) ClearCircles* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1436, NIL);
    END ClearCircles;

    PROCEDURE (this: DialogSheet) CircleInvalid* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1437, NIL);
    END CircleInvalid;

    PROCEDURE (this: DialogSheet) DisplayRightToLeft* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 648)
    END DisplayRightToLeft;

    PROCEDURE (this: DialogSheet) PUTDisplayRightToLeft* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 648, p1)
    END PUTDisplayRightToLeft;

    PROCEDURE (this: DialogSheet) AutoFilter* (): AutoFilter, NEW;
    BEGIN
        RETURN ThisAutoFilter(CtlC.GetAny(this, 793))
    END AutoFilter;

    PROCEDURE (this: DialogSheet) DefaultButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 857)
    END DefaultButton;

    PROCEDURE (this: DialogSheet) PUTDefaultButton* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 857, p1)
    END PUTDefaultButton;

    PROCEDURE (this: DialogSheet) DialogFrame* (): DialogFrame, NEW;
    BEGIN
        RETURN ThisDialogFrame(CtlC.GetAny(this, 839))
    END DialogFrame;

    PROCEDURE (this: DialogSheet) EditBoxes* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 828, arg, ret);
        RETURN CtlC.VarObj(ret)
    END EditBoxes;

    PROCEDURE (this: DialogSheet) Focus* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 814)
    END Focus;

    PROCEDURE (this: DialogSheet) PUTFocus* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 814, p1)
    END PUTFocus;

    PROCEDURE (this: DialogSheet) Hide* ((* optional *) Cancel: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cancel, arg[0]);
        CtlC.CallParMethod(this, 813, arg, ret);
        RETURN CtlC.VarBool(ret)
    END Hide;

    PROCEDURE (this: DialogSheet) Show* (): BOOLEAN, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 496, ret);
        RETURN CtlC.VarBool(ret)
    END Show;


    (* ---------- DialogSheets, hidden ---------- *)

    PROCEDURE (this: DialogSheets) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DialogSheets) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DialogSheets) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DialogSheets) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any): DialogSheet, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[2]);
        CtlC.AnyVar(After, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisDialogSheet(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: DialogSheets) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: DialogSheets) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: DialogSheets) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DialogSheets) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: DialogSheets) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: DialogSheets) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: DialogSheets) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: DialogSheets) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: DialogSheets) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: DialogSheets) HPageBreaks* (): HPageBreaks, NEW;
    BEGIN
        RETURN ThisHPageBreaks(CtlC.GetAny(this, 1418))
    END HPageBreaks;

    PROCEDURE (this: DialogSheets) VPageBreaks* (): VPageBreaks, NEW;
    BEGIN
        RETURN ThisVPageBreaks(CtlC.GetAny(this, 1419))
    END VPageBreaks;

    PROCEDURE (this: DialogSheets) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: DialogSheets) PUTVisible* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: DialogSheets) _Default* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarObj(ret)
    END _Default;


    (* ---------- Worksheets ---------- *)

    PROCEDURE (this: Worksheets) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Worksheets) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Worksheets) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Worksheets) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any; Type: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[3]);
        CtlC.AnyVar(After, arg[2]);
        CtlC.AnyVar(Count, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Add;

    PROCEDURE (this: Worksheets) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, NIL);
    END Copy;

    PROCEDURE (this: Worksheets) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Worksheets) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Worksheets) FillAcrossSheets* (range: Range; Type: XlFillWith), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(range, arg[1]);
        CtlC.IntVar(Type, arg[0]);
        CtlC.CallParMethod(this, 469, arg, NIL);
    END FillAcrossSheets;

    PROCEDURE (this: Worksheets) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: Worksheets) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, NIL);
    END Move;

    PROCEDURE (this: Worksheets) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Worksheets) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any), NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, NIL);
    END PrintOut;

    PROCEDURE (this: Worksheets) PrintPreview* ((* optional *) EnableChanges: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EnableChanges, arg[0]);
        CtlC.CallParMethod(this, 281, arg, NIL);
    END PrintPreview;

    PROCEDURE (this: Worksheets) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Worksheets) HPageBreaks* (): HPageBreaks, NEW;
    BEGIN
        RETURN ThisHPageBreaks(CtlC.GetAny(this, 1418))
    END HPageBreaks;

    PROCEDURE (this: Worksheets) VPageBreaks* (): VPageBreaks, NEW;
    BEGIN
        RETURN ThisVPageBreaks(CtlC.GetAny(this, 1419))
    END VPageBreaks;

    PROCEDURE (this: Worksheets) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Worksheets) PUTVisible* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Worksheets) _Default* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN CtlC.VarObj(ret)
    END _Default;


    (* ---------- PageSetup ---------- *)

    PROCEDURE (this: PageSetup) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PageSetup) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PageSetup) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PageSetup) BlackAndWhite* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1009)
    END BlackAndWhite;

    PROCEDURE (this: PageSetup) PUTBlackAndWhite* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1009, p1)
    END PUTBlackAndWhite;

    PROCEDURE (this: PageSetup) BottomMargin* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1002)
    END BottomMargin;

    PROCEDURE (this: PageSetup) PUTBottomMargin* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 1002, p1)
    END PUTBottomMargin;

    PROCEDURE (this: PageSetup) CenterFooter* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1010)
    END CenterFooter;

    PROCEDURE (this: PageSetup) PUTCenterFooter* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1010, p1)
    END PUTCenterFooter;

    PROCEDURE (this: PageSetup) CenterHeader* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1011)
    END CenterHeader;

    PROCEDURE (this: PageSetup) PUTCenterHeader* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1011, p1)
    END PUTCenterHeader;

    PROCEDURE (this: PageSetup) CenterHorizontally* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1005)
    END CenterHorizontally;

    PROCEDURE (this: PageSetup) PUTCenterHorizontally* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1005, p1)
    END PUTCenterHorizontally;

    PROCEDURE (this: PageSetup) CenterVertically* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1006)
    END CenterVertically;

    PROCEDURE (this: PageSetup) PUTCenterVertically* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1006, p1)
    END PUTCenterVertically;

    PROCEDURE (this: PageSetup) ChartSize* (): XlObjectSize, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1012)
    END ChartSize;

    PROCEDURE (this: PageSetup) PUTChartSize* (p1: XlObjectSize), NEW;
    BEGIN
        CtlC.PutInt(this, 1012, p1)
    END PUTChartSize;

    PROCEDURE (this: PageSetup) Draft* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1020)
    END Draft;

    PROCEDURE (this: PageSetup) PUTDraft* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1020, p1)
    END PUTDraft;

    PROCEDURE (this: PageSetup) FirstPageNumber* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1008)
    END FirstPageNumber;

    PROCEDURE (this: PageSetup) PUTFirstPageNumber* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1008, p1)
    END PUTFirstPageNumber;

    PROCEDURE (this: PageSetup) FitToPagesTall* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1013)
    END FitToPagesTall;

    PROCEDURE (this: PageSetup) PUTFitToPagesTall* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1013, p1)
    END PUTFitToPagesTall;

    PROCEDURE (this: PageSetup) FitToPagesWide* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1014)
    END FitToPagesWide;

    PROCEDURE (this: PageSetup) PUTFitToPagesWide* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1014, p1)
    END PUTFitToPagesWide;

    PROCEDURE (this: PageSetup) FooterMargin* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1015)
    END FooterMargin;

    PROCEDURE (this: PageSetup) PUTFooterMargin* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 1015, p1)
    END PUTFooterMargin;

    PROCEDURE (this: PageSetup) HeaderMargin* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1016)
    END HeaderMargin;

    PROCEDURE (this: PageSetup) PUTHeaderMargin* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 1016, p1)
    END PUTHeaderMargin;

    PROCEDURE (this: PageSetup) LeftFooter* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1017)
    END LeftFooter;

    PROCEDURE (this: PageSetup) PUTLeftFooter* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1017, p1)
    END PUTLeftFooter;

    PROCEDURE (this: PageSetup) LeftHeader* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1018)
    END LeftHeader;

    PROCEDURE (this: PageSetup) PUTLeftHeader* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1018, p1)
    END PUTLeftHeader;

    PROCEDURE (this: PageSetup) LeftMargin* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 999)
    END LeftMargin;

    PROCEDURE (this: PageSetup) PUTLeftMargin* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 999, p1)
    END PUTLeftMargin;

    PROCEDURE (this: PageSetup) Order* (): XlOrder, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 192)
    END Order;

    PROCEDURE (this: PageSetup) PUTOrder* (p1: XlOrder), NEW;
    BEGIN
        CtlC.PutInt(this, 192, p1)
    END PUTOrder;

    PROCEDURE (this: PageSetup) Orientation* (): XlPageOrientation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 134)
    END Orientation;

    PROCEDURE (this: PageSetup) PUTOrientation* (p1: XlPageOrientation), NEW;
    BEGIN
        CtlC.PutInt(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: PageSetup) PaperSize* (): XlPaperSize, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1007)
    END PaperSize;

    PROCEDURE (this: PageSetup) PUTPaperSize* (p1: XlPaperSize), NEW;
    BEGIN
        CtlC.PutInt(this, 1007, p1)
    END PUTPaperSize;

    PROCEDURE (this: PageSetup) PrintArea* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1019)
    END PrintArea;

    PROCEDURE (this: PageSetup) PUTPrintArea* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1019, p1)
    END PUTPrintArea;

    PROCEDURE (this: PageSetup) PrintGridlines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1004)
    END PrintGridlines;

    PROCEDURE (this: PageSetup) PUTPrintGridlines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1004, p1)
    END PUTPrintGridlines;

    PROCEDURE (this: PageSetup) PrintHeadings* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1003)
    END PrintHeadings;

    PROCEDURE (this: PageSetup) PUTPrintHeadings* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1003, p1)
    END PUTPrintHeadings;

    PROCEDURE (this: PageSetup) PrintNotes* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1021)
    END PrintNotes;

    PROCEDURE (this: PageSetup) PUTPrintNotes* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1021, p1)
    END PUTPrintNotes;

    PROCEDURE (this: PageSetup) PrintQuality* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1022, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintQuality;

    PROCEDURE (this: PageSetup) PrintTitleColumns* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1023)
    END PrintTitleColumns;

    PROCEDURE (this: PageSetup) PUTPrintTitleColumns* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1023, p1)
    END PUTPrintTitleColumns;

    PROCEDURE (this: PageSetup) PrintTitleRows* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1024)
    END PrintTitleRows;

    PROCEDURE (this: PageSetup) PUTPrintTitleRows* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1024, p1)
    END PUTPrintTitleRows;

    PROCEDURE (this: PageSetup) RightFooter* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1025)
    END RightFooter;

    PROCEDURE (this: PageSetup) PUTRightFooter* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1025, p1)
    END PUTRightFooter;

    PROCEDURE (this: PageSetup) RightHeader* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1026)
    END RightHeader;

    PROCEDURE (this: PageSetup) PUTRightHeader* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1026, p1)
    END PUTRightHeader;

    PROCEDURE (this: PageSetup) RightMargin* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1000)
    END RightMargin;

    PROCEDURE (this: PageSetup) PUTRightMargin* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 1000, p1)
    END PUTRightMargin;

    PROCEDURE (this: PageSetup) TopMargin* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1001)
    END TopMargin;

    PROCEDURE (this: PageSetup) PUTTopMargin* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 1001, p1)
    END PUTTopMargin;

    PROCEDURE (this: PageSetup) Zoom* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 663)
    END Zoom;

    PROCEDURE (this: PageSetup) PUTZoom* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 663, p1)
    END PUTZoom;

    PROCEDURE (this: PageSetup) PrintComments* (): XlPrintLocation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1524)
    END PrintComments;

    PROCEDURE (this: PageSetup) PUTPrintComments* (p1: XlPrintLocation), NEW;
    BEGIN
        CtlC.PutInt(this, 1524, p1)
    END PUTPrintComments;


    (* ---------- Names ---------- *)

    PROCEDURE (this: Names) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Names) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Names) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Names) Add* ((* optional *) name: CtlT.Any; RefersTo: CtlT.Any; Visible: CtlT.Any; MacroType: CtlT.Any; ShortcutKey: CtlT.Any; Category: CtlT.Any; NameLocal: CtlT.Any; RefersToLocal: CtlT.Any; CategoryLocal: CtlT.Any; RefersToR1C1: CtlT.Any; RefersToR1C1Local: CtlT.Any): Name, NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(name, arg[10]);
        CtlC.AnyVar(RefersTo, arg[9]);
        CtlC.AnyVar(Visible, arg[8]);
        CtlC.AnyVar(MacroType, arg[7]);
        CtlC.AnyVar(ShortcutKey, arg[6]);
        CtlC.AnyVar(Category, arg[5]);
        CtlC.AnyVar(NameLocal, arg[4]);
        CtlC.AnyVar(RefersToLocal, arg[3]);
        CtlC.AnyVar(CategoryLocal, arg[2]);
        CtlC.AnyVar(RefersToR1C1, arg[1]);
        CtlC.AnyVar(RefersToR1C1Local, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisName(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Names) Item* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): Name, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisName(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Names) _Default* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): Name, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 0, arg, ret);
        RETURN ThisName(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Names) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Names) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- Name ---------- *)

    PROCEDURE (this: Name) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Name) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Name) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Name) _Default* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 0)
    END _Default;

    PROCEDURE (this: Name) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Name) Category* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 934)
    END Category;

    PROCEDURE (this: Name) PUTCategory* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 934, p1)
    END PUTCategory;

    PROCEDURE (this: Name) CategoryLocal* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 935)
    END CategoryLocal;

    PROCEDURE (this: Name) PUTCategoryLocal* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 935, p1)
    END PUTCategoryLocal;

    PROCEDURE (this: Name) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Name) MacroType* (): XlXLMMacroType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 936)
    END MacroType;

    PROCEDURE (this: Name) PUTMacroType* (p1: XlXLMMacroType), NEW;
    BEGIN
        CtlC.PutInt(this, 936, p1)
    END PUTMacroType;

    PROCEDURE (this: Name) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Name) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Name) RefersTo* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 938)
    END RefersTo;

    PROCEDURE (this: Name) PUTRefersTo* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 938, p1)
    END PUTRefersTo;

    PROCEDURE (this: Name) ShortcutKey* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 597)
    END ShortcutKey;

    PROCEDURE (this: Name) PUTShortcutKey* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 597, p1)
    END PUTShortcutKey;

    PROCEDURE (this: Name) Value* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 6)
    END Value;

    PROCEDURE (this: Name) PUTValue* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 6, p1)
    END PUTValue;

    PROCEDURE (this: Name) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Name) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Name) NameLocal* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 937)
    END NameLocal;

    PROCEDURE (this: Name) PUTNameLocal* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 937, p1)
    END PUTNameLocal;

    PROCEDURE (this: Name) RefersToLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 939)
    END RefersToLocal;

    PROCEDURE (this: Name) PUTRefersToLocal* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 939, p1)
    END PUTRefersToLocal;

    PROCEDURE (this: Name) RefersToR1C1* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 940)
    END RefersToR1C1;

    PROCEDURE (this: Name) PUTRefersToR1C1* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 940, p1)
    END PUTRefersToR1C1;

    PROCEDURE (this: Name) RefersToR1C1Local* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 941)
    END RefersToR1C1Local;

    PROCEDURE (this: Name) PUTRefersToR1C1Local* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 941, p1)
    END PUTRefersToR1C1Local;

    PROCEDURE (this: Name) RefersToRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1160))
    END RefersToRange;


    (* ---------- ChartObject ---------- *)

    PROCEDURE (this: ChartObject) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartObject) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartObject) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartObject) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: ChartObject) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: ChartObject) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: ChartObject) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: ChartObject) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: ChartObject) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ChartObject) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: ChartObject) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ChartObject) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ChartObject) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: ChartObject) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ChartObject) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: ChartObject) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ChartObject) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ChartObject) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: ChartObject) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: ChartObject) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ChartObject) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: ChartObject) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: ChartObject) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: ChartObject) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ChartObject) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: ChartObject) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: ChartObject) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: ChartObject) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: ChartObject) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: ChartObject) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ChartObject) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ChartObject) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: ChartObject) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: ChartObject) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: ChartObject) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: ChartObject) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ChartObject) ZOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 622)
    END ZOrder;

    PROCEDURE (this: ChartObject) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: ChartObject) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: ChartObject) Chart* (): Chart, NEW;
    BEGIN
        RETURN This_Chart(CtlC.GetAny(this, 7))
    END Chart;

    PROCEDURE (this: ChartObject) ProtectChartObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1529)
    END ProtectChartObject;

    PROCEDURE (this: ChartObject) PUTProtectChartObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1529, p1)
    END PUTProtectChartObject;

    PROCEDURE (this: ChartObject) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: ChartObject) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: ChartObject) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: ChartObject) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: ChartObject) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: ChartObject) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;


    (* ---------- ChartObjects ---------- *)

    PROCEDURE (this: ChartObjects) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartObjects) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartObjects) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartObjects) BringToFront* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 602, NIL);
    END BringToFront;

    PROCEDURE (this: ChartObjects) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: ChartObjects) CopyPicture* (Appearance: XlPictureAppearance; Format: XlCopyPictureFormat), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Appearance, arg[1]);
        CtlC.IntVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: ChartObjects) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: ChartObjects) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ChartObjects) Duplicate* (): CtlT.Object, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarObj(ret)
    END Duplicate;

    PROCEDURE (this: ChartObjects) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ChartObjects) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ChartObjects) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: ChartObjects) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ChartObjects) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ChartObjects) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ChartObjects) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: ChartObjects) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: ChartObjects) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: ChartObjects) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: ChartObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ChartObjects) PUTPlacement* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: ChartObjects) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: ChartObjects) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: ChartObjects) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: ChartObjects) SendToBack* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 605, NIL);
    END SendToBack;

    PROCEDURE (this: ChartObjects) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ChartObjects) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ChartObjects) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: ChartObjects) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: ChartObjects) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: ChartObjects) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ChartObjects) ShapeRange* (): ShapeRange, NEW;
    BEGIN
        RETURN ThisShapeRange(CtlC.GetAny(this, 1528))
    END ShapeRange;

    PROCEDURE (this: ChartObjects) RoundedCorners* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 619)
    END RoundedCorners;

    PROCEDURE (this: ChartObjects) PUTRoundedCorners* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 619, p1)
    END PUTRoundedCorners;

    PROCEDURE (this: ChartObjects) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: ChartObjects) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: ChartObjects) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: ChartObjects) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: ChartObjects) Add* (Left: REAL; Top: REAL; Width: REAL; Height: REAL): ChartObject, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.RealVar(Left, arg[3]);
        CtlC.RealVar(Top, arg[2]);
        CtlC.RealVar(Width, arg[1]);
        CtlC.RealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisChartObject(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: ChartObjects) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: ChartObjects) Group* (): GroupObject, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisGroupObject(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: ChartObjects) Item* (Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Item;

    PROCEDURE (this: ChartObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Mailer ---------- *)

    PROCEDURE (this: Mailer) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Mailer) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Mailer) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Mailer) BCCRecipients* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 983)
    END BCCRecipients;

    PROCEDURE (this: Mailer) PUTBCCRecipients* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 983, p1)
    END PUTBCCRecipients;

    PROCEDURE (this: Mailer) CCRecipients* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 982)
    END CCRecipients;

    PROCEDURE (this: Mailer) PUTCCRecipients* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 982, p1)
    END PUTCCRecipients;

    PROCEDURE (this: Mailer) Enclosures* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 984)
    END Enclosures;

    PROCEDURE (this: Mailer) PUTEnclosures* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 984, p1)
    END PUTEnclosures;

    PROCEDURE (this: Mailer) Received* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 986)
    END Received;

    PROCEDURE (this: Mailer) SendDateTime* (): CtlT.OleDate, NEW;
    BEGIN
        RETURN CtlC.GetDate(this, 987)
    END SendDateTime;

    PROCEDURE (this: Mailer) Sender* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 988)
    END Sender;

    PROCEDURE (this: Mailer) Subject* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 953)
    END Subject;

    PROCEDURE (this: Mailer) PUTSubject* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 953, p1)
    END PUTSubject;

    PROCEDURE (this: Mailer) ToRecipients* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 981)
    END ToRecipients;

    PROCEDURE (this: Mailer) PUTToRecipients* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 981, p1)
    END PUTToRecipients;

    PROCEDURE (this: Mailer) WhichAddress* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 974)
    END WhichAddress;

    PROCEDURE (this: Mailer) PUTWhichAddress* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 974, p1)
    END PUTWhichAddress;


    (* ---------- CustomViews ---------- *)

    PROCEDURE (this: CustomViews) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: CustomViews) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: CustomViews) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: CustomViews) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: CustomViews) Item* (ViewName: CtlT.Any): CustomView, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ViewName, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisCustomView(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: CustomViews) Add* (ViewName: ARRAY OF CHAR; (* optional *) PrintSettings: CtlT.Any; RowColSettings: CtlT.Any): CustomView, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(ViewName, arg[2]);
        CtlC.AnyVar(PrintSettings, arg[1]);
        CtlC.AnyVar(RowColSettings, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisCustomView(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: CustomViews) _Default* (ViewName: CtlT.Any): CustomView, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ViewName, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisCustomView(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: CustomViews) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- CustomView ---------- *)

    PROCEDURE (this: CustomView) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: CustomView) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: CustomView) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: CustomView) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: CustomView) PrintSettings* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1577)
    END PrintSettings;

    PROCEDURE (this: CustomView) RowColSettings* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1578)
    END RowColSettings;

    PROCEDURE (this: CustomView) Show* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 496, NIL);
    END Show;

    PROCEDURE (this: CustomView) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- FormatConditions ---------- *)

    PROCEDURE (this: FormatConditions) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: FormatConditions) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: FormatConditions) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: FormatConditions) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: FormatConditions) Item* (Index: CtlT.Any): FormatCondition, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisFormatCondition(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: FormatConditions) Add* (Type: XlFormatConditionType; (* optional *) Operator: CtlT.Any; Formula1: CtlT.Any; Formula2: CtlT.Any): FormatCondition, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[3]);
        CtlC.AnyVar(Operator, arg[2]);
        CtlC.AnyVar(Formula1, arg[1]);
        CtlC.AnyVar(Formula2, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisFormatCondition(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: FormatConditions) _Default* (Index: CtlT.Any): FormatCondition, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisFormatCondition(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: FormatConditions) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: FormatConditions) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- FormatCondition ---------- *)

    PROCEDURE (this: FormatCondition) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: FormatCondition) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: FormatCondition) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: FormatCondition) Modify* (Type: XlFormatConditionType; (* optional *) Operator: CtlT.Any; Formula1: CtlT.Any; Formula2: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[3]);
        CtlC.AnyVar(Operator, arg[2]);
        CtlC.AnyVar(Formula1, arg[1]);
        CtlC.AnyVar(Formula2, arg[0]);
        CtlC.CallParMethod(this, 1581, arg, NIL);
    END Modify;

    PROCEDURE (this: FormatCondition) Type* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: FormatCondition) Operator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 797)
    END Operator;

    PROCEDURE (this: FormatCondition) Formula1* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1579)
    END Formula1;

    PROCEDURE (this: FormatCondition) Formula2* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1580)
    END Formula2;

    PROCEDURE (this: FormatCondition) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: FormatCondition) Borders* (): Borders, NEW;
    BEGIN
        RETURN ThisBorders(CtlC.GetAny(this, 435))
    END Borders;

    PROCEDURE (this: FormatCondition) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: FormatCondition) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- Comments ---------- *)

    PROCEDURE (this: Comments) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Comments) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Comments) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Comments) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Comments) Item* (Index: INTEGER): Comment, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisComment(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Comments) _Default* (Index: INTEGER): Comment, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisComment(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Comments) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- Comment ---------- *)

    PROCEDURE (this: Comment) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Comment) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Comment) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Comment) Author* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 574)
    END Author;

    PROCEDURE (this: Comment) Shape* (): Shape, NEW;
    BEGIN
        RETURN ThisShape(CtlC.GetAny(this, 1582))
    END Shape;

    PROCEDURE (this: Comment) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Comment) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Comment) Text* ((* optional *) Text: CtlT.Any; Start: CtlT.Any; Overwrite: CtlT.Any): CtlT.Strg, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[2]);
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Overwrite, arg[0]);
        CtlC.CallParMethod(this, 138, arg, ret);
        RETURN CtlC.VarStr(ret)
    END Text;

    PROCEDURE (this: Comment) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Comment) Next* (): Comment, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 502, ret);
        RETURN ThisComment(CtlC.VarAny(ret))
    END Next;

    PROCEDURE (this: Comment) Previous* (): Comment, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 503, ret);
        RETURN ThisComment(CtlC.VarAny(ret))
    END Previous;


    (* ---------- RefreshEvents, hidden ---------- *)

    PROCEDURE (this: RefreshEvents) BeforeRefresh* (VAR Cancel: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: RefreshEvents) AfterRefresh* (Success: BOOLEAN), NEW, ABSTRACT;

    PROCEDURE (this: RefreshEvents) Invoke* (id, n: INTEGER; VAR par: CtlT.ParList; VAR ret: CtlT.Variant);
    BEGIN
        CASE id OF
        | 1596: ASSERT(n = 1, 11); this.BeforeRefresh(CtlC.VarRefBool(par[0])[0]); CtlC.RetBool(par[0])
        | 1597: ASSERT(n = 1, 11); this.AfterRefresh(CtlC.VarBool(par[0]))
        END
    END Invoke;

    PROCEDURE (this: RefreshEvents) GetIID* (OUT iid: CtlT.GUID);
    BEGIN
        iid := "{0002441B-0000-0000-C000-000000000046}"
    END GetIID;


    (* ---------- _QueryTable ---------- *)

    PROCEDURE (this: _QueryTable) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: _QueryTable) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: _QueryTable) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: _QueryTable) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: _QueryTable) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: _QueryTable) FieldNames* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1584)
    END FieldNames;

    PROCEDURE (this: _QueryTable) PUTFieldNames* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1584, p1)
    END PUTFieldNames;

    PROCEDURE (this: _QueryTable) RowNumbers* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1585)
    END RowNumbers;

    PROCEDURE (this: _QueryTable) PUTRowNumbers* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1585, p1)
    END PUTRowNumbers;

    PROCEDURE (this: _QueryTable) FillAdjacentFormulas* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1586)
    END FillAdjacentFormulas;

    PROCEDURE (this: _QueryTable) PUTFillAdjacentFormulas* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1586, p1)
    END PUTFillAdjacentFormulas;

    PROCEDURE (this: _QueryTable) HasAutoFormat* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 695)
    END HasAutoFormat;

    PROCEDURE (this: _QueryTable) PUTHasAutoFormat* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 695, p1)
    END PUTHasAutoFormat;

    PROCEDURE (this: _QueryTable) RefreshOnFileOpen* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1479)
    END RefreshOnFileOpen;

    PROCEDURE (this: _QueryTable) PUTRefreshOnFileOpen* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1479, p1)
    END PUTRefreshOnFileOpen;

    PROCEDURE (this: _QueryTable) Refreshing* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1587)
    END Refreshing;

    PROCEDURE (this: _QueryTable) FetchedRowOverflow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1588)
    END FetchedRowOverflow;

    PROCEDURE (this: _QueryTable) BackgroundQuery* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1427)
    END BackgroundQuery;

    PROCEDURE (this: _QueryTable) PUTBackgroundQuery* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1427, p1)
    END PUTBackgroundQuery;

    PROCEDURE (this: _QueryTable) CancelRefresh* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1589, NIL);
    END CancelRefresh;

    PROCEDURE (this: _QueryTable) RefreshStyle* (): XlCellInsertionMode, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1590)
    END RefreshStyle;

    PROCEDURE (this: _QueryTable) PUTRefreshStyle* (p1: XlCellInsertionMode), NEW;
    BEGIN
        CtlC.PutInt(this, 1590, p1)
    END PUTRefreshStyle;

    PROCEDURE (this: _QueryTable) EnableRefresh* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1477)
    END EnableRefresh;

    PROCEDURE (this: _QueryTable) PUTEnableRefresh* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1477, p1)
    END PUTEnableRefresh;

    PROCEDURE (this: _QueryTable) SavePassword* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1481)
    END SavePassword;

    PROCEDURE (this: _QueryTable) PUTSavePassword* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1481, p1)
    END PUTSavePassword;

    PROCEDURE (this: _QueryTable) Destination* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 681))
    END Destination;

    PROCEDURE (this: _QueryTable) Connection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1432)
    END Connection;

    PROCEDURE (this: _QueryTable) PUTConnection* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1432, p1)
    END PUTConnection;

    PROCEDURE (this: _QueryTable) Sql* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1480)
    END Sql;

    PROCEDURE (this: _QueryTable) PUTSql* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1480, p1)
    END PUTSql;

    PROCEDURE (this: _QueryTable) PostText* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1591)
    END PostText;

    PROCEDURE (this: _QueryTable) PUTPostText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1591, p1)
    END PUTPostText;

    PROCEDURE (this: _QueryTable) ResultRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1592))
    END ResultRange;

    PROCEDURE (this: _QueryTable) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: _QueryTable) Refresh* ((* optional *) BackgroundQuery: CtlT.Any): BOOLEAN, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(BackgroundQuery, arg[0]);
        CtlC.CallParMethod(this, 1417, arg, ret);
        RETURN CtlC.VarBool(ret)
    END Refresh;

    PROCEDURE (this: _QueryTable) Parameters* (): Parameters, NEW;
    BEGIN
        RETURN ThisParameters(CtlC.GetAny(this, 1593))
    END Parameters;

    PROCEDURE (this: _QueryTable) Recordset* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1165)
    END Recordset;

    PROCEDURE (this: _QueryTable) PUTREFRecordset* (p1: CtlT.Object), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(p1, arg[0]);
        CtlC.CallPutRefMethod(this, 1165, arg, NIL);
    END PUTREFRecordset;

    PROCEDURE (this: _QueryTable) SaveData* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 692)
    END SaveData;

    PROCEDURE (this: _QueryTable) PUTSaveData* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 692, p1)
    END PUTSaveData;

    PROCEDURE (this: _QueryTable) TablesOnlyFromHTML* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1594)
    END TablesOnlyFromHTML;

    PROCEDURE (this: _QueryTable) PUTTablesOnlyFromHTML* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1594, p1)
    END PUTTablesOnlyFromHTML;

    PROCEDURE (this: _QueryTable) EnableEditing* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1595)
    END EnableEditing;

    PROCEDURE (this: _QueryTable) PUTEnableEditing* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1595, p1)
    END PUTEnableEditing;


    (* ---------- QueryTables ---------- *)

    PROCEDURE (this: QueryTables) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: QueryTables) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: QueryTables) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: QueryTables) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: QueryTables) Add* (Connection: CtlT.Any; Destination: Range; (* optional *) Sql: CtlT.Any): QueryTable, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Connection, arg[2]);
        CtlC.ObjVar(Destination, arg[1]);
        CtlC.AnyVar(Sql, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN This_QueryTable(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: QueryTables) Item* (Index: CtlT.Any): QueryTable, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN This_QueryTable(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: QueryTables) _Default* (Index: CtlT.Any): QueryTable, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN This_QueryTable(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: QueryTables) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Parameter ---------- *)

    PROCEDURE (this: Parameter) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Parameter) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Parameter) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Parameter) DataType* (): XlParameterDataType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 722)
    END DataType;

    PROCEDURE (this: Parameter) PUTDataType* (p1: XlParameterDataType), NEW;
    BEGIN
        CtlC.PutInt(this, 722, p1)
    END PUTDataType;

    PROCEDURE (this: Parameter) Type* (): XlParameterType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Parameter) PromptString* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1599)
    END PromptString;

    PROCEDURE (this: Parameter) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Parameter) SourceRange* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 1600))
    END SourceRange;

    PROCEDURE (this: Parameter) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Parameter) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Parameter) SetParam* (Type: XlParameterType; Value: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[1]);
        CtlC.AnyVar(Value, arg[0]);
        CtlC.CallParMethod(this, 1601, arg, NIL);
    END SetParam;


    (* ---------- Parameters ---------- *)

    PROCEDURE (this: Parameters) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Parameters) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Parameters) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Parameters) Add* (Name: ARRAY OF CHAR; (* optional *) iDataType: CtlT.Any): Parameter, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Name, arg[1]);
        CtlC.AnyVar(iDataType, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisParameter(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Parameters) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Parameters) Item* (Index: CtlT.Any): Parameter, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisParameter(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Parameters) _Default* (Index: CtlT.Any): Parameter, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisParameter(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Parameters) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Parameters) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- ODBCError ---------- *)

    PROCEDURE (this: ODBCError) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ODBCError) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ODBCError) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ODBCError) SqlState* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1603)
    END SqlState;

    PROCEDURE (this: ODBCError) ErrorString* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1490)
    END ErrorString;


    (* ---------- ODBCErrors ---------- *)

    PROCEDURE (this: ODBCErrors) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ODBCErrors) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ODBCErrors) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ODBCErrors) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: ODBCErrors) Item* (Index: INTEGER): ODBCError, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisODBCError(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: ODBCErrors) _Default* (Index: INTEGER): ODBCError, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisODBCError(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: ODBCErrors) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Validation ---------- *)

    PROCEDURE (this: Validation) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Validation) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Validation) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Validation) Add* (Type: XlDVType; (* optional *) AlertStyle: CtlT.Any; Operator: CtlT.Any; Formula1: CtlT.Any; Formula2: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[4]);
        CtlC.AnyVar(AlertStyle, arg[3]);
        CtlC.AnyVar(Operator, arg[2]);
        CtlC.AnyVar(Formula1, arg[1]);
        CtlC.AnyVar(Formula2, arg[0]);
        CtlC.CallParMethod(this, 181, arg, NIL);
    END Add;

    PROCEDURE (this: Validation) AlertStyle* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1605)
    END AlertStyle;

    PROCEDURE (this: Validation) IgnoreBlank* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1606)
    END IgnoreBlank;

    PROCEDURE (this: Validation) PUTIgnoreBlank* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1606, p1)
    END PUTIgnoreBlank;

    PROCEDURE (this: Validation) IMEMode* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1607)
    END IMEMode;

    PROCEDURE (this: Validation) PUTIMEMode* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1607, p1)
    END PUTIMEMode;

    PROCEDURE (this: Validation) InCellDropdown* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1608)
    END InCellDropdown;

    PROCEDURE (this: Validation) PUTInCellDropdown* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1608, p1)
    END PUTInCellDropdown;

    PROCEDURE (this: Validation) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Validation) ErrorMessage* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1609)
    END ErrorMessage;

    PROCEDURE (this: Validation) PUTErrorMessage* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1609, p1)
    END PUTErrorMessage;

    PROCEDURE (this: Validation) ErrorTitle* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1610)
    END ErrorTitle;

    PROCEDURE (this: Validation) PUTErrorTitle* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1610, p1)
    END PUTErrorTitle;

    PROCEDURE (this: Validation) InputMessage* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1611)
    END InputMessage;

    PROCEDURE (this: Validation) PUTInputMessage* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1611, p1)
    END PUTInputMessage;

    PROCEDURE (this: Validation) InputTitle* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1612)
    END InputTitle;

    PROCEDURE (this: Validation) PUTInputTitle* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1612, p1)
    END PUTInputTitle;

    PROCEDURE (this: Validation) Formula1* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1579)
    END Formula1;

    PROCEDURE (this: Validation) Formula2* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1580)
    END Formula2;

    PROCEDURE (this: Validation) Modify* ((* optional *) Type: CtlT.Any; AlertStyle: CtlT.Any; Operator: CtlT.Any; Formula1: CtlT.Any; Formula2: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[4]);
        CtlC.AnyVar(AlertStyle, arg[3]);
        CtlC.AnyVar(Operator, arg[2]);
        CtlC.AnyVar(Formula1, arg[1]);
        CtlC.AnyVar(Formula2, arg[0]);
        CtlC.CallParMethod(this, 1581, arg, NIL);
    END Modify;

    PROCEDURE (this: Validation) Operator* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 797)
    END Operator;

    PROCEDURE (this: Validation) ShowError* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1613)
    END ShowError;

    PROCEDURE (this: Validation) PUTShowError* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1613, p1)
    END PUTShowError;

    PROCEDURE (this: Validation) ShowInput* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1614)
    END ShowInput;

    PROCEDURE (this: Validation) PUTShowInput* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1614, p1)
    END PUTShowInput;

    PROCEDURE (this: Validation) Type* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Validation) Value* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 6)
    END Value;


    (* ---------- Hyperlinks ---------- *)

    PROCEDURE (this: Hyperlinks) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Hyperlinks) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Hyperlinks) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Hyperlinks) Add* (Anchor: CtlT.Object; Address: ARRAY OF CHAR; (* optional *) SubAddress: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.ObjVar(Anchor, arg[2]);
        CtlC.StrVar(Address, arg[1]);
        CtlC.AnyVar(SubAddress, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Add;

    PROCEDURE (this: Hyperlinks) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Hyperlinks) Item* (Index: CtlT.Any): Hyperlink, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisHyperlink(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Hyperlinks) _Default* (Index: CtlT.Any): Hyperlink, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisHyperlink(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Hyperlinks) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Hyperlinks) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- Hyperlink ---------- *)

    PROCEDURE (this: Hyperlink) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Hyperlink) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Hyperlink) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Hyperlink) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Hyperlink) Range* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 197))
    END Range;

    PROCEDURE (this: Hyperlink) Shape* (): Shape, NEW;
    BEGIN
        RETURN ThisShape(CtlC.GetAny(this, 1582))
    END Shape;

    PROCEDURE (this: Hyperlink) SubAddress* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1471)
    END SubAddress;

    PROCEDURE (this: Hyperlink) PUTSubAddress* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1471, p1)
    END PUTSubAddress;

    PROCEDURE (this: Hyperlink) Address* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 236)
    END Address;

    PROCEDURE (this: Hyperlink) PUTAddress* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 236, p1)
    END PUTAddress;

    PROCEDURE (this: Hyperlink) Type* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Hyperlink) AddToFavorites* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1476, NIL);
    END AddToFavorites;

    PROCEDURE (this: Hyperlink) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Hyperlink) Follow* ((* optional *) NewWindow: CtlT.Any; AddHistory: CtlT.Any; ExtraInfo: CtlT.Any; Method: CtlT.Any; HeaderInfo: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(NewWindow, arg[4]);
        CtlC.AnyVar(AddHistory, arg[3]);
        CtlC.AnyVar(ExtraInfo, arg[2]);
        CtlC.AnyVar(Method, arg[1]);
        CtlC.AnyVar(HeaderInfo, arg[0]);
        CtlC.CallParMethod(this, 1616, arg, NIL);
    END Follow;


    (* ---------- AutoFilter ---------- *)

    PROCEDURE (this: AutoFilter) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: AutoFilter) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: AutoFilter) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: AutoFilter) Range* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 197))
    END Range;

    PROCEDURE (this: AutoFilter) Filters* (): Filters, NEW;
    BEGIN
        RETURN ThisFilters(CtlC.GetAny(this, 1617))
    END Filters;


    (* ---------- Filters ---------- *)

    PROCEDURE (this: Filters) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Filters) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Filters) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Filters) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Filters) _Default* (Index: INTEGER): Filter, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 0, arg, ret);
        RETURN ThisFilter(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Filters) Item* (Index: INTEGER): Filter, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 170, arg, ret);
        RETURN ThisFilter(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Filters) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- Filter ---------- *)

    PROCEDURE (this: Filter) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Filter) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Filter) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Filter) On* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1618)
    END On;

    PROCEDURE (this: Filter) Criteria1* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 796)
    END Criteria1;

    PROCEDURE (this: Filter) Operator* (): XlAutoFilterOperator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 797)
    END Operator;

    PROCEDURE (this: Filter) Criteria2* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 798)
    END Criteria2;


    (* ---------- AutoCorrect ---------- *)

    PROCEDURE (this: AutoCorrect) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: AutoCorrect) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: AutoCorrect) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: AutoCorrect) AddReplacement* (What: ARRAY OF CHAR; Replacement: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(What, arg[1]);
        CtlC.StrVar(Replacement, arg[0]);
        CtlC.CallParMethod(this, 1146, arg, NIL);
    END AddReplacement;

    PROCEDURE (this: AutoCorrect) CapitalizeNamesOfDays* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1150)
    END CapitalizeNamesOfDays;

    PROCEDURE (this: AutoCorrect) PUTCapitalizeNamesOfDays* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1150, p1)
    END PUTCapitalizeNamesOfDays;

    PROCEDURE (this: AutoCorrect) DeleteReplacement* (What: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(What, arg[0]);
        CtlC.CallParMethod(this, 1147, arg, NIL);
    END DeleteReplacement;

    PROCEDURE (this: AutoCorrect) ReplacementList* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1151, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ReplacementList;

    PROCEDURE (this: AutoCorrect) ReplaceText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1148)
    END ReplaceText;

    PROCEDURE (this: AutoCorrect) PUTReplaceText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1148, p1)
    END PUTReplaceText;

    PROCEDURE (this: AutoCorrect) TwoInitialCapitals* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1149)
    END TwoInitialCapitals;

    PROCEDURE (this: AutoCorrect) PUTTwoInitialCapitals* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1149, p1)
    END PUTTwoInitialCapitals;

    PROCEDURE (this: AutoCorrect) CorrectSentenceCap* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1619)
    END CorrectSentenceCap;

    PROCEDURE (this: AutoCorrect) PUTCorrectSentenceCap* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1619, p1)
    END PUTCorrectSentenceCap;

    PROCEDURE (this: AutoCorrect) CorrectCapsLock* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1620)
    END CorrectCapsLock;

    PROCEDURE (this: AutoCorrect) PUTCorrectCapsLock* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1620, p1)
    END PUTCorrectCapsLock;


    (* ---------- Border ---------- *)

    PROCEDURE (this: Border) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Border) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Border) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Border) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Border) PUTColor* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, p1)
    END PUTColor;

    PROCEDURE (this: Border) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Border) PUTColorIndex* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, p1)
    END PUTColorIndex;

    PROCEDURE (this: Border) LineStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 119)
    END LineStyle;

    PROCEDURE (this: Border) PUTLineStyle* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 119, p1)
    END PUTLineStyle;

    PROCEDURE (this: Border) Weight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 120)
    END Weight;

    PROCEDURE (this: Border) PUTWeight* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 120, p1)
    END PUTWeight;


    (* ---------- Interior ---------- *)

    PROCEDURE (this: Interior) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Interior) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Interior) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Interior) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Interior) PUTColor* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, p1)
    END PUTColor;

    PROCEDURE (this: Interior) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Interior) PUTColorIndex* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, p1)
    END PUTColorIndex;

    PROCEDURE (this: Interior) InvertIfNegative* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 132)
    END InvertIfNegative;

    PROCEDURE (this: Interior) PUTInvertIfNegative* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 132, p1)
    END PUTInvertIfNegative;

    PROCEDURE (this: Interior) Pattern* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 95)
    END Pattern;

    PROCEDURE (this: Interior) PUTPattern* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 95, p1)
    END PUTPattern;

    PROCEDURE (this: Interior) PatternColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 100)
    END PatternColor;

    PROCEDURE (this: Interior) PUTPatternColor* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 100, p1)
    END PUTPatternColor;

    PROCEDURE (this: Interior) PatternColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 98)
    END PatternColorIndex;

    PROCEDURE (this: Interior) PUTPatternColorIndex* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 98, p1)
    END PUTPatternColorIndex;


    (* ---------- ChartFillFormat ---------- *)

    PROCEDURE (this: ChartFillFormat) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartFillFormat) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartFillFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartFillFormat) OneColorGradient* (Style: CtlOffice.MsoGradientStyle; Variant: INTEGER; Degree: SHORTREAL), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Style, arg[2]);
        CtlC.IntVar(Variant, arg[1]);
        CtlC.SRealVar(Degree, arg[0]);
        CtlC.CallParMethod(this, 1621, arg, NIL);
    END OneColorGradient;

    PROCEDURE (this: ChartFillFormat) TwoColorGradient* (Style: CtlOffice.MsoGradientStyle; Variant: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Style, arg[1]);
        CtlC.IntVar(Variant, arg[0]);
        CtlC.CallParMethod(this, 1624, arg, NIL);
    END TwoColorGradient;

    PROCEDURE (this: ChartFillFormat) PresetTextured* (PresetTexture: CtlOffice.MsoPresetTexture), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(PresetTexture, arg[0]);
        CtlC.CallParMethod(this, 1625, arg, NIL);
    END PresetTextured;

    PROCEDURE (this: ChartFillFormat) Solid* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1627, NIL);
    END Solid;

    PROCEDURE (this: ChartFillFormat) Patterned* (Pattern: CtlOffice.MsoPatternType), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Pattern, arg[0]);
        CtlC.CallParMethod(this, 1628, arg, NIL);
    END Patterned;

    PROCEDURE (this: ChartFillFormat) UserPicture* ((* optional *) PictureFile: CtlT.Any; PictureFormat: CtlT.Any; PictureStackUnit: CtlT.Any; PicturePlacement: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(PictureFile, arg[3]);
        CtlC.AnyVar(PictureFormat, arg[2]);
        CtlC.AnyVar(PictureStackUnit, arg[1]);
        CtlC.AnyVar(PicturePlacement, arg[0]);
        CtlC.CallParMethod(this, 1629, arg, NIL);
    END UserPicture;

    PROCEDURE (this: ChartFillFormat) UserTextured* (TextureFile: ARRAY OF CHAR), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(TextureFile, arg[0]);
        CtlC.CallParMethod(this, 1634, arg, NIL);
    END UserTextured;

    PROCEDURE (this: ChartFillFormat) PresetGradient* (Style: CtlOffice.MsoGradientStyle; Variant: INTEGER; PresetGradientType: CtlOffice.MsoPresetGradientType), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Style, arg[2]);
        CtlC.IntVar(Variant, arg[1]);
        CtlC.IntVar(PresetGradientType, arg[0]);
        CtlC.CallParMethod(this, 1636, arg, NIL);
    END PresetGradient;

    PROCEDURE (this: ChartFillFormat) BackColor* (): ChartColorFormat, NEW;
    BEGIN
        RETURN ThisChartColorFormat(CtlC.GetAny(this, 1638))
    END BackColor;

    PROCEDURE (this: ChartFillFormat) ForeColor* (): ChartColorFormat, NEW;
    BEGIN
        RETURN ThisChartColorFormat(CtlC.GetAny(this, 1639))
    END ForeColor;

    PROCEDURE (this: ChartFillFormat) GradientColorType* (): CtlOffice.MsoGradientColorType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1640)
    END GradientColorType;

    PROCEDURE (this: ChartFillFormat) GradientDegree* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 1641)
    END GradientDegree;

    PROCEDURE (this: ChartFillFormat) GradientStyle* (): CtlOffice.MsoGradientStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1642)
    END GradientStyle;

    PROCEDURE (this: ChartFillFormat) GradientVariant* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1643)
    END GradientVariant;

    PROCEDURE (this: ChartFillFormat) Pattern* (): CtlOffice.MsoPatternType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 95)
    END Pattern;

    PROCEDURE (this: ChartFillFormat) PresetGradientType* (): CtlOffice.MsoPresetGradientType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1637)
    END PresetGradientType;

    PROCEDURE (this: ChartFillFormat) PresetTexture* (): CtlOffice.MsoPresetTexture, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1626)
    END PresetTexture;

    PROCEDURE (this: ChartFillFormat) TextureName* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1644)
    END TextureName;

    PROCEDURE (this: ChartFillFormat) TextureType* (): CtlOffice.MsoTextureType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1645)
    END TextureType;

    PROCEDURE (this: ChartFillFormat) Type* (): CtlOffice.MsoFillType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: ChartFillFormat) Visible* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 558)
    END Visible;

    PROCEDURE (this: ChartFillFormat) PUTVisible* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 558, p1)
    END PUTVisible;


    (* ---------- ChartColorFormat ---------- *)

    PROCEDURE (this: ChartColorFormat) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartColorFormat) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartColorFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartColorFormat) SchemeColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1646)
    END SchemeColor;

    PROCEDURE (this: ChartColorFormat) PUTSchemeColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1646, p1)
    END PUTSchemeColor;

    PROCEDURE (this: ChartColorFormat) RGB* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1055)
    END RGB;

    PROCEDURE (this: ChartColorFormat) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: ChartColorFormat) Type* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;


    (* ---------- Axis ---------- *)

    PROCEDURE (this: Axis) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Axis) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Axis) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Axis) AxisBetweenCategories* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 45)
    END AxisBetweenCategories;

    PROCEDURE (this: Axis) PUTAxisBetweenCategories* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 45, p1)
    END PUTAxisBetweenCategories;

    PROCEDURE (this: Axis) AxisGroup* (): XlAxisGroup, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 47)
    END AxisGroup;

    PROCEDURE (this: Axis) AxisTitle* (): AxisTitle, NEW;
    BEGIN
        RETURN ThisAxisTitle(CtlC.GetAny(this, 82))
    END AxisTitle;

    PROCEDURE (this: Axis) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Axis) CategoryNames* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 156)
    END CategoryNames;

    PROCEDURE (this: Axis) PUTCategoryNames* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 156, p1)
    END PUTCategoryNames;

    PROCEDURE (this: Axis) Crosses* (): XlAxisCrosses, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 42)
    END Crosses;

    PROCEDURE (this: Axis) PUTCrosses* (p1: XlAxisCrosses), NEW;
    BEGIN
        CtlC.PutInt(this, 42, p1)
    END PUTCrosses;

    PROCEDURE (this: Axis) CrossesAt* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 43)
    END CrossesAt;

    PROCEDURE (this: Axis) PUTCrossesAt* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 43, p1)
    END PUTCrossesAt;

    PROCEDURE (this: Axis) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Axis) HasMajorGridlines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 24)
    END HasMajorGridlines;

    PROCEDURE (this: Axis) PUTHasMajorGridlines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 24, p1)
    END PUTHasMajorGridlines;

    PROCEDURE (this: Axis) HasMinorGridlines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 25)
    END HasMinorGridlines;

    PROCEDURE (this: Axis) PUTHasMinorGridlines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 25, p1)
    END PUTHasMinorGridlines;

    PROCEDURE (this: Axis) HasTitle* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 54)
    END HasTitle;

    PROCEDURE (this: Axis) PUTHasTitle* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 54, p1)
    END PUTHasTitle;

    PROCEDURE (this: Axis) MajorGridlines* (): Gridlines, NEW;
    BEGIN
        RETURN ThisGridlines(CtlC.GetAny(this, 89))
    END MajorGridlines;

    PROCEDURE (this: Axis) MajorTickMark* (): XlTickMark, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 26)
    END MajorTickMark;

    PROCEDURE (this: Axis) PUTMajorTickMark* (p1: XlTickMark), NEW;
    BEGIN
        CtlC.PutInt(this, 26, p1)
    END PUTMajorTickMark;

    PROCEDURE (this: Axis) MajorUnit* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 37)
    END MajorUnit;

    PROCEDURE (this: Axis) PUTMajorUnit* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 37, p1)
    END PUTMajorUnit;

    PROCEDURE (this: Axis) MajorUnitIsAuto* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 38)
    END MajorUnitIsAuto;

    PROCEDURE (this: Axis) PUTMajorUnitIsAuto* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 38, p1)
    END PUTMajorUnitIsAuto;

    PROCEDURE (this: Axis) MaximumScale* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 35)
    END MaximumScale;

    PROCEDURE (this: Axis) PUTMaximumScale* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 35, p1)
    END PUTMaximumScale;

    PROCEDURE (this: Axis) MaximumScaleIsAuto* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 36)
    END MaximumScaleIsAuto;

    PROCEDURE (this: Axis) PUTMaximumScaleIsAuto* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 36, p1)
    END PUTMaximumScaleIsAuto;

    PROCEDURE (this: Axis) MinimumScale* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 33)
    END MinimumScale;

    PROCEDURE (this: Axis) PUTMinimumScale* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 33, p1)
    END PUTMinimumScale;

    PROCEDURE (this: Axis) MinimumScaleIsAuto* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 34)
    END MinimumScaleIsAuto;

    PROCEDURE (this: Axis) PUTMinimumScaleIsAuto* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 34, p1)
    END PUTMinimumScaleIsAuto;

    PROCEDURE (this: Axis) MinorGridlines* (): Gridlines, NEW;
    BEGIN
        RETURN ThisGridlines(CtlC.GetAny(this, 90))
    END MinorGridlines;

    PROCEDURE (this: Axis) MinorTickMark* (): XlTickMark, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 27)
    END MinorTickMark;

    PROCEDURE (this: Axis) PUTMinorTickMark* (p1: XlTickMark), NEW;
    BEGIN
        CtlC.PutInt(this, 27, p1)
    END PUTMinorTickMark;

    PROCEDURE (this: Axis) MinorUnit* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 39)
    END MinorUnit;

    PROCEDURE (this: Axis) PUTMinorUnit* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 39, p1)
    END PUTMinorUnit;

    PROCEDURE (this: Axis) MinorUnitIsAuto* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 40)
    END MinorUnitIsAuto;

    PROCEDURE (this: Axis) PUTMinorUnitIsAuto* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 40, p1)
    END PUTMinorUnitIsAuto;

    PROCEDURE (this: Axis) ReversePlotOrder* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 44)
    END ReversePlotOrder;

    PROCEDURE (this: Axis) PUTReversePlotOrder* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 44, p1)
    END PUTReversePlotOrder;

    PROCEDURE (this: Axis) ScaleType* (): XlScaleType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 41)
    END ScaleType;

    PROCEDURE (this: Axis) PUTScaleType* (p1: XlScaleType), NEW;
    BEGIN
        CtlC.PutInt(this, 41, p1)
    END PUTScaleType;

    PROCEDURE (this: Axis) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Axis) TickLabelPosition* (): XlTickLabelPosition, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 28)
    END TickLabelPosition;

    PROCEDURE (this: Axis) PUTTickLabelPosition* (p1: XlTickLabelPosition), NEW;
    BEGIN
        CtlC.PutInt(this, 28, p1)
    END PUTTickLabelPosition;

    PROCEDURE (this: Axis) TickLabels* (): TickLabels, NEW;
    BEGIN
        RETURN ThisTickLabels(CtlC.GetAny(this, 91))
    END TickLabels;

    PROCEDURE (this: Axis) TickLabelSpacing* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 29)
    END TickLabelSpacing;

    PROCEDURE (this: Axis) PUTTickLabelSpacing* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 29, p1)
    END PUTTickLabelSpacing;

    PROCEDURE (this: Axis) TickMarkSpacing* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 31)
    END TickMarkSpacing;

    PROCEDURE (this: Axis) PUTTickMarkSpacing* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 31, p1)
    END PUTTickMarkSpacing;

    PROCEDURE (this: Axis) Type* (): XlAxisType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Axis) PUTType* (p1: XlAxisType), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;

    PROCEDURE (this: Axis) BaseUnit* (): XlTimeUnit, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1647)
    END BaseUnit;

    PROCEDURE (this: Axis) PUTBaseUnit* (p1: XlTimeUnit), NEW;
    BEGIN
        CtlC.PutInt(this, 1647, p1)
    END PUTBaseUnit;

    PROCEDURE (this: Axis) BaseUnitIsAuto* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1648)
    END BaseUnitIsAuto;

    PROCEDURE (this: Axis) PUTBaseUnitIsAuto* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1648, p1)
    END PUTBaseUnitIsAuto;

    PROCEDURE (this: Axis) MajorUnitScale* (): XlTimeUnit, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1649)
    END MajorUnitScale;

    PROCEDURE (this: Axis) PUTMajorUnitScale* (p1: XlTimeUnit), NEW;
    BEGIN
        CtlC.PutInt(this, 1649, p1)
    END PUTMajorUnitScale;

    PROCEDURE (this: Axis) MinorUnitScale* (): XlTimeUnit, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1650)
    END MinorUnitScale;

    PROCEDURE (this: Axis) PUTMinorUnitScale* (p1: XlTimeUnit), NEW;
    BEGIN
        CtlC.PutInt(this, 1650, p1)
    END PUTMinorUnitScale;

    PROCEDURE (this: Axis) CategoryType* (): XlCategoryType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1651)
    END CategoryType;

    PROCEDURE (this: Axis) PUTCategoryType* (p1: XlCategoryType), NEW;
    BEGIN
        CtlC.PutInt(this, 1651, p1)
    END PUTCategoryType;

    PROCEDURE (this: Axis) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Axis) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Axis) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Axis) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;


    (* ---------- ChartTitle ---------- *)

    PROCEDURE (this: ChartTitle) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartTitle) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartTitle) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartTitle) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ChartTitle) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: ChartTitle) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: ChartTitle) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ChartTitle) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: ChartTitle) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: ChartTitle) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: ChartTitle) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: ChartTitle) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: ChartTitle) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: ChartTitle) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: ChartTitle) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: ChartTitle) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ChartTitle) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ChartTitle) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: ChartTitle) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: ChartTitle) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: ChartTitle) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: ChartTitle) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: ChartTitle) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: ChartTitle) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ChartTitle) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ChartTitle) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: ChartTitle) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: ChartTitle) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: ChartTitle) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: ChartTitle) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: ChartTitle) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;


    (* ---------- AxisTitle ---------- *)

    PROCEDURE (this: AxisTitle) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: AxisTitle) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: AxisTitle) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: AxisTitle) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: AxisTitle) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: AxisTitle) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: AxisTitle) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: AxisTitle) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: AxisTitle) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: AxisTitle) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: AxisTitle) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: AxisTitle) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: AxisTitle) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: AxisTitle) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: AxisTitle) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: AxisTitle) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: AxisTitle) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: AxisTitle) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: AxisTitle) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: AxisTitle) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: AxisTitle) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: AxisTitle) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: AxisTitle) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: AxisTitle) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: AxisTitle) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: AxisTitle) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: AxisTitle) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: AxisTitle) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: AxisTitle) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: AxisTitle) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: AxisTitle) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;


    (* ---------- ChartGroup ---------- *)

    PROCEDURE (this: ChartGroup) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartGroup) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartGroup) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartGroup) AxisGroup* (): XlAxisGroup, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 47)
    END AxisGroup;

    PROCEDURE (this: ChartGroup) PUTAxisGroup* (p1: XlAxisGroup), NEW;
    BEGIN
        CtlC.PutInt(this, 47, p1)
    END PUTAxisGroup;

    PROCEDURE (this: ChartGroup) DoughnutHoleSize* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1126)
    END DoughnutHoleSize;

    PROCEDURE (this: ChartGroup) PUTDoughnutHoleSize* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1126, p1)
    END PUTDoughnutHoleSize;

    PROCEDURE (this: ChartGroup) DownBars* (): DownBars, NEW;
    BEGIN
        RETURN ThisDownBars(CtlC.GetAny(this, 141))
    END DownBars;

    PROCEDURE (this: ChartGroup) DropLines* (): DropLines, NEW;
    BEGIN
        RETURN ThisDropLines(CtlC.GetAny(this, 142))
    END DropLines;

    PROCEDURE (this: ChartGroup) FirstSliceAngle* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 63)
    END FirstSliceAngle;

    PROCEDURE (this: ChartGroup) PUTFirstSliceAngle* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 63, p1)
    END PUTFirstSliceAngle;

    PROCEDURE (this: ChartGroup) GapWidth* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 51)
    END GapWidth;

    PROCEDURE (this: ChartGroup) PUTGapWidth* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 51, p1)
    END PUTGapWidth;

    PROCEDURE (this: ChartGroup) HasDropLines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 61)
    END HasDropLines;

    PROCEDURE (this: ChartGroup) PUTHasDropLines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 61, p1)
    END PUTHasDropLines;

    PROCEDURE (this: ChartGroup) HasHiLoLines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 62)
    END HasHiLoLines;

    PROCEDURE (this: ChartGroup) PUTHasHiLoLines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 62, p1)
    END PUTHasHiLoLines;

    PROCEDURE (this: ChartGroup) HasRadarAxisLabels* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 64)
    END HasRadarAxisLabels;

    PROCEDURE (this: ChartGroup) PUTHasRadarAxisLabels* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 64, p1)
    END PUTHasRadarAxisLabels;

    PROCEDURE (this: ChartGroup) HasSeriesLines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 65)
    END HasSeriesLines;

    PROCEDURE (this: ChartGroup) PUTHasSeriesLines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 65, p1)
    END PUTHasSeriesLines;

    PROCEDURE (this: ChartGroup) HasUpDownBars* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 66)
    END HasUpDownBars;

    PROCEDURE (this: ChartGroup) PUTHasUpDownBars* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 66, p1)
    END PUTHasUpDownBars;

    PROCEDURE (this: ChartGroup) HiLoLines* (): HiLoLines, NEW;
    BEGIN
        RETURN ThisHiLoLines(CtlC.GetAny(this, 143))
    END HiLoLines;

    PROCEDURE (this: ChartGroup) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: ChartGroup) Overlap* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 56)
    END Overlap;

    PROCEDURE (this: ChartGroup) PUTOverlap* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 56, p1)
    END PUTOverlap;

    PROCEDURE (this: ChartGroup) RadarAxisLabels* (): TickLabels, NEW;
    BEGIN
        RETURN ThisTickLabels(CtlC.GetAny(this, 144))
    END RadarAxisLabels;

    PROCEDURE (this: ChartGroup) SeriesCollection* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 68, arg, ret);
        RETURN CtlC.VarObj(ret)
    END SeriesCollection;

    PROCEDURE (this: ChartGroup) SeriesLines* (): SeriesLines, NEW;
    BEGIN
        RETURN ThisSeriesLines(CtlC.GetAny(this, 145))
    END SeriesLines;

    PROCEDURE (this: ChartGroup) SubType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 109)
    END SubType;

    PROCEDURE (this: ChartGroup) PUTSubType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 109, p1)
    END PUTSubType;

    PROCEDURE (this: ChartGroup) Type* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: ChartGroup) PUTType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;

    PROCEDURE (this: ChartGroup) UpBars* (): UpBars, NEW;
    BEGIN
        RETURN ThisUpBars(CtlC.GetAny(this, 140))
    END UpBars;

    PROCEDURE (this: ChartGroup) VaryByCategories* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 60)
    END VaryByCategories;

    PROCEDURE (this: ChartGroup) PUTVaryByCategories* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 60, p1)
    END PUTVaryByCategories;

    PROCEDURE (this: ChartGroup) SizeRepresents* (): XlSizeRepresents, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1652)
    END SizeRepresents;

    PROCEDURE (this: ChartGroup) PUTSizeRepresents* (p1: XlSizeRepresents), NEW;
    BEGIN
        CtlC.PutInt(this, 1652, p1)
    END PUTSizeRepresents;

    PROCEDURE (this: ChartGroup) BubbleScale* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1653)
    END BubbleScale;

    PROCEDURE (this: ChartGroup) PUTBubbleScale* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1653, p1)
    END PUTBubbleScale;

    PROCEDURE (this: ChartGroup) ShowNegativeBubbles* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1654)
    END ShowNegativeBubbles;

    PROCEDURE (this: ChartGroup) PUTShowNegativeBubbles* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1654, p1)
    END PUTShowNegativeBubbles;

    PROCEDURE (this: ChartGroup) SplitType* (): XlChartSplitType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1655)
    END SplitType;

    PROCEDURE (this: ChartGroup) PUTSplitType* (p1: XlChartSplitType), NEW;
    BEGIN
        CtlC.PutInt(this, 1655, p1)
    END PUTSplitType;

    PROCEDURE (this: ChartGroup) SplitValue* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1656)
    END SplitValue;

    PROCEDURE (this: ChartGroup) PUTSplitValue* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1656, p1)
    END PUTSplitValue;

    PROCEDURE (this: ChartGroup) SecondPlotSize* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1657)
    END SecondPlotSize;

    PROCEDURE (this: ChartGroup) PUTSecondPlotSize* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1657, p1)
    END PUTSecondPlotSize;

    PROCEDURE (this: ChartGroup) Has3DShading* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1658)
    END Has3DShading;

    PROCEDURE (this: ChartGroup) PUTHas3DShading* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1658, p1)
    END PUTHas3DShading;


    (* ---------- ChartGroups ---------- *)

    PROCEDURE (this: ChartGroups) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartGroups) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartGroups) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartGroups) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: ChartGroups) Item* (Index: CtlT.Any): ChartGroup, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisChartGroup(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: ChartGroups) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Axes ---------- *)

    PROCEDURE (this: Axes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Axes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Axes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Axes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Axes) Item* (Type: XlAxisType; AxisGroup: XlAxisGroup): Axis, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[1]);
        CtlC.IntVar(AxisGroup, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisAxis(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Axes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Points ---------- *)

    PROCEDURE (this: Points) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Points) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Points) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Points) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Points) Item* (Index: INTEGER): Point, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisPoint(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Points) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Point ---------- *)

    PROCEDURE (this: Point) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Point) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Point) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Point) ApplyDataLabels* (Type: XlDataLabelsType; (* optional *) LegendKey: CtlT.Any; AutoText: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[2]);
        CtlC.AnyVar(LegendKey, arg[1]);
        CtlC.AnyVar(AutoText, arg[0]);
        CtlC.CallParMethod(this, 151, arg, NIL);
    END ApplyDataLabels;

    PROCEDURE (this: Point) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Point) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: Point) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Point) DataLabel* (): DataLabel, NEW;
    BEGIN
        RETURN ThisDataLabel(CtlC.GetAny(this, 158))
    END DataLabel;

    PROCEDURE (this: Point) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Point) Explosion* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 182)
    END Explosion;

    PROCEDURE (this: Point) PUTExplosion* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 182, p1)
    END PUTExplosion;

    PROCEDURE (this: Point) HasDataLabel* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 77)
    END HasDataLabel;

    PROCEDURE (this: Point) PUTHasDataLabel* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 77, p1)
    END PUTHasDataLabel;

    PROCEDURE (this: Point) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Point) InvertIfNegative* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 132)
    END InvertIfNegative;

    PROCEDURE (this: Point) PUTInvertIfNegative* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 132, p1)
    END PUTInvertIfNegative;

    PROCEDURE (this: Point) MarkerBackgroundColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 73)
    END MarkerBackgroundColor;

    PROCEDURE (this: Point) PUTMarkerBackgroundColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 73, p1)
    END PUTMarkerBackgroundColor;

    PROCEDURE (this: Point) MarkerBackgroundColorIndex* (): XlColorIndex, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 74)
    END MarkerBackgroundColorIndex;

    PROCEDURE (this: Point) PUTMarkerBackgroundColorIndex* (p1: XlColorIndex), NEW;
    BEGIN
        CtlC.PutInt(this, 74, p1)
    END PUTMarkerBackgroundColorIndex;

    PROCEDURE (this: Point) MarkerForegroundColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 75)
    END MarkerForegroundColor;

    PROCEDURE (this: Point) PUTMarkerForegroundColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 75, p1)
    END PUTMarkerForegroundColor;

    PROCEDURE (this: Point) MarkerForegroundColorIndex* (): XlColorIndex, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 76)
    END MarkerForegroundColorIndex;

    PROCEDURE (this: Point) PUTMarkerForegroundColorIndex* (p1: XlColorIndex), NEW;
    BEGIN
        CtlC.PutInt(this, 76, p1)
    END PUTMarkerForegroundColorIndex;

    PROCEDURE (this: Point) MarkerSize* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 231)
    END MarkerSize;

    PROCEDURE (this: Point) PUTMarkerSize* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 231, p1)
    END PUTMarkerSize;

    PROCEDURE (this: Point) MarkerStyle* (): XlMarkerStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 72)
    END MarkerStyle;

    PROCEDURE (this: Point) PUTMarkerStyle* (p1: XlMarkerStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 72, p1)
    END PUTMarkerStyle;

    PROCEDURE (this: Point) Paste* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 211, NIL);
    END Paste;

    PROCEDURE (this: Point) PictureType* (): XlChartPictureType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 161)
    END PictureType;

    PROCEDURE (this: Point) PUTPictureType* (p1: XlChartPictureType), NEW;
    BEGIN
        CtlC.PutInt(this, 161, p1)
    END PUTPictureType;

    PROCEDURE (this: Point) PictureUnit* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 162)
    END PictureUnit;

    PROCEDURE (this: Point) PUTPictureUnit* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 162, p1)
    END PUTPictureUnit;

    PROCEDURE (this: Point) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Point) ApplyPictToSides* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1659)
    END ApplyPictToSides;

    PROCEDURE (this: Point) PUTApplyPictToSides* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1659, p1)
    END PUTApplyPictToSides;

    PROCEDURE (this: Point) ApplyPictToFront* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1660)
    END ApplyPictToFront;

    PROCEDURE (this: Point) PUTApplyPictToFront* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1660, p1)
    END PUTApplyPictToFront;

    PROCEDURE (this: Point) ApplyPictToEnd* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1661)
    END ApplyPictToEnd;

    PROCEDURE (this: Point) PUTApplyPictToEnd* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1661, p1)
    END PUTApplyPictToEnd;

    PROCEDURE (this: Point) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Point) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Point) SecondaryPlot* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1662)
    END SecondaryPlot;

    PROCEDURE (this: Point) PUTSecondaryPlot* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1662, p1)
    END PUTSecondaryPlot;

    PROCEDURE (this: Point) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;


    (* ---------- Series ---------- *)

    PROCEDURE (this: Series) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Series) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Series) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Series) ApplyDataLabels* (Type: XlDataLabelsType; (* optional *) LegendKey: CtlT.Any; AutoText: CtlT.Any; HasLeaderLines: CtlT.Any), NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[3]);
        CtlC.AnyVar(LegendKey, arg[2]);
        CtlC.AnyVar(AutoText, arg[1]);
        CtlC.AnyVar(HasLeaderLines, arg[0]);
        CtlC.CallParMethod(this, 151, arg, NIL);
    END ApplyDataLabels;

    PROCEDURE (this: Series) AxisGroup* (): XlAxisGroup, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 47)
    END AxisGroup;

    PROCEDURE (this: Series) PUTAxisGroup* (p1: XlAxisGroup), NEW;
    BEGIN
        CtlC.PutInt(this, 47, p1)
    END PUTAxisGroup;

    PROCEDURE (this: Series) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Series) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: Series) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Series) DataLabels* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 157, arg, ret);
        RETURN CtlC.VarObj(ret)
    END DataLabels;

    PROCEDURE (this: Series) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Series) ErrorBar* (Direction: XlErrorBarDirection; Include: XlErrorBarInclude; Type: XlErrorBarType; (* optional *) Amount: CtlT.Any; MinusValues: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Direction, arg[4]);
        CtlC.IntVar(Include, arg[3]);
        CtlC.IntVar(Type, arg[2]);
        CtlC.AnyVar(Amount, arg[1]);
        CtlC.AnyVar(MinusValues, arg[0]);
        CtlC.CallParMethod(this, 152, arg, NIL);
    END ErrorBar;

    PROCEDURE (this: Series) ErrorBars* (): ErrorBars, NEW;
    BEGIN
        RETURN ThisErrorBars(CtlC.GetAny(this, 159))
    END ErrorBars;

    PROCEDURE (this: Series) Explosion* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 182)
    END Explosion;

    PROCEDURE (this: Series) PUTExplosion* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 182, p1)
    END PUTExplosion;

    PROCEDURE (this: Series) Formula* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 261)
    END Formula;

    PROCEDURE (this: Series) PUTFormula* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 261, p1)
    END PUTFormula;

    PROCEDURE (this: Series) FormulaLocal* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 263)
    END FormulaLocal;

    PROCEDURE (this: Series) PUTFormulaLocal* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 263, p1)
    END PUTFormulaLocal;

    PROCEDURE (this: Series) FormulaR1C1* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 264)
    END FormulaR1C1;

    PROCEDURE (this: Series) PUTFormulaR1C1* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 264, p1)
    END PUTFormulaR1C1;

    PROCEDURE (this: Series) FormulaR1C1Local* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 265)
    END FormulaR1C1Local;

    PROCEDURE (this: Series) PUTFormulaR1C1Local* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 265, p1)
    END PUTFormulaR1C1Local;

    PROCEDURE (this: Series) HasDataLabels* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 78)
    END HasDataLabels;

    PROCEDURE (this: Series) PUTHasDataLabels* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 78, p1)
    END PUTHasDataLabels;

    PROCEDURE (this: Series) HasErrorBars* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 160)
    END HasErrorBars;

    PROCEDURE (this: Series) PUTHasErrorBars* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 160, p1)
    END PUTHasErrorBars;

    PROCEDURE (this: Series) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Series) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: Series) InvertIfNegative* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 132)
    END InvertIfNegative;

    PROCEDURE (this: Series) PUTInvertIfNegative* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 132, p1)
    END PUTInvertIfNegative;

    PROCEDURE (this: Series) MarkerBackgroundColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 73)
    END MarkerBackgroundColor;

    PROCEDURE (this: Series) PUTMarkerBackgroundColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 73, p1)
    END PUTMarkerBackgroundColor;

    PROCEDURE (this: Series) MarkerBackgroundColorIndex* (): XlColorIndex, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 74)
    END MarkerBackgroundColorIndex;

    PROCEDURE (this: Series) PUTMarkerBackgroundColorIndex* (p1: XlColorIndex), NEW;
    BEGIN
        CtlC.PutInt(this, 74, p1)
    END PUTMarkerBackgroundColorIndex;

    PROCEDURE (this: Series) MarkerForegroundColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 75)
    END MarkerForegroundColor;

    PROCEDURE (this: Series) PUTMarkerForegroundColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 75, p1)
    END PUTMarkerForegroundColor;

    PROCEDURE (this: Series) MarkerForegroundColorIndex* (): XlColorIndex, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 76)
    END MarkerForegroundColorIndex;

    PROCEDURE (this: Series) PUTMarkerForegroundColorIndex* (p1: XlColorIndex), NEW;
    BEGIN
        CtlC.PutInt(this, 76, p1)
    END PUTMarkerForegroundColorIndex;

    PROCEDURE (this: Series) MarkerSize* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 231)
    END MarkerSize;

    PROCEDURE (this: Series) PUTMarkerSize* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 231, p1)
    END PUTMarkerSize;

    PROCEDURE (this: Series) MarkerStyle* (): XlMarkerStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 72)
    END MarkerStyle;

    PROCEDURE (this: Series) PUTMarkerStyle* (p1: XlMarkerStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 72, p1)
    END PUTMarkerStyle;

    PROCEDURE (this: Series) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Series) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Series) Paste* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 211, NIL);
    END Paste;

    PROCEDURE (this: Series) PictureType* (): XlChartPictureType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 161)
    END PictureType;

    PROCEDURE (this: Series) PUTPictureType* (p1: XlChartPictureType), NEW;
    BEGIN
        CtlC.PutInt(this, 161, p1)
    END PUTPictureType;

    PROCEDURE (this: Series) PictureUnit* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 162)
    END PictureUnit;

    PROCEDURE (this: Series) PUTPictureUnit* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 162, p1)
    END PUTPictureUnit;

    PROCEDURE (this: Series) PlotOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 228)
    END PlotOrder;

    PROCEDURE (this: Series) PUTPlotOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 228, p1)
    END PUTPlotOrder;

    PROCEDURE (this: Series) Points* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 70, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Points;

    PROCEDURE (this: Series) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Series) Smooth* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 163)
    END Smooth;

    PROCEDURE (this: Series) PUTSmooth* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 163, p1)
    END PUTSmooth;

    PROCEDURE (this: Series) Trendlines* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 154, arg, ret);
        RETURN CtlC.VarObj(ret)
    END Trendlines;

    PROCEDURE (this: Series) Type* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Series) PUTType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;

    PROCEDURE (this: Series) ChartType* (): XlChartType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1400)
    END ChartType;

    PROCEDURE (this: Series) PUTChartType* (p1: XlChartType), NEW;
    BEGIN
        CtlC.PutInt(this, 1400, p1)
    END PUTChartType;

    PROCEDURE (this: Series) ApplyCustomType* (ChartType: XlChartType), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(ChartType, arg[0]);
        CtlC.CallParMethod(this, 1401, arg, NIL);
    END ApplyCustomType;

    PROCEDURE (this: Series) Values* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 164)
    END Values;

    PROCEDURE (this: Series) PUTValues* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 164, p1)
    END PUTValues;

    PROCEDURE (this: Series) XValues* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1111)
    END XValues;

    PROCEDURE (this: Series) PUTXValues* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1111, p1)
    END PUTXValues;

    PROCEDURE (this: Series) BubbleSizes* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1664)
    END BubbleSizes;

    PROCEDURE (this: Series) PUTBubbleSizes* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1664, p1)
    END PUTBubbleSizes;

    PROCEDURE (this: Series) BarShape* (): XlBarShape, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1403)
    END BarShape;

    PROCEDURE (this: Series) PUTBarShape* (p1: XlBarShape), NEW;
    BEGIN
        CtlC.PutInt(this, 1403, p1)
    END PUTBarShape;

    PROCEDURE (this: Series) ApplyPictToSides* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1659)
    END ApplyPictToSides;

    PROCEDURE (this: Series) PUTApplyPictToSides* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1659, p1)
    END PUTApplyPictToSides;

    PROCEDURE (this: Series) ApplyPictToFront* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1660)
    END ApplyPictToFront;

    PROCEDURE (this: Series) PUTApplyPictToFront* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1660, p1)
    END PUTApplyPictToFront;

    PROCEDURE (this: Series) ApplyPictToEnd* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1661)
    END ApplyPictToEnd;

    PROCEDURE (this: Series) PUTApplyPictToEnd* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1661, p1)
    END PUTApplyPictToEnd;

    PROCEDURE (this: Series) Has3DEffect* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1665)
    END Has3DEffect;

    PROCEDURE (this: Series) PUTHas3DEffect* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1665, p1)
    END PUTHas3DEffect;

    PROCEDURE (this: Series) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Series) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Series) HasLeaderLines* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1394)
    END HasLeaderLines;

    PROCEDURE (this: Series) PUTHasLeaderLines* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1394, p1)
    END PUTHasLeaderLines;

    PROCEDURE (this: Series) LeaderLines* (): LeaderLines, NEW;
    BEGIN
        RETURN ThisLeaderLines(CtlC.GetAny(this, 1666))
    END LeaderLines;


    (* ---------- SeriesCollection ---------- *)

    PROCEDURE (this: SeriesCollection) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: SeriesCollection) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: SeriesCollection) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: SeriesCollection) Add* (Source: CtlT.Any; Rowcol: XlRowCol; (* optional *) SeriesLabels: CtlT.Any; CategoryLabels: CtlT.Any; Replace: CtlT.Any): Series, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[4]);
        CtlC.IntVar(Rowcol, arg[3]);
        CtlC.AnyVar(SeriesLabels, arg[2]);
        CtlC.AnyVar(CategoryLabels, arg[1]);
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisSeries(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: SeriesCollection) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: SeriesCollection) Extend* (Source: CtlT.Any; (* optional *) Rowcol: CtlT.Any; CategoryLabels: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[2]);
        CtlC.AnyVar(Rowcol, arg[1]);
        CtlC.AnyVar(CategoryLabels, arg[0]);
        CtlC.CallParMethod(this, 227, arg, NIL);
    END Extend;

    PROCEDURE (this: SeriesCollection) Item* (Index: CtlT.Any): Series, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisSeries(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: SeriesCollection) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: SeriesCollection) Paste* (Rowcol: XlRowCol; (* optional *) SeriesLabels: CtlT.Any; CategoryLabels: CtlT.Any; Replace: CtlT.Any; NewSeries: CtlT.Any), NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Rowcol, arg[4]);
        CtlC.AnyVar(SeriesLabels, arg[3]);
        CtlC.AnyVar(CategoryLabels, arg[2]);
        CtlC.AnyVar(Replace, arg[1]);
        CtlC.AnyVar(NewSeries, arg[0]);
        CtlC.CallParMethod(this, 211, arg, NIL);
    END Paste;

    PROCEDURE (this: SeriesCollection) NewSeries* (): Series, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1117, ret);
        RETURN ThisSeries(CtlC.VarAny(ret))
    END NewSeries;


    (* ---------- DataLabel ---------- *)

    PROCEDURE (this: DataLabel) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DataLabel) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DataLabel) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DataLabel) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: DataLabel) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: DataLabel) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: DataLabel) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DataLabel) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: DataLabel) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: DataLabel) Caption* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 139)
    END Caption;

    PROCEDURE (this: DataLabel) PUTCaption* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 139, p1)
    END PUTCaption;

    PROCEDURE (this: DataLabel) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallGetMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: DataLabel) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: DataLabel) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: DataLabel) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: DataLabel) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: DataLabel) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: DataLabel) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: DataLabel) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: DataLabel) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: DataLabel) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: DataLabel) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: DataLabel) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;

    PROCEDURE (this: DataLabel) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: DataLabel) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: DataLabel) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: DataLabel) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: DataLabel) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: DataLabel) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: DataLabel) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: DataLabel) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: DataLabel) AutoText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 135)
    END AutoText;

    PROCEDURE (this: DataLabel) PUTAutoText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 135, p1)
    END PUTAutoText;

    PROCEDURE (this: DataLabel) NumberFormat* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 193)
    END NumberFormat;

    PROCEDURE (this: DataLabel) PUTNumberFormat* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 193, p1)
    END PUTNumberFormat;

    PROCEDURE (this: DataLabel) NumberFormatLinked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 194)
    END NumberFormatLinked;

    PROCEDURE (this: DataLabel) PUTNumberFormatLinked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 194, p1)
    END PUTNumberFormatLinked;

    PROCEDURE (this: DataLabel) ShowLegendKey* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 171)
    END ShowLegendKey;

    PROCEDURE (this: DataLabel) PUTShowLegendKey* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 171, p1)
    END PUTShowLegendKey;

    PROCEDURE (this: DataLabel) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: DataLabel) PUTType* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, p1)
    END PUTType;

    PROCEDURE (this: DataLabel) Position* (): XlDataLabelPosition, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 133)
    END Position;

    PROCEDURE (this: DataLabel) PUTPosition* (p1: XlDataLabelPosition), NEW;
    BEGIN
        CtlC.PutInt(this, 133, p1)
    END PUTPosition;


    (* ---------- DataLabels ---------- *)

    PROCEDURE (this: DataLabels) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DataLabels) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DataLabels) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DataLabels) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: DataLabels) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: DataLabels) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: DataLabels) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DataLabels) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: DataLabels) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: DataLabels) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: DataLabels) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: DataLabels) PUTHorizontalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: DataLabels) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: DataLabels) PUTOrientation* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: DataLabels) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: DataLabels) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: DataLabels) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: DataLabels) PUTVerticalAlignment* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: DataLabels) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: DataLabels) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: DataLabels) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: DataLabels) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: DataLabels) AutoText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 135)
    END AutoText;

    PROCEDURE (this: DataLabels) PUTAutoText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 135, p1)
    END PUTAutoText;

    PROCEDURE (this: DataLabels) NumberFormat* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 193)
    END NumberFormat;

    PROCEDURE (this: DataLabels) PUTNumberFormat* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 193, p1)
    END PUTNumberFormat;

    PROCEDURE (this: DataLabels) NumberFormatLinked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 194)
    END NumberFormatLinked;

    PROCEDURE (this: DataLabels) PUTNumberFormatLinked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 194, p1)
    END PUTNumberFormatLinked;

    PROCEDURE (this: DataLabels) ShowLegendKey* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 171)
    END ShowLegendKey;

    PROCEDURE (this: DataLabels) PUTShowLegendKey* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 171, p1)
    END PUTShowLegendKey;

    PROCEDURE (this: DataLabels) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: DataLabels) PUTType* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, p1)
    END PUTType;

    PROCEDURE (this: DataLabels) Position* (): XlDataLabelPosition, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 133)
    END Position;

    PROCEDURE (this: DataLabels) PUTPosition* (p1: XlDataLabelPosition), NEW;
    BEGIN
        CtlC.PutInt(this, 133, p1)
    END PUTPosition;

    PROCEDURE (this: DataLabels) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: DataLabels) Item* (Index: CtlT.Any): DataLabel, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisDataLabel(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: DataLabels) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- LegendEntry ---------- *)

    PROCEDURE (this: LegendEntry) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: LegendEntry) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: LegendEntry) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: LegendEntry) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: LegendEntry) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: LegendEntry) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: LegendEntry) LegendKey* (): LegendKey, NEW;
    BEGIN
        RETURN ThisLegendKey(CtlC.GetAny(this, 174))
    END LegendKey;

    PROCEDURE (this: LegendEntry) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: LegendEntry) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: LegendEntry) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;

    PROCEDURE (this: LegendEntry) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: LegendEntry) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: LegendEntry) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: LegendEntry) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;


    (* ---------- LegendEntries ---------- *)

    PROCEDURE (this: LegendEntries) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: LegendEntries) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: LegendEntries) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: LegendEntries) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: LegendEntries) Item* (Index: CtlT.Any): LegendEntry, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisLegendEntry(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: LegendEntries) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- LegendKey ---------- *)

    PROCEDURE (this: LegendKey) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: LegendKey) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: LegendKey) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: LegendKey) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: LegendKey) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: LegendKey) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: LegendKey) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: LegendKey) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: LegendKey) InvertIfNegative* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 132)
    END InvertIfNegative;

    PROCEDURE (this: LegendKey) PUTInvertIfNegative* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 132, p1)
    END PUTInvertIfNegative;

    PROCEDURE (this: LegendKey) MarkerBackgroundColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 73)
    END MarkerBackgroundColor;

    PROCEDURE (this: LegendKey) PUTMarkerBackgroundColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 73, p1)
    END PUTMarkerBackgroundColor;

    PROCEDURE (this: LegendKey) MarkerBackgroundColorIndex* (): XlColorIndex, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 74)
    END MarkerBackgroundColorIndex;

    PROCEDURE (this: LegendKey) PUTMarkerBackgroundColorIndex* (p1: XlColorIndex), NEW;
    BEGIN
        CtlC.PutInt(this, 74, p1)
    END PUTMarkerBackgroundColorIndex;

    PROCEDURE (this: LegendKey) MarkerForegroundColor* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 75)
    END MarkerForegroundColor;

    PROCEDURE (this: LegendKey) PUTMarkerForegroundColor* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 75, p1)
    END PUTMarkerForegroundColor;

    PROCEDURE (this: LegendKey) MarkerForegroundColorIndex* (): XlColorIndex, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 76)
    END MarkerForegroundColorIndex;

    PROCEDURE (this: LegendKey) PUTMarkerForegroundColorIndex* (p1: XlColorIndex), NEW;
    BEGIN
        CtlC.PutInt(this, 76, p1)
    END PUTMarkerForegroundColorIndex;

    PROCEDURE (this: LegendKey) MarkerSize* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 231)
    END MarkerSize;

    PROCEDURE (this: LegendKey) PUTMarkerSize* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 231, p1)
    END PUTMarkerSize;

    PROCEDURE (this: LegendKey) MarkerStyle* (): XlMarkerStyle, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 72)
    END MarkerStyle;

    PROCEDURE (this: LegendKey) PUTMarkerStyle* (p1: XlMarkerStyle), NEW;
    BEGIN
        CtlC.PutInt(this, 72, p1)
    END PUTMarkerStyle;

    PROCEDURE (this: LegendKey) PictureType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 161)
    END PictureType;

    PROCEDURE (this: LegendKey) PUTPictureType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 161, p1)
    END PUTPictureType;

    PROCEDURE (this: LegendKey) PictureUnit* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 162)
    END PictureUnit;

    PROCEDURE (this: LegendKey) PUTPictureUnit* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 162, p1)
    END PUTPictureUnit;

    PROCEDURE (this: LegendKey) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: LegendKey) Smooth* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 163)
    END Smooth;

    PROCEDURE (this: LegendKey) PUTSmooth* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 163, p1)
    END PUTSmooth;

    PROCEDURE (this: LegendKey) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: LegendKey) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: LegendKey) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: LegendKey) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: LegendKey) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: LegendKey) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;


    (* ---------- Trendlines ---------- *)

    PROCEDURE (this: Trendlines) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Trendlines) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Trendlines) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Trendlines) Add* (Type: XlTrendlineType; (* optional *) Order: CtlT.Any; Period: CtlT.Any; Forward: CtlT.Any; Backward: CtlT.Any; Intercept: CtlT.Any; DisplayEquation: CtlT.Any; DisplayRSquared: CtlT.Any; Name: CtlT.Any): Trendline, NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[8]);
        CtlC.AnyVar(Order, arg[7]);
        CtlC.AnyVar(Period, arg[6]);
        CtlC.AnyVar(Forward, arg[5]);
        CtlC.AnyVar(Backward, arg[4]);
        CtlC.AnyVar(Intercept, arg[3]);
        CtlC.AnyVar(DisplayEquation, arg[2]);
        CtlC.AnyVar(DisplayRSquared, arg[1]);
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN ThisTrendline(CtlC.VarAny(ret))
    END Add;

    PROCEDURE (this: Trendlines) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Trendlines) Item* ((* optional *) Index: CtlT.Any): Trendline, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisTrendline(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Trendlines) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, -4, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;


    (* ---------- Trendline ---------- *)

    PROCEDURE (this: Trendline) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Trendline) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Trendline) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Trendline) Backward* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 185)
    END Backward;

    PROCEDURE (this: Trendline) PUTBackward* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 185, p1)
    END PUTBackward;

    PROCEDURE (this: Trendline) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Trendline) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: Trendline) DataLabel* (): DataLabel, NEW;
    BEGIN
        RETURN ThisDataLabel(CtlC.GetAny(this, 158))
    END DataLabel;

    PROCEDURE (this: Trendline) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Trendline) DisplayEquation* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 190)
    END DisplayEquation;

    PROCEDURE (this: Trendline) PUTDisplayEquation* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 190, p1)
    END PUTDisplayEquation;

    PROCEDURE (this: Trendline) DisplayRSquared* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 189)
    END DisplayRSquared;

    PROCEDURE (this: Trendline) PUTDisplayRSquared* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 189, p1)
    END PUTDisplayRSquared;

    PROCEDURE (this: Trendline) Forward* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 191)
    END Forward;

    PROCEDURE (this: Trendline) PUTForward* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 191, p1)
    END PUTForward;

    PROCEDURE (this: Trendline) Index* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 486)
    END Index;

    PROCEDURE (this: Trendline) Intercept* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 186)
    END Intercept;

    PROCEDURE (this: Trendline) PUTIntercept* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 186, p1)
    END PUTIntercept;

    PROCEDURE (this: Trendline) InterceptIsAuto* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 187)
    END InterceptIsAuto;

    PROCEDURE (this: Trendline) PUTInterceptIsAuto* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 187, p1)
    END PUTInterceptIsAuto;

    PROCEDURE (this: Trendline) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Trendline) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Trendline) NameIsAuto* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 188)
    END NameIsAuto;

    PROCEDURE (this: Trendline) PUTNameIsAuto* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 188, p1)
    END PUTNameIsAuto;

    PROCEDURE (this: Trendline) Order* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 192)
    END Order;

    PROCEDURE (this: Trendline) PUTOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 192, p1)
    END PUTOrder;

    PROCEDURE (this: Trendline) Period* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 184)
    END Period;

    PROCEDURE (this: Trendline) PUTPeriod* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 184, p1)
    END PUTPeriod;

    PROCEDURE (this: Trendline) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Trendline) Type* (): XlTrendlineType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Trendline) PUTType* (p1: XlTrendlineType), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;


    (* ---------- Corners ---------- *)

    PROCEDURE (this: Corners) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Corners) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Corners) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Corners) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Corners) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;


    (* ---------- SeriesLines ---------- *)

    PROCEDURE (this: SeriesLines) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: SeriesLines) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: SeriesLines) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: SeriesLines) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: SeriesLines) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: SeriesLines) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: SeriesLines) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- HiLoLines ---------- *)

    PROCEDURE (this: HiLoLines) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: HiLoLines) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: HiLoLines) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: HiLoLines) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: HiLoLines) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: HiLoLines) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: HiLoLines) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- Gridlines ---------- *)

    PROCEDURE (this: Gridlines) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Gridlines) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Gridlines) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Gridlines) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Gridlines) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Gridlines) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Gridlines) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- DropLines ---------- *)

    PROCEDURE (this: DropLines) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DropLines) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DropLines) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DropLines) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: DropLines) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: DropLines) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: DropLines) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;


    (* ---------- LeaderLines ---------- *)

    PROCEDURE (this: LeaderLines) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: LeaderLines) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: LeaderLines) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: LeaderLines) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: LeaderLines) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: LeaderLines) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;


    (* ---------- UpBars ---------- *)

    PROCEDURE (this: UpBars) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: UpBars) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: UpBars) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: UpBars) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: UpBars) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: UpBars) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: UpBars) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: UpBars) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: UpBars) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;


    (* ---------- DownBars ---------- *)

    PROCEDURE (this: DownBars) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DownBars) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DownBars) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DownBars) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: DownBars) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: DownBars) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: DownBars) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DownBars) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: DownBars) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;


    (* ---------- Floor ---------- *)

    PROCEDURE (this: Floor) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Floor) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Floor) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Floor) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Floor) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Floor) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Floor) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: Floor) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Floor) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: Floor) PictureType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 161)
    END PictureType;

    PROCEDURE (this: Floor) PUTPictureType* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 161, p1)
    END PUTPictureType;

    PROCEDURE (this: Floor) Paste* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 211, NIL);
    END Paste;


    (* ---------- Walls ---------- *)

    PROCEDURE (this: Walls) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Walls) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Walls) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Walls) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Walls) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Walls) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Walls) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: Walls) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Walls) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: Walls) PictureType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 161)
    END PictureType;

    PROCEDURE (this: Walls) PUTPictureType* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 161, p1)
    END PUTPictureType;

    PROCEDURE (this: Walls) Paste* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 211, NIL);
    END Paste;

    PROCEDURE (this: Walls) PictureUnit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 162)
    END PictureUnit;

    PROCEDURE (this: Walls) PUTPictureUnit* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 162, p1)
    END PUTPictureUnit;


    (* ---------- TickLabels ---------- *)

    PROCEDURE (this: TickLabels) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: TickLabels) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: TickLabels) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: TickLabels) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: TickLabels) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: TickLabels) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: TickLabels) NumberFormat* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 193)
    END NumberFormat;

    PROCEDURE (this: TickLabels) PUTNumberFormat* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 193, p1)
    END PUTNumberFormat;

    PROCEDURE (this: TickLabels) NumberFormatLinked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 194)
    END NumberFormatLinked;

    PROCEDURE (this: TickLabels) PUTNumberFormatLinked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 194, p1)
    END PUTNumberFormatLinked;

    PROCEDURE (this: TickLabels) Orientation* (): XlTickLabelOrientation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 134)
    END Orientation;

    PROCEDURE (this: TickLabels) PUTOrientation* (p1: XlTickLabelOrientation), NEW;
    BEGIN
        CtlC.PutInt(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: TickLabels) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: TickLabels) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: TickLabels) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: TickLabels) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: TickLabels) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;


    (* ---------- PlotArea ---------- *)

    PROCEDURE (this: PlotArea) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: PlotArea) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: PlotArea) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: PlotArea) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: PlotArea) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: PlotArea) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: PlotArea) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: PlotArea) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: PlotArea) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: PlotArea) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: PlotArea) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: PlotArea) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: PlotArea) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: PlotArea) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: PlotArea) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: PlotArea) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: PlotArea) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: PlotArea) InsideLeft* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1667)
    END InsideLeft;

    PROCEDURE (this: PlotArea) InsideTop* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1668)
    END InsideTop;

    PROCEDURE (this: PlotArea) InsideWidth* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1669)
    END InsideWidth;

    PROCEDURE (this: PlotArea) InsideHeight* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 1670)
    END InsideHeight;


    (* ---------- ChartArea ---------- *)

    PROCEDURE (this: ChartArea) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ChartArea) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ChartArea) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ChartArea) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ChartArea) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: ChartArea) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: ChartArea) Clear* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 111, NIL);
    END Clear;

    PROCEDURE (this: ChartArea) ClearContents* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 113, NIL);
    END ClearContents;

    PROCEDURE (this: ChartArea) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: ChartArea) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: ChartArea) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: ChartArea) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: ChartArea) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: ChartArea) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: ChartArea) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ChartArea) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: ChartArea) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: ChartArea) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: ChartArea) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ChartArea) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: ChartArea) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ChartArea) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: ChartArea) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ChartArea) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: ChartArea) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;


    (* ---------- Legend ---------- *)

    PROCEDURE (this: Legend) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Legend) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Legend) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Legend) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Legend) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: Legend) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: Legend) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Legend) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Legend) LegendEntries* ((* optional *) Index: CtlT.Any): CtlT.Object, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 173, arg, ret);
        RETURN CtlC.VarObj(ret)
    END LegendEntries;

    PROCEDURE (this: Legend) Position* (): XlLegendPosition, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 133)
    END Position;

    PROCEDURE (this: Legend) PUTPosition* (p1: XlLegendPosition), NEW;
    BEGIN
        CtlC.PutInt(this, 133, p1)
    END PUTPosition;

    PROCEDURE (this: Legend) Shadow* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 103)
    END Shadow;

    PROCEDURE (this: Legend) PUTShadow* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 103, p1)
    END PUTShadow;

    PROCEDURE (this: Legend) Clear* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 111, NIL);
    END Clear;

    PROCEDURE (this: Legend) Height* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 123)
    END Height;

    PROCEDURE (this: Legend) PUTHeight* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Legend) Interior* (): Interior, NEW;
    BEGIN
        RETURN ThisInterior(CtlC.GetAny(this, 129))
    END Interior;

    PROCEDURE (this: Legend) Fill* (): ChartFillFormat, NEW;
    BEGIN
        RETURN ThisChartFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: Legend) Left* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 127)
    END Left;

    PROCEDURE (this: Legend) PUTLeft* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Legend) Top* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 126)
    END Top;

    PROCEDURE (this: Legend) PUTTop* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Legend) Width* (): REAL, NEW;
    BEGIN
        RETURN CtlC.GetReal(this, 122)
    END Width;

    PROCEDURE (this: Legend) PUTWidth* (p1: REAL), NEW;
    BEGIN
        CtlC.PutReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Legend) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: Legend) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;


    (* ---------- ErrorBars ---------- *)

    PROCEDURE (this: ErrorBars) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ErrorBars) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ErrorBars) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ErrorBars) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ErrorBars) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: ErrorBars) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: ErrorBars) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ErrorBars) ClearFormats* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 112, NIL);
    END ClearFormats;

    PROCEDURE (this: ErrorBars) EndStyle* (): XlEndStyleCap, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1124)
    END EndStyle;

    PROCEDURE (this: ErrorBars) PUTEndStyle* (p1: XlEndStyleCap), NEW;
    BEGIN
        CtlC.PutInt(this, 1124, p1)
    END PUTEndStyle;


    (* ---------- DataTable ---------- *)

    PROCEDURE (this: DataTable) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: DataTable) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: DataTable) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: DataTable) ShowLegendKey* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 171)
    END ShowLegendKey;

    PROCEDURE (this: DataTable) PUTShowLegendKey* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 171, p1)
    END PUTShowLegendKey;

    PROCEDURE (this: DataTable) HasBorderHorizontal* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1671)
    END HasBorderHorizontal;

    PROCEDURE (this: DataTable) PUTHasBorderHorizontal* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1671, p1)
    END PUTHasBorderHorizontal;

    PROCEDURE (this: DataTable) HasBorderVertical* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1672)
    END HasBorderVertical;

    PROCEDURE (this: DataTable) PUTHasBorderVertical* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1672, p1)
    END PUTHasBorderVertical;

    PROCEDURE (this: DataTable) HasBorderOutline* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1673)
    END HasBorderOutline;

    PROCEDURE (this: DataTable) PUTHasBorderOutline* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1673, p1)
    END PUTHasBorderOutline;

    PROCEDURE (this: DataTable) Border* (): Border, NEW;
    BEGIN
        RETURN ThisBorder(CtlC.GetAny(this, 128))
    END Border;

    PROCEDURE (this: DataTable) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: DataTable) Select* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 235, NIL);
    END Select;

    PROCEDURE (this: DataTable) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: DataTable) AutoScaleFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1525)
    END AutoScaleFont;

    PROCEDURE (this: DataTable) PUTAutoScaleFont* (p1: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1525, p1)
    END PUTAutoScaleFont;


    (* ---------- Phonetic ---------- *)

    PROCEDURE (this: Phonetic) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Phonetic) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Phonetic) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Phonetic) Visible* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 558)
    END Visible;

    PROCEDURE (this: Phonetic) PUTVisible* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Phonetic) CharacterType* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1674)
    END CharacterType;

    PROCEDURE (this: Phonetic) PUTCharacterType* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 1674, p1)
    END PUTCharacterType;

    PROCEDURE (this: Phonetic) Alignment* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 453)
    END Alignment;

    PROCEDURE (this: Phonetic) PUTAlignment* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 453, p1)
    END PUTAlignment;

    PROCEDURE (this: Phonetic) Font* (): Font, NEW;
    BEGIN
        RETURN ThisFont(CtlC.GetAny(this, 146))
    END Font;

    PROCEDURE (this: Phonetic) Text* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 138)
    END Text;

    PROCEDURE (this: Phonetic) PUTText* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 138, p1)
    END PUTText;


    (* ---------- Shape ---------- *)

    PROCEDURE (this: Shape) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Shape) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Shape) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Shape) Apply* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1675, NIL);
    END Apply;

    PROCEDURE (this: Shape) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: Shape) Duplicate* (): Shape, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END Duplicate;

    PROCEDURE (this: Shape) Flip* (FlipCmd: CtlOffice.MsoFlipCmd), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(FlipCmd, arg[0]);
        CtlC.CallParMethod(this, 1676, arg, NIL);
    END Flip;

    PROCEDURE (this: Shape) IncrementLeft* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 1678, arg, NIL);
    END IncrementLeft;

    PROCEDURE (this: Shape) IncrementRotation* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 1680, arg, NIL);
    END IncrementRotation;

    PROCEDURE (this: Shape) IncrementTop* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 1681, arg, NIL);
    END IncrementTop;

    PROCEDURE (this: Shape) PickUp* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1682, NIL);
    END PickUp;

    PROCEDURE (this: Shape) RerouteConnections* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1683, NIL);
    END RerouteConnections;

    PROCEDURE (this: Shape) ScaleHeight* (Factor: SHORTREAL; RelativeToOriginalSize: CtlOffice.MsoTriState; (* optional *) Scale: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Factor, arg[2]);
        CtlC.IntVar(RelativeToOriginalSize, arg[1]);
        CtlC.AnyVar(Scale, arg[0]);
        CtlC.CallParMethod(this, 1684, arg, NIL);
    END ScaleHeight;

    PROCEDURE (this: Shape) ScaleWidth* (Factor: SHORTREAL; RelativeToOriginalSize: CtlOffice.MsoTriState; (* optional *) Scale: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Factor, arg[2]);
        CtlC.IntVar(RelativeToOriginalSize, arg[1]);
        CtlC.AnyVar(Scale, arg[0]);
        CtlC.CallParMethod(this, 1688, arg, NIL);
    END ScaleWidth;

    PROCEDURE (this: Shape) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: Shape) SetShapesDefaultProperties* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1689, NIL);
    END SetShapesDefaultProperties;

    PROCEDURE (this: Shape) Ungroup* (): ShapeRange, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN ThisShapeRange(CtlC.VarAny(ret))
    END Ungroup;

    PROCEDURE (this: Shape) ZOrder* (ZOrderCmd: CtlOffice.MsoZOrderCmd), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(ZOrderCmd, arg[0]);
        CtlC.CallParMethod(this, 622, arg, NIL);
    END ZOrder;

    PROCEDURE (this: Shape) Adjustments* (): Adjustments, NEW;
    BEGIN
        RETURN ThisAdjustments(CtlC.GetAny(this, 1691))
    END Adjustments;

    PROCEDURE (this: Shape) TextFrame* (): TextFrame, NEW;
    BEGIN
        RETURN ThisTextFrame(CtlC.GetAny(this, 1692))
    END TextFrame;

    PROCEDURE (this: Shape) AutoShapeType* (): CtlOffice.MsoAutoShapeType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1693)
    END AutoShapeType;

    PROCEDURE (this: Shape) PUTAutoShapeType* (p1: CtlOffice.MsoAutoShapeType), NEW;
    BEGIN
        CtlC.PutInt(this, 1693, p1)
    END PUTAutoShapeType;

    PROCEDURE (this: Shape) Callout* (): CalloutFormat, NEW;
    BEGIN
        RETURN ThisCalloutFormat(CtlC.GetAny(this, 1694))
    END Callout;

    PROCEDURE (this: Shape) ConnectionSiteCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1695)
    END ConnectionSiteCount;

    PROCEDURE (this: Shape) Connector* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1696)
    END Connector;

    PROCEDURE (this: Shape) ConnectorFormat* (): ConnectorFormat, NEW;
    BEGIN
        RETURN ThisConnectorFormat(CtlC.GetAny(this, 1697))
    END ConnectorFormat;

    PROCEDURE (this: Shape) Fill* (): FillFormat, NEW;
    BEGIN
        RETURN ThisFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: Shape) GroupItems* (): GroupShapes, NEW;
    BEGIN
        RETURN ThisGroupShapes(CtlC.GetAny(this, 1698))
    END GroupItems;

    PROCEDURE (this: Shape) Height* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 123)
    END Height;

    PROCEDURE (this: Shape) PUTHeight* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: Shape) HorizontalFlip* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1699)
    END HorizontalFlip;

    PROCEDURE (this: Shape) Left* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 127)
    END Left;

    PROCEDURE (this: Shape) PUTLeft* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: Shape) Line* (): LineFormat, NEW;
    BEGIN
        RETURN ThisLineFormat(CtlC.GetAny(this, 817))
    END Line;

    PROCEDURE (this: Shape) LockAspectRatio* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1700)
    END LockAspectRatio;

    PROCEDURE (this: Shape) PUTLockAspectRatio* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 1700, p1)
    END PUTLockAspectRatio;

    PROCEDURE (this: Shape) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: Shape) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: Shape) Nodes* (): ShapeNodes, NEW;
    BEGIN
        RETURN ThisShapeNodes(CtlC.GetAny(this, 1701))
    END Nodes;

    PROCEDURE (this: Shape) Rotation* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 59)
    END Rotation;

    PROCEDURE (this: Shape) PUTRotation* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 59, p1)
    END PUTRotation;

    PROCEDURE (this: Shape) PictureFormat* (): PictureFormat, NEW;
    BEGIN
        RETURN ThisPictureFormat(CtlC.GetAny(this, 1631))
    END PictureFormat;

    PROCEDURE (this: Shape) Shadow* (): ShadowFormat, NEW;
    BEGIN
        RETURN ThisShadowFormat(CtlC.GetAny(this, 103))
    END Shadow;

    PROCEDURE (this: Shape) TextEffect* (): TextEffectFormat, NEW;
    BEGIN
        RETURN ThisTextEffectFormat(CtlC.GetAny(this, 1702))
    END TextEffect;

    PROCEDURE (this: Shape) ThreeD* (): ThreeDFormat, NEW;
    BEGIN
        RETURN ThisThreeDFormat(CtlC.GetAny(this, 1703))
    END ThreeD;

    PROCEDURE (this: Shape) Top* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 126)
    END Top;

    PROCEDURE (this: Shape) PUTTop* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: Shape) Type* (): CtlOffice.MsoShapeType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: Shape) VerticalFlip* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1704)
    END VerticalFlip;

    PROCEDURE (this: Shape) Vertices* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 621)
    END Vertices;

    PROCEDURE (this: Shape) Visible* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 558)
    END Visible;

    PROCEDURE (this: Shape) PUTVisible* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: Shape) Width* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 122)
    END Width;

    PROCEDURE (this: Shape) PUTWidth* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: Shape) ZOrderPosition* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1705)
    END ZOrderPosition;

    PROCEDURE (this: Shape) Hyperlink* (): Hyperlink, NEW;
    BEGIN
        RETURN ThisHyperlink(CtlC.GetAny(this, 1706))
    END Hyperlink;

    PROCEDURE (this: Shape) BlackWhiteMode* (): CtlOffice.MsoBlackWhiteMode, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1707)
    END BlackWhiteMode;

    PROCEDURE (this: Shape) PUTBlackWhiteMode* (p1: CtlOffice.MsoBlackWhiteMode), NEW;
    BEGIN
        CtlC.PutInt(this, 1707, p1)
    END PUTBlackWhiteMode;

    PROCEDURE (this: Shape) DrawingObject* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1708)
    END DrawingObject;

    PROCEDURE (this: Shape) OnAction* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 596)
    END OnAction;

    PROCEDURE (this: Shape) PUTOnAction* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 596, p1)
    END PUTOnAction;

    PROCEDURE (this: Shape) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: Shape) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: Shape) TopLeftCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 620))
    END TopLeftCell;

    PROCEDURE (this: Shape) BottomRightCell* (): Range, NEW;
    BEGIN
        RETURN ThisRange(CtlC.GetAny(this, 615))
    END BottomRightCell;

    PROCEDURE (this: Shape) Placement* (): XlPlacement, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 617)
    END Placement;

    PROCEDURE (this: Shape) PUTPlacement* (p1: XlPlacement), NEW;
    BEGIN
        CtlC.PutInt(this, 617, p1)
    END PUTPlacement;

    PROCEDURE (this: Shape) Copy* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 551, NIL);
    END Copy;

    PROCEDURE (this: Shape) Cut* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 565, NIL);
    END Cut;

    PROCEDURE (this: Shape) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, NIL);
    END CopyPicture;

    PROCEDURE (this: Shape) ControlFormat* (): ControlFormat, NEW;
    BEGIN
        RETURN ThisControlFormat(CtlC.GetAny(this, 1709))
    END ControlFormat;

    PROCEDURE (this: Shape) LinkFormat* (): LinkFormat, NEW;
    BEGIN
        RETURN ThisLinkFormat(CtlC.GetAny(this, 1710))
    END LinkFormat;

    PROCEDURE (this: Shape) OLEFormat* (): OLEFormat, NEW;
    BEGIN
        RETURN ThisOLEFormat(CtlC.GetAny(this, 1711))
    END OLEFormat;

    PROCEDURE (this: Shape) FormControlType* (): XlFormControl, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1712)
    END FormControlType;


    (* ---------- Shapes ---------- *)

    PROCEDURE (this: Shapes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: Shapes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: Shapes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: Shapes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: Shapes) Item* (Index: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: Shapes) _Default* (Index: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 0, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: Shapes) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: Shapes) AddCallout* (Type: CtlOffice.MsoCalloutType; Left: SHORTREAL; Top: SHORTREAL; Width: SHORTREAL; Height: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[4]);
        CtlC.SRealVar(Left, arg[3]);
        CtlC.SRealVar(Top, arg[2]);
        CtlC.SRealVar(Width, arg[1]);
        CtlC.SRealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 1713, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddCallout;

    PROCEDURE (this: Shapes) AddConnector* (Type: CtlOffice.MsoConnectorType; BeginX: SHORTREAL; BeginY: SHORTREAL; EndX: SHORTREAL; EndY: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[4]);
        CtlC.SRealVar(BeginX, arg[3]);
        CtlC.SRealVar(BeginY, arg[2]);
        CtlC.SRealVar(EndX, arg[1]);
        CtlC.SRealVar(EndY, arg[0]);
        CtlC.CallParMethod(this, 1714, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddConnector;

    PROCEDURE (this: Shapes) AddCurve* (SafeArrayOfPoints: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SafeArrayOfPoints, arg[0]);
        CtlC.CallParMethod(this, 1719, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddCurve;

    PROCEDURE (this: Shapes) AddLabel* (Orientation: CtlOffice.MsoTextOrientation; Left: SHORTREAL; Top: SHORTREAL; Width: SHORTREAL; Height: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Orientation, arg[4]);
        CtlC.SRealVar(Left, arg[3]);
        CtlC.SRealVar(Top, arg[2]);
        CtlC.SRealVar(Width, arg[1]);
        CtlC.SRealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 1721, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddLabel;

    PROCEDURE (this: Shapes) AddLine* (BeginX: SHORTREAL; BeginY: SHORTREAL; EndX: SHORTREAL; EndY: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.SRealVar(BeginX, arg[3]);
        CtlC.SRealVar(BeginY, arg[2]);
        CtlC.SRealVar(EndX, arg[1]);
        CtlC.SRealVar(EndY, arg[0]);
        CtlC.CallParMethod(this, 1722, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddLine;

    PROCEDURE (this: Shapes) AddPicture* (Filename: ARRAY OF CHAR; LinkToFile: CtlOffice.MsoTriState; SaveWithDocument: CtlOffice.MsoTriState; Left: SHORTREAL; Top: SHORTREAL; Width: SHORTREAL; Height: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.StrVar(Filename, arg[6]);
        CtlC.IntVar(LinkToFile, arg[5]);
        CtlC.IntVar(SaveWithDocument, arg[4]);
        CtlC.SRealVar(Left, arg[3]);
        CtlC.SRealVar(Top, arg[2]);
        CtlC.SRealVar(Width, arg[1]);
        CtlC.SRealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 1723, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddPicture;

    PROCEDURE (this: Shapes) AddPolyline* (SafeArrayOfPoints: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SafeArrayOfPoints, arg[0]);
        CtlC.CallParMethod(this, 1726, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddPolyline;

    PROCEDURE (this: Shapes) AddShape* (Type: CtlOffice.MsoAutoShapeType; Left: SHORTREAL; Top: SHORTREAL; Width: SHORTREAL; Height: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[4]);
        CtlC.SRealVar(Left, arg[3]);
        CtlC.SRealVar(Top, arg[2]);
        CtlC.SRealVar(Width, arg[1]);
        CtlC.SRealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 1727, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddShape;

    PROCEDURE (this: Shapes) AddTextEffect* (PresetTextEffect: CtlOffice.MsoPresetTextEffect; Text: ARRAY OF CHAR; FontName: ARRAY OF CHAR; FontSize: SHORTREAL; FontBold: CtlOffice.MsoTriState; FontItalic: CtlOffice.MsoTriState; Left: SHORTREAL; Top: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(PresetTextEffect, arg[7]);
        CtlC.StrVar(Text, arg[6]);
        CtlC.StrVar(FontName, arg[5]);
        CtlC.SRealVar(FontSize, arg[4]);
        CtlC.IntVar(FontBold, arg[3]);
        CtlC.IntVar(FontItalic, arg[2]);
        CtlC.SRealVar(Left, arg[1]);
        CtlC.SRealVar(Top, arg[0]);
        CtlC.CallParMethod(this, 1728, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddTextEffect;

    PROCEDURE (this: Shapes) AddTextbox* (Orientation: CtlOffice.MsoTextOrientation; Left: SHORTREAL; Top: SHORTREAL; Width: SHORTREAL; Height: SHORTREAL): Shape, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Orientation, arg[4]);
        CtlC.SRealVar(Left, arg[3]);
        CtlC.SRealVar(Top, arg[2]);
        CtlC.SRealVar(Width, arg[1]);
        CtlC.SRealVar(Height, arg[0]);
        CtlC.CallParMethod(this, 1734, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddTextbox;

    PROCEDURE (this: Shapes) BuildFreeform* (EditingType: CtlOffice.MsoEditingType; X1: SHORTREAL; Y1: SHORTREAL): FreeformBuilder, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(EditingType, arg[2]);
        CtlC.SRealVar(X1, arg[1]);
        CtlC.SRealVar(Y1, arg[0]);
        CtlC.CallParMethod(this, 1735, arg, ret);
        RETURN ThisFreeformBuilder(CtlC.VarAny(ret))
    END BuildFreeform;

    PROCEDURE (this: Shapes) Range* (Index: CtlT.Any): ShapeRange, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallGetMethod(this, 197, arg, ret);
        RETURN ThisShapeRange(CtlC.VarAny(ret))
    END Range;

    PROCEDURE (this: Shapes) SelectAll* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1737, NIL);
    END SelectAll;

    PROCEDURE (this: Shapes) AddFormControl* (Type: XlFormControl; Left: INTEGER; Top: INTEGER; Width: INTEGER; Height: INTEGER): Shape, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.IntVar(Type, arg[4]);
        CtlC.IntVar(Left, arg[3]);
        CtlC.IntVar(Top, arg[2]);
        CtlC.IntVar(Width, arg[1]);
        CtlC.IntVar(Height, arg[0]);
        CtlC.CallParMethod(this, 1738, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddFormControl;

    PROCEDURE (this: Shapes) AddOLEObject* ((* optional *) ClassType: CtlT.Any; Filename: CtlT.Any; Link: CtlT.Any; DisplayAsIcon: CtlT.Any; IconFileName: CtlT.Any; IconIndex: CtlT.Any; IconLabel: CtlT.Any; Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ClassType, arg[10]);
        CtlC.AnyVar(Filename, arg[9]);
        CtlC.AnyVar(Link, arg[8]);
        CtlC.AnyVar(DisplayAsIcon, arg[7]);
        CtlC.AnyVar(IconFileName, arg[6]);
        CtlC.AnyVar(IconIndex, arg[5]);
        CtlC.AnyVar(IconLabel, arg[4]);
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 1739, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END AddOLEObject;


    (* ---------- ShapeRange ---------- *)

    PROCEDURE (this: ShapeRange) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ShapeRange) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ShapeRange) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ShapeRange) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: ShapeRange) Item* (Index: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: ShapeRange) _Default* (Index: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 0, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: ShapeRange) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;

    PROCEDURE (this: ShapeRange) Align* (AlignCmd: CtlOffice.MsoAlignCmd; RelativeTo: CtlOffice.MsoTriState), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(AlignCmd, arg[1]);
        CtlC.IntVar(RelativeTo, arg[0]);
        CtlC.CallParMethod(this, 1740, arg, NIL);
    END Align;

    PROCEDURE (this: ShapeRange) Apply* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1675, NIL);
    END Apply;

    PROCEDURE (this: ShapeRange) Delete* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 117, NIL);
    END Delete;

    PROCEDURE (this: ShapeRange) Distribute* (DistributeCmd: CtlOffice.MsoDistributeCmd; RelativeTo: CtlOffice.MsoTriState), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(DistributeCmd, arg[1]);
        CtlC.IntVar(RelativeTo, arg[0]);
        CtlC.CallParMethod(this, 1742, arg, NIL);
    END Distribute;

    PROCEDURE (this: ShapeRange) Duplicate* (): ShapeRange, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN ThisShapeRange(CtlC.VarAny(ret))
    END Duplicate;

    PROCEDURE (this: ShapeRange) Flip* (FlipCmd: CtlOffice.MsoFlipCmd), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(FlipCmd, arg[0]);
        CtlC.CallParMethod(this, 1676, arg, NIL);
    END Flip;

    PROCEDURE (this: ShapeRange) IncrementLeft* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 1678, arg, NIL);
    END IncrementLeft;

    PROCEDURE (this: ShapeRange) IncrementRotation* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 1680, arg, NIL);
    END IncrementRotation;

    PROCEDURE (this: ShapeRange) IncrementTop* (Increment: SHORTREAL), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Increment, arg[0]);
        CtlC.CallParMethod(this, 1681, arg, NIL);
    END IncrementTop;

    PROCEDURE (this: ShapeRange) Group* (): Shape, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END Group;

    PROCEDURE (this: ShapeRange) PickUp* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1682, NIL);
    END PickUp;

    PROCEDURE (this: ShapeRange) RerouteConnections* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1683, NIL);
    END RerouteConnections;

    PROCEDURE (this: ShapeRange) Regroup* (): Shape, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1744, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END Regroup;

    PROCEDURE (this: ShapeRange) ScaleHeight* (Factor: SHORTREAL; RelativeToOriginalSize: CtlOffice.MsoTriState; (* optional *) Scale: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Factor, arg[2]);
        CtlC.IntVar(RelativeToOriginalSize, arg[1]);
        CtlC.AnyVar(Scale, arg[0]);
        CtlC.CallParMethod(this, 1684, arg, NIL);
    END ScaleHeight;

    PROCEDURE (this: ShapeRange) ScaleWidth* (Factor: SHORTREAL; RelativeToOriginalSize: CtlOffice.MsoTriState; (* optional *) Scale: CtlT.Any), NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant;
    BEGIN
        CtlC.SRealVar(Factor, arg[2]);
        CtlC.IntVar(RelativeToOriginalSize, arg[1]);
        CtlC.AnyVar(Scale, arg[0]);
        CtlC.CallParMethod(this, 1688, arg, NIL);
    END ScaleWidth;

    PROCEDURE (this: ShapeRange) Select* ((* optional *) Replace: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, NIL);
    END Select;

    PROCEDURE (this: ShapeRange) SetShapesDefaultProperties* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1689, NIL);
    END SetShapesDefaultProperties;

    PROCEDURE (this: ShapeRange) Ungroup* (): ShapeRange, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN ThisShapeRange(CtlC.VarAny(ret))
    END Ungroup;

    PROCEDURE (this: ShapeRange) ZOrder* (ZOrderCmd: CtlOffice.MsoZOrderCmd), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(ZOrderCmd, arg[0]);
        CtlC.CallParMethod(this, 622, arg, NIL);
    END ZOrder;

    PROCEDURE (this: ShapeRange) Adjustments* (): Adjustments, NEW;
    BEGIN
        RETURN ThisAdjustments(CtlC.GetAny(this, 1691))
    END Adjustments;

    PROCEDURE (this: ShapeRange) TextFrame* (): TextFrame, NEW;
    BEGIN
        RETURN ThisTextFrame(CtlC.GetAny(this, 1692))
    END TextFrame;

    PROCEDURE (this: ShapeRange) AutoShapeType* (): CtlOffice.MsoAutoShapeType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1693)
    END AutoShapeType;

    PROCEDURE (this: ShapeRange) PUTAutoShapeType* (p1: CtlOffice.MsoAutoShapeType), NEW;
    BEGIN
        CtlC.PutInt(this, 1693, p1)
    END PUTAutoShapeType;

    PROCEDURE (this: ShapeRange) Callout* (): CalloutFormat, NEW;
    BEGIN
        RETURN ThisCalloutFormat(CtlC.GetAny(this, 1694))
    END Callout;

    PROCEDURE (this: ShapeRange) ConnectionSiteCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1695)
    END ConnectionSiteCount;

    PROCEDURE (this: ShapeRange) Connector* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1696)
    END Connector;

    PROCEDURE (this: ShapeRange) ConnectorFormat* (): ConnectorFormat, NEW;
    BEGIN
        RETURN ThisConnectorFormat(CtlC.GetAny(this, 1697))
    END ConnectorFormat;

    PROCEDURE (this: ShapeRange) Fill* (): FillFormat, NEW;
    BEGIN
        RETURN ThisFillFormat(CtlC.GetAny(this, 1663))
    END Fill;

    PROCEDURE (this: ShapeRange) GroupItems* (): GroupShapes, NEW;
    BEGIN
        RETURN ThisGroupShapes(CtlC.GetAny(this, 1698))
    END GroupItems;

    PROCEDURE (this: ShapeRange) Height* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 123)
    END Height;

    PROCEDURE (this: ShapeRange) PUTHeight* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 123, p1)
    END PUTHeight;

    PROCEDURE (this: ShapeRange) HorizontalFlip* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1699)
    END HorizontalFlip;

    PROCEDURE (this: ShapeRange) Left* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 127)
    END Left;

    PROCEDURE (this: ShapeRange) PUTLeft* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 127, p1)
    END PUTLeft;

    PROCEDURE (this: ShapeRange) Line* (): LineFormat, NEW;
    BEGIN
        RETURN ThisLineFormat(CtlC.GetAny(this, 817))
    END Line;

    PROCEDURE (this: ShapeRange) LockAspectRatio* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1700)
    END LockAspectRatio;

    PROCEDURE (this: ShapeRange) PUTLockAspectRatio* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 1700, p1)
    END PUTLockAspectRatio;

    PROCEDURE (this: ShapeRange) Name* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 110)
    END Name;

    PROCEDURE (this: ShapeRange) PUTName* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 110, p1)
    END PUTName;

    PROCEDURE (this: ShapeRange) Nodes* (): ShapeNodes, NEW;
    BEGIN
        RETURN ThisShapeNodes(CtlC.GetAny(this, 1701))
    END Nodes;

    PROCEDURE (this: ShapeRange) Rotation* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 59)
    END Rotation;

    PROCEDURE (this: ShapeRange) PUTRotation* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 59, p1)
    END PUTRotation;

    PROCEDURE (this: ShapeRange) PictureFormat* (): PictureFormat, NEW;
    BEGIN
        RETURN ThisPictureFormat(CtlC.GetAny(this, 1631))
    END PictureFormat;

    PROCEDURE (this: ShapeRange) Shadow* (): ShadowFormat, NEW;
    BEGIN
        RETURN ThisShadowFormat(CtlC.GetAny(this, 103))
    END Shadow;

    PROCEDURE (this: ShapeRange) TextEffect* (): TextEffectFormat, NEW;
    BEGIN
        RETURN ThisTextEffectFormat(CtlC.GetAny(this, 1702))
    END TextEffect;

    PROCEDURE (this: ShapeRange) ThreeD* (): ThreeDFormat, NEW;
    BEGIN
        RETURN ThisThreeDFormat(CtlC.GetAny(this, 1703))
    END ThreeD;

    PROCEDURE (this: ShapeRange) Top* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 126)
    END Top;

    PROCEDURE (this: ShapeRange) PUTTop* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 126, p1)
    END PUTTop;

    PROCEDURE (this: ShapeRange) Type* (): CtlOffice.MsoShapeType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: ShapeRange) VerticalFlip* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1704)
    END VerticalFlip;

    PROCEDURE (this: ShapeRange) Vertices* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 621)
    END Vertices;

    PROCEDURE (this: ShapeRange) Visible* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 558)
    END Visible;

    PROCEDURE (this: ShapeRange) PUTVisible* (p1: CtlOffice.MsoTriState), NEW;
    BEGIN
        CtlC.PutInt(this, 558, p1)
    END PUTVisible;

    PROCEDURE (this: ShapeRange) Width* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 122)
    END Width;

    PROCEDURE (this: ShapeRange) PUTWidth* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 122, p1)
    END PUTWidth;

    PROCEDURE (this: ShapeRange) ZOrderPosition* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1705)
    END ZOrderPosition;

    PROCEDURE (this: ShapeRange) BlackWhiteMode* (): CtlOffice.MsoBlackWhiteMode, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1707)
    END BlackWhiteMode;

    PROCEDURE (this: ShapeRange) PUTBlackWhiteMode* (p1: CtlOffice.MsoBlackWhiteMode), NEW;
    BEGIN
        CtlC.PutInt(this, 1707, p1)
    END PUTBlackWhiteMode;


    (* ---------- GroupShapes ---------- *)

    PROCEDURE (this: GroupShapes) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: GroupShapes) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: GroupShapes) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: GroupShapes) Count* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 118)
    END Count;

    PROCEDURE (this: GroupShapes) Item* (Index: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END Item;

    PROCEDURE (this: GroupShapes) _Default* (Index: CtlT.Any): Shape, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 0, arg, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END _Default;

    PROCEDURE (this: GroupShapes) _NewEnum* (): CtlT.Enumerator, NEW;
    BEGIN
        RETURN CtlC.GetEnum(this, -4)
    END _NewEnum;


    (* ---------- TextFrame ---------- *)

    PROCEDURE (this: TextFrame) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: TextFrame) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: TextFrame) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: TextFrame) MarginBottom* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 1745)
    END MarginBottom;

    PROCEDURE (this: TextFrame) PUTMarginBottom* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 1745, p1)
    END PUTMarginBottom;

    PROCEDURE (this: TextFrame) MarginLeft* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 1746)
    END MarginLeft;

    PROCEDURE (this: TextFrame) PUTMarginLeft* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 1746, p1)
    END PUTMarginLeft;

    PROCEDURE (this: TextFrame) MarginRight* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 1747)
    END MarginRight;

    PROCEDURE (this: TextFrame) PUTMarginRight* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 1747, p1)
    END PUTMarginRight;

    PROCEDURE (this: TextFrame) MarginTop* (): SHORTREAL, NEW;
    BEGIN
        RETURN CtlC.GetSReal(this, 1748)
    END MarginTop;

    PROCEDURE (this: TextFrame) PUTMarginTop* (p1: SHORTREAL), NEW;
    BEGIN
        CtlC.PutSReal(this, 1748, p1)
    END PUTMarginTop;

    PROCEDURE (this: TextFrame) Orientation* (): CtlOffice.MsoTextOrientation, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 134)
    END Orientation;

    PROCEDURE (this: TextFrame) PUTOrientation* (p1: CtlOffice.MsoTextOrientation), NEW;
    BEGIN
        CtlC.PutInt(this, 134, p1)
    END PUTOrientation;

    PROCEDURE (this: TextFrame) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): Characters, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN ThisCharacters(CtlC.VarAny(ret))
    END Characters;

    PROCEDURE (this: TextFrame) HorizontalAlignment* (): XlHAlign, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: TextFrame) PUTHorizontalAlignment* (p1: XlHAlign), NEW;
    BEGIN
        CtlC.PutInt(this, 136, p1)
    END PUTHorizontalAlignment;

    PROCEDURE (this: TextFrame) VerticalAlignment* (): XlVAlign, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: TextFrame) PUTVerticalAlignment* (p1: XlVAlign), NEW;
    BEGIN
        CtlC.PutInt(this, 137, p1)
    END PUTVerticalAlignment;

    PROCEDURE (this: TextFrame) AutoSize* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 614)
    END AutoSize;

    PROCEDURE (this: TextFrame) PUTAutoSize* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 614, p1)
    END PUTAutoSize;

    PROCEDURE (this: TextFrame) ReadingOrder* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 975)
    END ReadingOrder;

    PROCEDURE (this: TextFrame) PUTReadingOrder* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 975, p1)
    END PUTReadingOrder;

    PROCEDURE (this: TextFrame) AutoMargins* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1749)
    END AutoMargins;

    PROCEDURE (this: TextFrame) PUTAutoMargins* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1749, p1)
    END PUTAutoMargins;


    (* ---------- ConnectorFormat ---------- *)

    PROCEDURE (this: ConnectorFormat) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ConnectorFormat) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ConnectorFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ConnectorFormat) BeginConnect* (ConnectedShape: Shape; ConnectionSite: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(ConnectedShape, arg[1]);
        CtlC.IntVar(ConnectionSite, arg[0]);
        CtlC.CallParMethod(this, 1750, arg, NIL);
    END BeginConnect;

    PROCEDURE (this: ConnectorFormat) BeginDisconnect* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1753, NIL);
    END BeginDisconnect;

    PROCEDURE (this: ConnectorFormat) EndConnect* (ConnectedShape: Shape; ConnectionSite: INTEGER), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.ObjVar(ConnectedShape, arg[1]);
        CtlC.IntVar(ConnectionSite, arg[0]);
        CtlC.CallParMethod(this, 1754, arg, NIL);
    END EndConnect;

    PROCEDURE (this: ConnectorFormat) EndDisconnect* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 1755, NIL);
    END EndDisconnect;

    PROCEDURE (this: ConnectorFormat) BeginConnected* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1756)
    END BeginConnected;

    PROCEDURE (this: ConnectorFormat) BeginConnectedShape* (): Shape, NEW;
    BEGIN
        RETURN ThisShape(CtlC.GetAny(this, 1757))
    END BeginConnectedShape;

    PROCEDURE (this: ConnectorFormat) BeginConnectionSite* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1758)
    END BeginConnectionSite;

    PROCEDURE (this: ConnectorFormat) EndConnected* (): CtlOffice.MsoTriState, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1759)
    END EndConnected;

    PROCEDURE (this: ConnectorFormat) EndConnectedShape* (): Shape, NEW;
    BEGIN
        RETURN ThisShape(CtlC.GetAny(this, 1760))
    END EndConnectedShape;

    PROCEDURE (this: ConnectorFormat) EndConnectionSite* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 1761)
    END EndConnectionSite;

    PROCEDURE (this: ConnectorFormat) Type* (): CtlOffice.MsoConnectorType, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 108)
    END Type;

    PROCEDURE (this: ConnectorFormat) PUTType* (p1: CtlOffice.MsoConnectorType), NEW;
    BEGIN
        CtlC.PutInt(this, 108, p1)
    END PUTType;


    (* ---------- FreeformBuilder ---------- *)

    PROCEDURE (this: FreeformBuilder) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: FreeformBuilder) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: FreeformBuilder) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: FreeformBuilder) AddNodes* (SegmentType: CtlOffice.MsoSegmentType; EditingType: CtlOffice.MsoEditingType; X1: SHORTREAL; Y1: SHORTREAL; (* optional *) X2: CtlT.Any; Y2: CtlT.Any; X3: CtlT.Any; Y3: CtlT.Any), NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(SegmentType, arg[7]);
        CtlC.IntVar(EditingType, arg[6]);
        CtlC.SRealVar(X1, arg[5]);
        CtlC.SRealVar(Y1, arg[4]);
        CtlC.AnyVar(X2, arg[3]);
        CtlC.AnyVar(Y2, arg[2]);
        CtlC.AnyVar(X3, arg[1]);
        CtlC.AnyVar(Y3, arg[0]);
        CtlC.CallParMethod(this, 1762, arg, NIL);
    END AddNodes;

    PROCEDURE (this: FreeformBuilder) ConvertToShape* (): Shape, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1766, ret);
        RETURN ThisShape(CtlC.VarAny(ret))
    END ConvertToShape;


    (* ---------- ControlFormat ---------- *)

    PROCEDURE (this: ControlFormat) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: ControlFormat) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: ControlFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: ControlFormat) AddItem* (Text: ARRAY OF CHAR; (* optional *) Index: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.StrVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, NIL);
    END AddItem;

    PROCEDURE (this: ControlFormat) RemoveAllItems* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 853, NIL);
    END RemoveAllItems;

    PROCEDURE (this: ControlFormat) RemoveItem* (Index: INTEGER; (* optional *) Count: CtlT.Any), NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant;
    BEGIN
        CtlC.IntVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, NIL);
    END RemoveItem;

    PROCEDURE (this: ControlFormat) DropDownLines* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 848)
    END DropDownLines;

    PROCEDURE (this: ControlFormat) PUTDropDownLines* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 848, p1)
    END PUTDropDownLines;

    PROCEDURE (this: ControlFormat) Enabled* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 600)
    END Enabled;

    PROCEDURE (this: ControlFormat) PUTEnabled* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 600, p1)
    END PUTEnabled;

    PROCEDURE (this: ControlFormat) LargeChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 845)
    END LargeChange;

    PROCEDURE (this: ControlFormat) PUTLargeChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 845, p1)
    END PUTLargeChange;

    PROCEDURE (this: ControlFormat) LinkedCell* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ControlFormat) PUTLinkedCell* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 1058, p1)
    END PUTLinkedCell;

    PROCEDURE (this: ControlFormat) List* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 861, arg, ret);
        RETURN CtlC.VarAny(ret)
    END List;

    PROCEDURE (this: ControlFormat) ListCount* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 849)
    END ListCount;

    PROCEDURE (this: ControlFormat) PUTListCount* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 849, p1)
    END PUTListCount;

    PROCEDURE (this: ControlFormat) ListFillRange* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 847)
    END ListFillRange;

    PROCEDURE (this: ControlFormat) PUTListFillRange* (p1: ARRAY OF CHAR), NEW;
    BEGIN
        CtlC.PutStr(this, 847, p1)
    END PUTListFillRange;

    PROCEDURE (this: ControlFormat) ListIndex* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 850)
    END ListIndex;

    PROCEDURE (this: ControlFormat) PUTListIndex* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 850, p1)
    END PUTListIndex;

    PROCEDURE (this: ControlFormat) LockedText* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 616)
    END LockedText;

    PROCEDURE (this: ControlFormat) PUTLockedText* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 616, p1)
    END PUTLockedText;

    PROCEDURE (this: ControlFormat) Max* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 842)
    END Max;

    PROCEDURE (this: ControlFormat) PUTMax* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 842, p1)
    END PUTMax;

    PROCEDURE (this: ControlFormat) Min* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 843)
    END Min;

    PROCEDURE (this: ControlFormat) PUTMin* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 843, p1)
    END PUTMin;

    PROCEDURE (this: ControlFormat) MultiSelect* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 32)
    END MultiSelect;

    PROCEDURE (this: ControlFormat) PUTMultiSelect* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 32, p1)
    END PUTMultiSelect;

    PROCEDURE (this: ControlFormat) PrintObject* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 618)
    END PrintObject;

    PROCEDURE (this: ControlFormat) PUTPrintObject* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 618, p1)
    END PUTPrintObject;

    PROCEDURE (this: ControlFormat) SmallChange* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 844)
    END SmallChange;

    PROCEDURE (this: ControlFormat) PUTSmallChange* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 844, p1)
    END PUTSmallChange;

    PROCEDURE (this: ControlFormat) _Default* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 0)
    END _Default;

    PROCEDURE (this: ControlFormat) PUT_Default* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 0, p1)
    END PUT_Default;

    PROCEDURE (this: ControlFormat) Value* (): INTEGER, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 6)
    END Value;

    PROCEDURE (this: ControlFormat) PUTValue* (p1: INTEGER), NEW;
    BEGIN
        CtlC.PutInt(this, 6, p1)
    END PUTValue;


    (* ---------- OLEFormat ---------- *)

    PROCEDURE (this: OLEFormat) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: OLEFormat) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: OLEFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: OLEFormat) Activate* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 304, NIL);
    END Activate;

    PROCEDURE (this: OLEFormat) Object* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 1049)
    END Object;

    PROCEDURE (this: OLEFormat) ProgId* (): CtlT.Strg, NEW;
    BEGIN
        RETURN CtlC.GetStr(this, 1523)
    END ProgId;

    PROCEDURE (this: OLEFormat) Verb* ((* optional *) Verb: CtlT.Any), NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Verb, arg[0]);
        CtlC.CallParMethod(this, 606, arg, NIL);
    END Verb;


    (* ---------- LinkFormat ---------- *)

    PROCEDURE (this: LinkFormat) Application* (): Application, NEW;
    BEGIN
        RETURN This_Application(CtlC.GetAny(this, 148))
    END Application;

    PROCEDURE (this: LinkFormat) Creator* (): XlCreator, NEW;
    BEGIN
        RETURN CtlC.GetInt(this, 149)
    END Creator;

    PROCEDURE (this: LinkFormat) Parent* (): CtlT.Object, NEW;
    BEGIN
        RETURN CtlC.GetObj(this, 150)
    END Parent;

    PROCEDURE (this: LinkFormat) AutoUpdate* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 1048)
    END AutoUpdate;

    PROCEDURE (this: LinkFormat) PUTAutoUpdate* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 1048, p1)
    END PUTAutoUpdate;

    PROCEDURE (this: LinkFormat) Locked* (): BOOLEAN, NEW;
    BEGIN
        RETURN CtlC.GetBool(this, 269)
    END Locked;

    PROCEDURE (this: LinkFormat) PUTLocked* (p1: BOOLEAN), NEW;
    BEGIN
        CtlC.PutBool(this, 269, p1)
    END PUTLocked;

    PROCEDURE (this: LinkFormat) Update* (), NEW;
    BEGIN
        CtlC.CallMethod(this, 680, NIL);
    END Update;


    PROCEDURE NewQueryTable* (): _QueryTable;
    BEGIN
        RETURN This_QueryTable(CtlC.NewObj("{59191DA1-EA47-11CE-A51F-00AA0061507F}"))
    END NewQueryTable;

    PROCEDURE NewApplication* (): _Application;
    BEGIN
        RETURN This_Application(CtlC.NewObj("{00024500-0000-0000-C000-000000000046}"))
    END NewApplication;

    PROCEDURE NewChart* (): _Chart;
    BEGIN
        RETURN This_Chart(CtlC.NewObj("{00020821-0000-0000-C000-000000000046}"))
    END NewChart;

    PROCEDURE NewWorksheet* (): _Worksheet;
    BEGIN
        RETURN This_Worksheet(CtlC.NewObj("{00020820-0000-0000-C000-000000000046}"))
    END NewWorksheet;

    PROCEDURE NewGlobal* (): _Global;
    BEGIN
        RETURN This_Global(CtlC.NewObj("{00020812-0000-0000-C000-000000000046}"))
    END NewGlobal;

    PROCEDURE NewWorkbook* (): _Workbook;
    BEGIN
        RETURN This_Workbook(CtlC.NewObj("{00020819-0000-0000-C000-000000000046}"))
    END NewWorkbook;

    PROCEDURE NewOLEObject* (): _OLEObject;
    BEGIN
        RETURN This_OLEObject(CtlC.NewObj("{00020818-0000-0000-C000-000000000046}"))
    END NewOLEObject;

    PROCEDURE NewChartWB* (): _Workbook;
    BEGIN
        RETURN This_Workbook(CtlC.NewObj("{00020821-0000-0000-C000-000000000046}"))
    END NewChartWB;

    PROCEDURE NewWorksheetWB* (): _Workbook;
    BEGIN
        RETURN This_Workbook(CtlC.NewObj("{00020820-0000-0000-C000-000000000046}"))
    END NewWorksheetWB;

END CtlExcel8.
