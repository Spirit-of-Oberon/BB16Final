MODULE CtlExcel5;
(**
    project    = "BlackBox"
    organization    = "www.oberon.ch"
    contributors    = "Oberon microsystems"
    version    = "System/Rsrc/About"
    copyright    = "System/Rsrc/About"
    license    = "Docu/BB-License"
    changes    = ""
    issues    = ""

**)

    (* Microsoft Excel 5.0 Object Library, help: E:\MsOffice\Office\VBA_XL.HLP, id: 65535 *)
    (* guid: {00020813-0000-0000-C000-000000000046}, lcid: 9, syskind: win32, version: 1.0 *)

    IMPORT CtlT, CtlC;

    CONST
        (* Constants *)
            xlDialogSetBackgroundPicture* = 492;
            xlDialogAutoCorrect* = 485;
            xlDialogFileSharing* = 481;
            xlDialogVbaMakeAddin* = 478;
            xlDialogActiveCellFont* = 476;
            xlDialogFindFile* = 475;
            xlDialogProperties* = 474;
            xlDialogSummaryInfo* = 474;
            xlDialogScenarioMerge* = 473;
            xlDialogStandardWidth* = 472;
            xlDialogMailEditMailer* = 470;
            xlDialogSeriesOrder* = 466;
            xlDialogFormatChart* = 465;
            xlDialogErrorbarY* = 464;
            xlDialogErrorbarX* = 463;
            xlDialogSeriesY* = 462;
            xlDialogSeriesX* = 461;
            xlDialogSeriesAxes* = 460;
            xlDialogOptionsListsAdd* = 458;
            xlDialogSaveCopyAs* = 456;
            xlDialogFunctionWizard* = 450;
            xlDialogFilter* = 447;
            xlDialogPushbuttonProperties* = 445;
            xlDialogOpenText* = 441;
            xlDialogEditboxProperties* = 438;
            xlDialogListboxProperties* = 437;
            xlDialogLabelProperties* = 436;
            xlDialogCheckboxProperties* = 435;
            xlDialogPivotFieldUngroup* = 434;
            xlDialogPivotFieldGroup* = 433;
            xlDialogFormatCharttype* = 423;
            xlDialogTextToColumns* = 422;
            xlDialogPivotShowPages* = 421;
            xlDialogScrollbarProperties* = 420;
            xlDialogWorkbookProtect* = 417;
            xlDialogWorkbookTabSplit* = 415;
            xlDialogSubtotalCreate* = 398;
            xlDialogTabOrder* = 394;
            xlDialogChartAddData* = 392;
            xlDialogAddChartAutoformat* = 390;
            xlDialogGalleryCustom* = 388;
            xlDialogWorkbookName* = 386;
            xlDialogWorkbookUnhide* = 384;
            xlDialogMacroOptions* = 382;
            xlDialogFontProperties* = 381;
            xlDialogInsertTitle* = 380;
            xlDialogDataLabel* = 379;
            xlDialogMailNextLetter* = 378;
            xlDialogFilterAdvanced* = 370;
            xlDialogOptionsGeneral* = 356;
            xlDialogOptionsTransition* = 355;
            xlDialogWorkbookInsert* = 354;
            xlDialogChartTrend* = 350;
            xlDialogGalleryDoughnut* = 344;
            xlDialogInsertPicture* = 342;
            xlDialogMailLogon* = 339;
            xlDialogRoutingSlip* = 336;
            xlDialogVbaProcedureDefinition* = 330;
            xlDialogVbaInsertFile* = 328;
            xlDialogOptionsChart* = 325;
            xlDialogAttachToolbars* = 323;
            xlDialogMenuEditor* = 322;
            xlDialogAddinManager* = 321;
            xlDialogOptionsView* = 320;
            xlDialogOptionsEdit* = 319;
            xlDialogOptionsCalculation* = 318;
            xlDialogPivotFieldProperties* = 313;
            xlDialogPivotTableWizard* = 312;
            xlDialogScenarioSummary* = 311;
            xlDialogScenarioEdit* = 308;
            xlDialogScenarioAdd* = 307;
            xlDialogScenarioCells* = 305;
            xlDialogWorkbookNew* = 302;
            xlDialogFillWorkgroup* = 301;
            xlDialogPlacement* = 300;
            xlDialogAssignToTool* = 293;
            xlDialogChartWizard* = 288;
            xlDialogSaveWorkspace* = 285;
            xlDialogWorkbookOptions* = 284;
            xlDialogWorkbookCopy* = 283;
            xlDialogWorkbookMove* = 282;
            xlDialogWorkbookAdd* = 281;
            xlDialogCustomizeToolbar* = 276;
            xlDialogGallery3dSurface* = 273;
            xlDialogGallery3dBar* = 272;
            xlDialogFormatAuto* = 269;
            xlDialogMove* = 262;
            xlDialogSize* = 261;
            xlDialogInsertObject* = 259;
            xlDialogZoom* = 256;
            xlDialogEditionOptions* = 251;
            xlDialogGalleryRadar* = 249;
            xlDialogDefineStyle* = 229;
            xlDialogEditSeries* = 228;
            xlDialogFormatOverlay* = 226;
            xlDialogFormatMain* = 225;
            xlDialogEditColor* = 223;
            xlDialogPrintPreview* = 222;
            xlDialogShowToolbar* = 220;
            xlDialogSubscribeTo* = 218;
            xlDialogCreatePublisher* = 217;
            xlDialogObjectProtection* = 214;
            xlDialogAssignToObject* = 213;
            xlDialogApplyStyle* = 212;
            xlDialogSaveNewObject* = 208;
            xlDialogObjectProperties* = 207;
            xlDialogShowDetail* = 204;
            xlDialogDemote* = 203;
            xlDialogPromote* = 202;
            xlDialogUpdateLink* = 201;
            xlDialogFillGroup* = 200;
            xlDialogWorkgroup* = 199;
            xlDialogGoalSeek* = 198;
            xlDialogView3d* = 197;
            xlDialogGallery3dPie* = 196;
            xlDialogGallery3dLine* = 195;
            xlDialogGallery3dColumn* = 194;
            xlDialogGallery3dArea* = 193;
            xlDialogSortSpecial* = 192;
            xlDialogConsolidate* = 191;
            xlDialogStandardFont* = 190;
            xlDialogSendMail* = 189;
            xlDialogOpenMail* = 188;
            xlDialogOverlayChartType* = 186;
            xlDialogMainChartType* = 185;
            xlDialogAppSize* = 171;
            xlDialogAppMove* = 170;
            xlDialogChangeLink* = 166;
            xlDialogColorPalette* = 161;
            xlDialogSetUpdateStatus* = 159;
            xlDialogNote* = 154;
            xlDialogFormatFont* = 150;
            xlDialogCopyChart* = 147;
            xlDialogSaveWorkbook* = 145;
            xlDialogOutline* = 142;
            xlDialogSplit* = 137;
            xlDialogReplaceFont* = 134;
            xlDialogApplyNames* = 133;
            xlDialogSelectSpecial* = 132;
            xlDialogFormulaReplace* = 130;
            xlDialogFormatSize* = 129;
            xlDialogFormatMove* = 128;
            xlDialogRowHeight* = 127;
            xlDialogNew* = 119;
            xlDialogDeleteFormat* = 111;
            xlDialogDeleteName* = 110;
            xlDialogCopyPicture* = 108;
            xlDialogActivate* = 103;
            xlDialogWorkspace* = 95;
            xlDialogUnhide* = 94;
            xlDialogParse* = 91;
            xlDialogFormatText* = 89;
            xlDialogFormatLegend* = 88;
            xlDialogScale* = 87;
            xlDialogOverlay* = 86;
            xlDialogMainChart* = 85;
            xlDialogPatterns* = 84;
            xlDialogAttachText* = 80;
            xlDialogAxes* = 78;
            xlDialogGridlines* = 76;
            xlDialogCombination* = 73;
            xlDialogGalleryScatter* = 72;
            xlDialogGalleryPie* = 71;
            xlDialogGalleryLine* = 70;
            xlDialogGalleryColumn* = 69;
            xlDialogGalleryBar* = 68;
            xlDialogGalleryArea* = 67;
            xlDialogFormulaFind* = 64;
            xlDialogFormulaGoto* = 63;
            xlDialogCreateNames* = 62;
            xlDialogDefineName* = 61;
            xlDialogInsert* = 55;
            xlDialogEditDelete* = 54;
            xlDialogPasteSpecial* = 53;
            xlDialogClear* = 52;
            xlDialogColumnWidth* = 47;
            xlDialogCellProtection* = 46;
            xlDialogBorder* = 45;
            xlDialogStyle* = 44;
            xlDialogAlignment* = 43;
            xlDialogFormatNumber* = 42;
            xlDialogTable* = 41;
            xlDialogDataSeries* = 40;
            xlDialogSort* = 39;
            xlDialogDataDelete* = 36;
            xlDialogExtract* = 35;
            xlDialogCalculation* = 32;
            xlDialogProtectDocument* = 28;
            xlDialogDisplay* = 27;
            xlDialogFont* = 26;
            xlDialogSetPrintTitles* = 23;
            xlDialogRun* = 17;
            xlDialogWindowMove* = 14;
            xlDialogWindowSize* = 13;
            xlDialogArrangeAll* = 12;
            xlDialogPrinterSetup* = 9;
            xlDialogPrint* = 8;
            xlDialogPageSetup* = 7;
            xlDialogFileDelete* = 6;
            xlDialogSaveAs* = 5;
            xlDialogOpenLinks* = 2;
            xlDialogOpen* = 1;
            xlZero* = 2;
            xlYes* = 1;
            xlYearCode* = 19;
            xlYear* = 4;
            xlY* = 1;
            xlXYScatter* = -4169;
            xlX* = -4168;
            xlWQ1* = 34;
            xlWPG* = 3;
            xlWorksheetShort* = 5;
            xlWorksheetCell* = 3;
            xlWorksheet4* = 1;
            xlWorksheet* = -4167;
            xlWorks2FarEast* = 28;
            xlWorkbookTab* = 6;
            xlWorkbook* = 1;
            xlWMF* = 2;
            xlWKS* = 4;
            xlWK3FM3* = 32;
            xlWK3* = 15;
            xlWK1FMT* = 30;
            xlWK1ALL* = 31;
            xlWK1* = 5;
            xlWJ2WD1* = 14;
            xlWindows* = 2;
            xlWide* = 3;
            xlWhole* = 1;
            xlWeekdayNameChars* = 31;
            xlWeekday* = 2;
            xlWatchPane* = 11;
            xlWait* = 2;
            xlVisible* = 12;
            xlVeryHidden* = 2;
            xlVertical* = -4166;
            xlVarP* = -4165;
            xlVar* = -4164;
            xlValues* = -4163;
            xlValue* = 2;
            xlVALU* = 8;
            xlUserResolution* = 1;
            xlUpward* = -4171;
            xlUpperCaseRowLetter* = 6;
            xlUpperCaseColumnLetter* = 7;
            xlUpdateSubscriber* = 2;
            xlUpdateState* = 1;
            xlUp* = -4162;
            xlTriangle* = 3;
            xlTransparent* = 2;
            xlToRight* = -4161;
            xlTopToBottom* = 1;
            xlTop10Percent* = 5;
            xlTop10Items* = 3;
            xlTop* = -4160;
            xlToolbarButton* = 2;
            xlToolbar* = 1;
            xlToLeft* = -4159;
            xlTitleBar* = 8;
            xlTimeSeparator* = 18;
            xlTimeLeadingZero* = 45;
            xlTiled* = 1;
            xlTIF* = 9;
            xlThousandsSeparator* = 4;
            xlThin* = 2;
            xlThick* = 4;
            xlTextWindows* = 20;
            xlTextValues* = 2;
            xlTextPrinter* = 36;
            xlTextMSDOS* = 21;
            xlTextMac* = 19;
            xlTextBox* = 16;
            xlText* = -4158;
            xlTemplate* = 17;
            xlTableBody* = 8;
            xlSyllabary* = 1;
            xlSYLK* = 2;
            xlSum* = -4157;
            xlSubtract* = 3;
            xlSubscribers* = 6;
            xlSubscriber* = 2;
            xlStrict* = 2;
            xlStretch* = 1;
            xlStError* = 4;
            xlStDevP* = -4156;
            xlStDev* = -4155;
            xlStar* = 5;
            xlStandardSummary* = 1;
            xlStack* = 2;
            xlSquare* = 1;
            xlSortValues* = 1;
            xlSortLabels* = 2;
            xlSolid* = 1;
            xlSingleQuote* = 2;
            xlSingleAccounting* = 4;
            xlSingle* = 2;
            xlSimple* = -4154;
            xlShowValue* = 2;
            xlShowPercent* = 3;
            xlShowLabelAndPercent* = 5;
            xlShowLabel* = 4;
            xlShort* = 1;
            xlShared* = 2;
            xlSeries* = 3;
            xlSendPublisher* = 2;
            xlSemiGray75* = 10;
            xlSemiautomatic* = 2;
            xlSelect* = 3;
            xlSecondCode* = 24;
            xlSecondary* = 2;
            xlScreenSize* = 1;
            xlScreen* = 1;
            xlScale* = 3;
            xlRunningTotal* = 5;
            xlRTF* = 4;
            xlRowThenColumn* = 1;
            xlRowSeparator* = 15;
            xlRows* = 1;
            xlRowItem* = 4;
            xlRowHeader* = -4153;
            xlRowField* = 1;
            xlRoutingInProgress* = 1;
            xlRoutingComplete* = 2;
            xlRightBracket* = 11;
            xlRightBrace* = 13;
            xlRight* = -4152;
            xlRelRowAbsColumn* = 3;
            xlRelative* = 4;
            xlReference* = 4;
            xlReadWrite* = 2;
            xlReadOnly* = 3;
            xlRadar* = -4151;
            xlR1C1* = -4150;
            xlPublishers* = 5;
            xlPublisher* = 1;
            xlProduct* = -4149;
            xlPrinter* = 2;
            xlPrimary* = 1;
            xlPrevious* = 2;
            xlPowerTalk* = 2;
            xlPower* = 4;
            xlPortrait* = 1;
            xlPolynomial* = 3;
            xlPlusValues* = 2;
            xlPlus* = 9;
            xlPLT* = 12;
            xlPlotArea* = 19;
            xlPlaceholders* = 2;
            xlPivotTable* = -4148;
            xlPie* = 5;
            xlPicture* = -4147;
            xlPICT* = 1;
            xlPIC* = 11;
            xlPercentOfTotal* = 8;
            xlPercentOfRow* = 6;
            xlPercentOfColumn* = 7;
            xlPercentOf* = 3;
            xlPercentDifferenceFrom* = 4;
            xlPercent* = 2;
            xlPCX* = 10;
            xlPCT* = 13;
            xlPart* = 2;
            xlPaperUser* = 256;
            xlPaperTabloid* = 3;
            xlPaperStatement* = 6;
            xlPaperQuarto* = 15;
            xlPaperNote* = 18;
            xlPaperLetterSmall* = 2;
            xlPaperLetter* = 1;
            xlPaperLegal* = 5;
            xlPaperLedger* = 4;
            xlPaperFolio* = 14;
            xlPaperFanfoldUS* = 39;
            xlPaperFanfoldStdGerman* = 40;
            xlPaperFanfoldLegalGerman* = 41;
            xlPaperExecutive* = 7;
            xlPaperEsheet* = 26;
            xlPaperEnvelopePersonal* = 38;
            xlPaperEnvelopeMonarch* = 37;
            xlPaperEnvelopeItaly* = 36;
            xlPaperEnvelopeDL* = 27;
            xlPaperEnvelopeC65* = 32;
            xlPaperEnvelopeC6* = 31;
            xlPaperEnvelopeC5* = 28;
            xlPaperEnvelopeC4* = 30;
            xlPaperEnvelopeC3* = 29;
            xlPaperEnvelopeB6* = 35;
            xlPaperEnvelopeB5* = 34;
            xlPaperEnvelopeB4* = 33;
            xlPaperEnvelope9* = 19;
            xlPaperEnvelope14* = 23;
            xlPaperEnvelope12* = 22;
            xlPaperEnvelope11* = 21;
            xlPaperEnvelope10* = 20;
            xlPaperDsheet* = 25;
            xlPaperCsheet* = 24;
            xlPaperB5* = 13;
            xlPaperB4* = 12;
            xlPaperA5* = 11;
            xlPaperA4Small* = 10;
            xlPaperA4* = 9;
            xlPaperA3* = 8;
            xlPaper11x17* = 17;
            xlPaper10x14* = 16;
            xlPageItem* = 6;
            xlPageHeader* = 2;
            xlPageField* = 3;
            xlOverThenDown* = 2;
            xlOutside* = 3;
            xlOtherSessionChanges* = 3;
            xlOr* = 2;
            xlOpenSource* = 3;
            xlOpen* = 2;
            xlOpaque* = 3;
            xlOneAfterAnother* = 1;
            xlOn* = 1;
            xlOLELinks* = 2;
            xlOLELink* = 0;
            xlOLEEmbed* = 1;
            xlOff* = -4146;
            xlNumbers* = 1;
            xlNumber* = -4145;
            xlNotYetRouted* = 0;
            xlNotPlotted* = 1;
            xlNotes* = -4144;
            xlNoShapeChanges* = 2;
            xlNorthwestArrow* = 1;
            xlNormal* = -4143;
            xlNonEnglishFunctions* = 34;
            xlNone* = -4142;
            xlNoncurrencyDigits* = 29;
            xlNoMailSystem* = 0;
            xlNoDocuments* = 3;
            xlNoDockingChanges* = 3;
            xlNoChanges* = 4;
            xlNoChange* = 1;
            xlNoCap* = 2;
            xlNoButtonChanges* = 1;
            xlNo* = 2;
            xlNextToAxis* = 4;
            xlNext* = 1;
            xlNarrow* = 1;
            xlMultiply* = 4;
            xlMSDOS* = 3;
            xlMovingAvg* = 6;
            xlMoveAndSize* = 1;
            xlMove* = 2;
            xlMonthNameChars* = 30;
            xlMonthLeadingZero* = 41;
            xlMonthCode* = 20;
            xlMonth* = 3;
            xlModule* = -4141;
            xlMixed* = 2;
            xlMinuteCode* = 23;
            xlMinusValues* = 3;
            xlMinimum* = 2;
            xlMinimized* = -4140;
            xlMin* = -4139;
            xlMicrosoftWord* = 1;
            xlMicrosoftSchedulePlus* = 7;
            xlMicrosoftProject* = 6;
            xlMicrosoftPowerPoint* = 2;
            xlMicrosoftMail* = 3;
            xlMicrosoftFoxPro* = 5;
            xlMicrosoftAccess* = 4;
            xlMetric* = 35;
            xlMedium* = -4138;
            xlMDY* = 44;
            xlMaximum* = 2;
            xlMaximized* = -4137;
            xlMax* = -4136;
            xlMAPI* = 1;
            xlManualUpdate* = 5;
            xlManual* = -4135;
            xlMacrosheetCell* = 7;
            xlMacintosh* = 1;
            xlLowerCaseRowLetter* = 8;
            xlLowerCaseColumnLetter* = 9;
            xlLow* = -4134;
            xlLotusHelp* = 2;
            xlLong* = 3;
            xlLogical* = 4;
            xlLogarithmic* = -4133;
            xlLocalSessionChanges* = 2;
            xlLocalFormat2* = 16;
            xlLocalFormat1* = 15;
            xlListSeparator* = 5;
            xlList3* = 12;
            xlList2* = 11;
            xlList1* = 10;
            xlLinearTrend* = 9;
            xlLinear* = -4132;
            xlLine* = 4;
            xlLightVertical* = 12;
            xlLightUp* = 14;
            xlLightHorizontal* = 11;
            xlLightDown* = 13;
            xlLegend* = 24;
            xlLeftToRight* = 2;
            xlLeftBracket* = 10;
            xlLeftBrace* = 12;
            xlLeft* = -4131;
            xlLastCell* = 11;
            xlLast* = 1;
            xlLandscape* = 2;
            xlJustify* = -4130;
            xlIntlMacro* = 25;
            xlIntlAddIn* = 26;
            xlInterrupt* = 1;
            xlInterpolated* = 3;
            xlInteger* = 2;
            xlInside* = 2;
            xlInfo* = -4129;
            xlIndex* = 9;
            xlImmediatePane* = 12;
            xlIcons* = 1;
            xlIBeam* = 3;
            xlHourCode* = 22;
            xlHorizontal* = -4128;
            xlHigh* = -4127;
            xlHide* = 3;
            xlHidden* = 0;
            xlHGL* = 6;
            xlHairline* = 1;
            xlGuess* = 0;
            xlGrowthTrend* = 10;
            xlGrowth* = 2;
            xlGridline* = 22;
            xlGrid* = 15;
            xlGray8* = 18;
            xlGray75* = -4126;
            xlGray50* = -4125;
            xlGray25* = -4124;
            xlGray16* = 17;
            xlGeneralFormatName* = 26;
            xlGeneral* = 1;
            xlFunction* = 1;
            xlFullPage* = 3;
            xlFreeFloating* = 3;
            xlFormulas* = -4123;
            xlFormula* = 5;
            xlFormats* = -4122;
            xlFloor* = 23;
            xlFloating* = 5;
            xlFixedWidth* = 2;
            xlFixedValue* = 1;
            xlFitToPage* = 2;
            xlFirst* = 0;
            xlFilterInPlace* = 1;
            xlFilterCopy* = 2;
            xlFillYears* = 8;
            xlFillWeekdays* = 6;
            xlFillValues* = 4;
            xlFillSeries* = 2;
            xlFillMonths* = 7;
            xlFillFormats* = 3;
            xlFillDefault* = 0;
            xlFillDays* = 5;
            xlFillCopy* = 1;
            xlFill* = 5;
            xlExternal* = 2;
            xlExtended* = 3;
            xlExponential* = 5;
            xlExclusive* = 3;
            xlExcelMenus* = 1;
            xlExcelLinks* = 1;
            xlExcel4Workbook* = 35;
            xlExcel4MacroSheet* = 3;
            xlExcel4IntlMacroSheet* = 4;
            xlExcel4* = 33;
            xlExcel3* = 29;
            xlExcel2FarEast* = 27;
            xlExcel2* = 16;
            xlErrValue* = 2015;
            xlErrRef* = 2023;
            xlErrors* = 16;
            xlErrorHandler* = 2;
            xlErrNum* = 2036;
            xlErrNull* = 2000;
            xlErrName* = 2029;
            xlErrNA* = 2042;
            xlErrDiv0* = 2007;
            xlEPS* = 8;
            xlEntireChart* = 20;
            xlEditionDate* = 2;
            xlDXF* = 5;
            xlDRW* = 4;
            xlDrawingObject* = 14;
            xlDownward* = -4170;
            xlDownThenOver* = 1;
            xlDown* = -4121;
            xlDoughnut* = -4120;
            xlDoubleQuote* = 1;
            xlDoubleOpen* = 4;
            xlDoubleClosed* = 5;
            xlDoubleAccounting* = 5;
            xlDouble* = -4119;
            xlDot* = -4118;
            xlDivide* = 5;
            xlDistributed* = -4117;
            xlDisabled* = 0;
            xlDirect* = 1;
            xlDifferenceFrom* = 2;
            xlDIF* = 9;
            xlDiamond* = 2;
            xlDialogSheet* = -4116;
            xlDesktop* = 9;
            xlDescending* = 2;
            xlDelimited* = 1;
            xlDefaultAutoFormat* = -1;
            xlDecimalSeparator* = 3;
            xlDebugCodePane* = 13;
            xlDBF4* = 11;
            xlDBF3* = 8;
            xlDBF2* = 7;
            xlDayLeadingZero* = 42;
            xlDayCode* = 21;
            xlDay* = 1;
            xlDateSeparator* = 17;
            xlDateOrder* = 32;
            xlDate* = 2;
            xlDataItem* = 7;
            xlDataHeader* = 3;
            xlDataField* = 4;
            xlDatabase* = 1;
            xlDashDotDot* = 5;
            xlDashDot* = 4;
            xlDash* = -4115;
            xlCut* = 2;
            xlCustom* = -4114;
            xlCurrencyTrailingZeros* = 39;
            xlCurrencySpaceBefore* = 36;
            xlCurrencyNegative* = 28;
            xlCurrencyMinusSign* = 38;
            xlCurrencyLeadingZeros* = 40;
            xlCurrencyDigits* = 27;
            xlCurrencyCode* = 25;
            xlCurrencyBefore* = 37;
            xlCSVWindows* = 23;
            xlCSVMSDOS* = 24;
            xlCSVMac* = 22;
            xlCSV* = 6;
            xlCross* = 4;
            xlCrissCross* = 16;
            xlCountrySetting* = 2;
            xlCountryCode* = 1;
            xlCountNums* = -4113;
            xlCount* = -4112;
            xlCorner* = 2;
            xlCopy* = 1;
            xlContinuous* = 1;
            xlContents* = 2;
            xlConstants* = 2;
            xlConsolidation* = 3;
            xlCommand* = 2;
            xlCombination* = -4111;
            xlColumnThenRow* = 2;
            xlColumnSeparator* = 14;
            xlColumns* = 2;
            xlColumnItem* = 5;
            xlColumnHeader* = -4110;
            xlColumnField* = 2;
            xlColumn* = 3;
            xlColor3* = 9;
            xlColor2* = 8;
            xlColor1* = 7;
            xlCodePage* = 2;
            xlClosed* = 3;
            xlClipboardFormatWK1* = 10;
            xlClipboardFormatVALU* = 1;
            xlClipboardFormatToolFacePICT* = 26;
            xlClipboardFormatToolFace* = 25;
            xlClipboardFormatText* = 0;
            xlClipboardFormatTable* = 16;
            xlClipboardFormatSYLK* = 6;
            xlClipboardFormatStandardScale* = 27;
            xlClipboardFormatStandardFont* = 28;
            xlClipboardFormatScreenPICT* = 29;
            xlClipboardFormatRTF* = 7;
            xlClipboardFormatPrintPICT* = 3;
            xlClipboardFormatPICT* = 2;
            xlClipboardFormatOwnerLink* = 17;
            xlClipboardFormatObjectLink* = 19;
            xlClipboardFormatObjectDesc* = 31;
            xlClipboardFormatNative* = 14;
            xlClipboardFormatMovie* = 24;
            xlClipboardFormatLinkSourceDesc* = 32;
            xlClipboardFormatLinkSource* = 23;
            xlClipboardFormatLink* = 11;
            xlClipboardFormatEmbedSource* = 22;
            xlClipboardFormatEmbeddedObject* = 21;
            xlClipboardFormatDspText* = 12;
            xlClipboardFormatDIF* = 4;
            xlClipboardFormatCSV* = 5;
            xlClipboardFormatCGM* = 13;
            xlClipboardFormatBitmap* = 9;
            xlClipboardFormatBinary* = 15;
            xlClipboardFormatBIFF4* = 30;
            xlClipboardFormatBIFF3* = 20;
            xlClipboardFormatBIFF2* = 18;
            xlClipboardFormatBIFF* = 8;
            xlClipboard* = 3;
            xlClassic3* = 3;
            xlClassic2* = 2;
            xlClassic1* = 1;
            xlCircle* = 8;
            xlChronological* = 3;
            xlChecker* = 9;
            xlChartTitles* = 18;
            xlChartShort* = 6;
            xlChartSeries* = 17;
            xlChartInPlace* = 4;
            xlChartAsWindow* = 5;
            xlChart4* = 2;
            xlChart* = -4109;
            xlChangeAttributes* = 6;
            xlCGM* = 7;
            xlCenterAcrossSelection* = 7;
            xlCenter* = -4108;
            xlCategory* = 1;
            xlCascade* = 7;
            xlCap* = 1;
            xlCancel* = 1;
            xlByRows* = 1;
            xlByColumns* = 2;
            xlButton* = 15;
            xlBuiltIn* = 0;
            xlBottom10Percent* = 6;
            xlBottom10Items* = 4;
            xlBottom* = -4107;
            xlBoth* = 1;
            xlBMP* = 1;
            xlBlanks* = 4;
            xlBitmap* = 2;
            xlBIFF* = 2;
            xlBelow* = 1;
            xlBar* = 2;
            xlAxis* = 21;
            xlAverage* = -4106;
            xlAutoOpen* = 1;
            xlAutomaticUpdate* = 4;
            xlAutomatic* = -4105;
            xlAutoFill* = 4;
            xlAutoDeactivate* = 4;
            xlAutoClose* = 2;
            xlAutoActivate* = 3;
            xlAscending* = 1;
            xlArea* = 1;
            xlAnd* = 1;
            xlAlternateArraySeparator* = 16;
            xlAllExceptBorders* = 6;
            xlAllAtOnce* = 2;
            xlAll* = -4104;
            xlAddIn* = 18;
            xlAdd* = 2;
            xlAccounting4* = 17;
            xlAccounting3* = 6;
            xlAccounting2* = 5;
            xlAccounting1* = 4;
            xlAbsRowRelColumn* = 2;
            xlAbsolute* = 1;
            xlAbove* = 0;
            xlA1* = 1;
            xl4DigitYears* = 43;
            xl3DSurface* = -4103;
            xl3DPie* = -4102;
            xl3DLine* = -4101;
            xl3DEffects2* = 14;
            xl3DEffects1* = 13;
            xl3DColumn* = -4100;
            xl3DBar* = -4099;
            xl3DArea* = -4098;
            xl24HourClock* = 33;


    TYPE
        Constants* = INTEGER;
        _Global* = POINTER TO RECORD (CtlT.Object) END;
        Application* = POINTER TO RECORD (CtlT.Object) END;
        Style* = POINTER TO RECORD (CtlT.Object) END;
        Styles* = POINTER TO RECORD (CtlT.Object) END;
        Toolbar* = POINTER TO RECORD (CtlT.Object) END;
        Toolbars* = POINTER TO RECORD (CtlT.Object) END;
        ToolbarButton* = POINTER TO RECORD (CtlT.Object) END;
        ToolbarButtons* = POINTER TO RECORD (CtlT.Object) END;
        AddIn* = POINTER TO RECORD (CtlT.Object) END;
        AddIns* = POINTER TO RECORD (CtlT.Object) END;
        Areas* = POINTER TO RECORD (CtlT.Object) END;
        Range* = POINTER TO RECORD (CtlT.Object) END;
        Workbook* = POINTER TO RECORD (CtlT.Object) END;
        Workbooks* = POINTER TO RECORD (CtlT.Object) END;
        Sheets* = POINTER TO RECORD (CtlT.Object) END;
        Worksheet* = POINTER TO RECORD (CtlT.Object) END;
        Worksheets* = POINTER TO RECORD (CtlT.Object) END;
        PivotTable* = POINTER TO RECORD (CtlT.Object) END;
        PivotTables* = POINTER TO RECORD (CtlT.Object) END;
        PivotField* = POINTER TO RECORD (CtlT.Object) END;
        PivotFields* = POINTER TO RECORD (CtlT.Object) END;
        PivotItem* = POINTER TO RECORD (CtlT.Object) END;
        PivotItems* = POINTER TO RECORD (CtlT.Object) END;
        Scenario* = POINTER TO RECORD (CtlT.Object) END;
        Scenarios* = POINTER TO RECORD (CtlT.Object) END;
        MenuBar* = POINTER TO RECORD (CtlT.Object) END;
        MenuBars* = POINTER TO RECORD (CtlT.Object) END;
        Menu* = POINTER TO RECORD (CtlT.Object) END;
        Menus* = POINTER TO RECORD (CtlT.Object) END;
        MenuItem* = POINTER TO RECORD (CtlT.Object) END;
        MenuItems* = POINTER TO RECORD (CtlT.Object) END;
        Window* = POINTER TO RECORD (CtlT.Object) END;
        Windows* = POINTER TO RECORD (CtlT.Object) END;
        Pane* = POINTER TO RECORD (CtlT.Object) END;
        Panes* = POINTER TO RECORD (CtlT.Object) END;
        Name* = POINTER TO RECORD (CtlT.Object) END;
        Names* = POINTER TO RECORD (CtlT.Object) END;
        DrawingObjects* = POINTER TO RECORD (CtlT.Object) END;
        GroupObject* = POINTER TO RECORD (CtlT.Object) END;
        GroupObjects* = POINTER TO RECORD (CtlT.Object) END;
        Line* = POINTER TO RECORD (CtlT.Object) END;
        Lines* = POINTER TO RECORD (CtlT.Object) END;
        Rectangle* = POINTER TO RECORD (CtlT.Object) END;
        Rectangles* = POINTER TO RECORD (CtlT.Object) END;
        Oval* = POINTER TO RECORD (CtlT.Object) END;
        Ovals* = POINTER TO RECORD (CtlT.Object) END;
        Arc* = POINTER TO RECORD (CtlT.Object) END;
        Arcs* = POINTER TO RECORD (CtlT.Object) END;
        TextBox* = POINTER TO RECORD (CtlT.Object) END;
        TextBoxes* = POINTER TO RECORD (CtlT.Object) END;
        Picture* = POINTER TO RECORD (CtlT.Object) END;
        Pictures* = POINTER TO RECORD (CtlT.Object) END;
        OLEObject* = POINTER TO RECORD (CtlT.Object) END;
        OLEObjects* = POINTER TO RECORD (CtlT.Object) END;
        ChartObject* = POINTER TO RECORD (CtlT.Object) END;
        ChartObjects* = POINTER TO RECORD (CtlT.Object) END;
        Drawing* = POINTER TO RECORD (CtlT.Object) END;
        Drawings* = POINTER TO RECORD (CtlT.Object) END;
        Button* = POINTER TO RECORD (CtlT.Object) END;
        Buttons* = POINTER TO RECORD (CtlT.Object) END;
        EditBox* = POINTER TO RECORD (CtlT.Object) END;
        EditBoxes* = POINTER TO RECORD (CtlT.Object) END;
        CheckBox* = POINTER TO RECORD (CtlT.Object) END;
        CheckBoxes* = POINTER TO RECORD (CtlT.Object) END;
        OptionButton* = POINTER TO RECORD (CtlT.Object) END;
        OptionButtons* = POINTER TO RECORD (CtlT.Object) END;
        Spinner* = POINTER TO RECORD (CtlT.Object) END;
        Spinners* = POINTER TO RECORD (CtlT.Object) END;
        ScrollBar* = POINTER TO RECORD (CtlT.Object) END;
        ScrollBars* = POINTER TO RECORD (CtlT.Object) END;
        ListBox* = POINTER TO RECORD (CtlT.Object) END;
        ListBoxes* = POINTER TO RECORD (CtlT.Object) END;
        GroupBox* = POINTER TO RECORD (CtlT.Object) END;
        GroupBoxes* = POINTER TO RECORD (CtlT.Object) END;
        DropDown* = POINTER TO RECORD (CtlT.Object) END;
        DropDowns* = POINTER TO RECORD (CtlT.Object) END;
        DialogFrame* = POINTER TO RECORD (CtlT.Object) END;
        Label* = POINTER TO RECORD (CtlT.Object) END;
        Labels* = POINTER TO RECORD (CtlT.Object) END;
        Interior* = POINTER TO RECORD (CtlT.Object) END;
        SoundNote* = POINTER TO RECORD (CtlT.Object) END;
        Characters* = POINTER TO RECORD (CtlT.Object) END;
        Dialog* = POINTER TO RECORD (CtlT.Object) END;
        Dialogs* = POINTER TO RECORD (CtlT.Object) END;
        Outline* = POINTER TO RECORD (CtlT.Object) END;
        RoutingSlip* = POINTER TO RECORD (CtlT.Object) END;
        Module* = POINTER TO RECORD (CtlT.Object) END;
        Modules* = POINTER TO RECORD (CtlT.Object) END;
        DialogSheet* = POINTER TO RECORD (CtlT.Object) END;
        DialogSheets* = POINTER TO RECORD (CtlT.Object) END;
        PageSetup* = POINTER TO RECORD (CtlT.Object) END;
        Mailer* = POINTER TO RECORD (CtlT.Object) END;
        Font* = POINTER TO RECORD (CtlT.Object) END;
        Border* = POINTER TO RECORD (CtlT.Object) END;
        Borders* = POINTER TO RECORD (CtlT.Object) END;
        Corners* = POINTER TO RECORD (CtlT.Object) END;
        SeriesLines* = POINTER TO RECORD (CtlT.Object) END;
        HiLoLines* = POINTER TO RECORD (CtlT.Object) END;
        Gridlines* = POINTER TO RECORD (CtlT.Object) END;
        DropLines* = POINTER TO RECORD (CtlT.Object) END;
        ErrorBars* = POINTER TO RECORD (CtlT.Object) END;
        UpBars* = POINTER TO RECORD (CtlT.Object) END;
        DownBars* = POINTER TO RECORD (CtlT.Object) END;
        ChartTitle* = POINTER TO RECORD (CtlT.Object) END;
        AxisTitle* = POINTER TO RECORD (CtlT.Object) END;
        Floor* = POINTER TO RECORD (CtlT.Object) END;
        Walls* = POINTER TO RECORD (CtlT.Object) END;
        PlotArea* = POINTER TO RECORD (CtlT.Object) END;
        ChartArea* = POINTER TO RECORD (CtlT.Object) END;
        Legend* = POINTER TO RECORD (CtlT.Object) END;
        TickLabels* = POINTER TO RECORD (CtlT.Object) END;
        Chart* = POINTER TO RECORD (CtlT.Object) END;
        Charts* = POINTER TO RECORD (CtlT.Object) END;
        ChartGroup* = POINTER TO RECORD (CtlT.Object) END;
        ChartGroups* = POINTER TO RECORD (CtlT.Object) END;
        Axis* = POINTER TO RECORD (CtlT.Object) END;
        Axes* = POINTER TO RECORD (CtlT.Object) END;
        DataLabel* = POINTER TO RECORD (CtlT.Object) END;
        DataLabels* = POINTER TO RECORD (CtlT.Object) END;
        Point* = POINTER TO RECORD (CtlT.Object) END;
        Points* = POINTER TO RECORD (CtlT.Object) END;
        Series* = POINTER TO RECORD (CtlT.Object) END;
        SeriesCollection* = POINTER TO RECORD (CtlT.Object) END;
        LegendEntry* = POINTER TO RECORD (CtlT.Object) END;
        LegendEntries* = POINTER TO RECORD (CtlT.Object) END;
        LegendKey* = POINTER TO RECORD (CtlT.Object) END;
        Trendline* = POINTER TO RECORD (CtlT.Object) END;
        Trendlines* = POINTER TO RECORD (CtlT.Object) END;
        _ExcelApplication* = _Global;
        AutoCorrect* = POINTER TO RECORD (CtlT.Object) END;
        _ExcelSheet* = Worksheet;
        _ExcelChart* = Chart;


    PROCEDURE This_Global* (v: CtlT.Any): _Global;
        VAR new: _Global;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020856-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END This_Global;

    PROCEDURE Is_Global* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020856-0000-0000-C000-000000000046}")
    END Is_Global;

    PROCEDURE ThisApplication* (v: CtlT.Any): Application;
        VAR new: Application;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020841-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisApplication;

    PROCEDURE IsApplication* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020841-0000-0000-C000-000000000046}")
    END IsApplication;

    PROCEDURE ThisStyle* (v: CtlT.Any): Style;
        VAR new: Style;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020852-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisStyle;

    PROCEDURE IsStyle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020852-0000-0000-C000-000000000046}")
    END IsStyle;

    PROCEDURE ThisStyles* (v: CtlT.Any): Styles;
        VAR new: Styles;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020853-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisStyles;

    PROCEDURE IsStyles* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020853-0000-0000-C000-000000000046}")
    END IsStyles;

    PROCEDURE ThisToolbar* (v: CtlT.Any): Toolbar;
        VAR new: Toolbar;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbar;

    PROCEDURE IsToolbar* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085C-0000-0000-C000-000000000046}")
    END IsToolbar;

    PROCEDURE ThisToolbars* (v: CtlT.Any): Toolbars;
        VAR new: Toolbars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbars;

    PROCEDURE IsToolbars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085D-0000-0000-C000-000000000046}")
    END IsToolbars;

    PROCEDURE ThisToolbarButton* (v: CtlT.Any): ToolbarButton;
        VAR new: ToolbarButton;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbarButton;

    PROCEDURE IsToolbarButton* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085E-0000-0000-C000-000000000046}")
    END IsToolbarButton;

    PROCEDURE ThisToolbarButtons* (v: CtlT.Any): ToolbarButtons;
        VAR new: ToolbarButtons;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisToolbarButtons;

    PROCEDURE IsToolbarButtons* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085F-0000-0000-C000-000000000046}")
    END IsToolbarButtons;

    PROCEDURE ThisAddIn* (v: CtlT.Any): AddIn;
        VAR new: AddIn;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020857-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAddIn;

    PROCEDURE IsAddIn* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020857-0000-0000-C000-000000000046}")
    END IsAddIn;

    PROCEDURE ThisAddIns* (v: CtlT.Any): AddIns;
        VAR new: AddIns;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020858-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAddIns;

    PROCEDURE IsAddIns* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020858-0000-0000-C000-000000000046}")
    END IsAddIns;

    PROCEDURE ThisAreas* (v: CtlT.Any): Areas;
        VAR new: Areas;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020860-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAreas;

    PROCEDURE IsAreas* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020860-0000-0000-C000-000000000046}")
    END IsAreas;

    PROCEDURE ThisRange* (v: CtlT.Any): Range;
        VAR new: Range;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020846-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRange;

    PROCEDURE IsRange* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020846-0000-0000-C000-000000000046}")
    END IsRange;

    PROCEDURE ThisWorkbook* (v: CtlT.Any): Workbook;
        VAR new: Workbook;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020861-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWorkbook;

    PROCEDURE IsWorkbook* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020861-0000-0000-C000-000000000046}")
    END IsWorkbook;

    PROCEDURE ThisWorkbooks* (v: CtlT.Any): Workbooks;
        VAR new: Workbooks;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020862-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWorkbooks;

    PROCEDURE IsWorkbooks* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020862-0000-0000-C000-000000000046}")
    END IsWorkbooks;

    PROCEDURE ThisSheets* (v: CtlT.Any): Sheets;
        VAR new: Sheets;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002084C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSheets;

    PROCEDURE IsSheets* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002084C-0000-0000-C000-000000000046}")
    END IsSheets;

    PROCEDURE ThisWorksheet* (v: CtlT.Any): Worksheet;
        VAR new: Worksheet;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020850-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWorksheet;

    PROCEDURE IsWorksheet* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020850-0000-0000-C000-000000000046}")
    END IsWorksheet;

    PROCEDURE ThisWorksheets* (v: CtlT.Any): Worksheets;
        VAR new: Worksheets;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000209B1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWorksheets;

    PROCEDURE IsWorksheets* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000209B1-0000-0000-C000-000000000046}")
    END IsWorksheets;

    PROCEDURE ThisPivotTable* (v: CtlT.Any): PivotTable;
        VAR new: PivotTable;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020872-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotTable;

    PROCEDURE IsPivotTable* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020872-0000-0000-C000-000000000046}")
    END IsPivotTable;

    PROCEDURE ThisPivotTables* (v: CtlT.Any): PivotTables;
        VAR new: PivotTables;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020873-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotTables;

    PROCEDURE IsPivotTables* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020873-0000-0000-C000-000000000046}")
    END IsPivotTables;

    PROCEDURE ThisPivotField* (v: CtlT.Any): PivotField;
        VAR new: PivotField;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020874-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotField;

    PROCEDURE IsPivotField* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020874-0000-0000-C000-000000000046}")
    END IsPivotField;

    PROCEDURE ThisPivotFields* (v: CtlT.Any): PivotFields;
        VAR new: PivotFields;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020875-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotFields;

    PROCEDURE IsPivotFields* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020875-0000-0000-C000-000000000046}")
    END IsPivotFields;

    PROCEDURE ThisPivotItem* (v: CtlT.Any): PivotItem;
        VAR new: PivotItem;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020876-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotItem;

    PROCEDURE IsPivotItem* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020876-0000-0000-C000-000000000046}")
    END IsPivotItem;

    PROCEDURE ThisPivotItems* (v: CtlT.Any): PivotItems;
        VAR new: PivotItems;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020877-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPivotItems;

    PROCEDURE IsPivotItems* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020877-0000-0000-C000-000000000046}")
    END IsPivotItems;

    PROCEDURE ThisScenario* (v: CtlT.Any): Scenario;
        VAR new: Scenario;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020897-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScenario;

    PROCEDURE IsScenario* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020897-0000-0000-C000-000000000046}")
    END IsScenario;

    PROCEDURE ThisScenarios* (v: CtlT.Any): Scenarios;
        VAR new: Scenarios;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020896-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScenarios;

    PROCEDURE IsScenarios* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020896-0000-0000-C000-000000000046}")
    END IsScenarios;

    PROCEDURE ThisMenuBar* (v: CtlT.Any): MenuBar;
        VAR new: MenuBar;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020864-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuBar;

    PROCEDURE IsMenuBar* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020864-0000-0000-C000-000000000046}")
    END IsMenuBar;

    PROCEDURE ThisMenuBars* (v: CtlT.Any): MenuBars;
        VAR new: MenuBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020863-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuBars;

    PROCEDURE IsMenuBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020863-0000-0000-C000-000000000046}")
    END IsMenuBars;

    PROCEDURE ThisMenu* (v: CtlT.Any): Menu;
        VAR new: Menu;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020866-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenu;

    PROCEDURE IsMenu* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020866-0000-0000-C000-000000000046}")
    END IsMenu;

    PROCEDURE ThisMenus* (v: CtlT.Any): Menus;
        VAR new: Menus;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020865-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenus;

    PROCEDURE IsMenus* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020865-0000-0000-C000-000000000046}")
    END IsMenus;

    PROCEDURE ThisMenuItem* (v: CtlT.Any): MenuItem;
        VAR new: MenuItem;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020868-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuItem;

    PROCEDURE IsMenuItem* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020868-0000-0000-C000-000000000046}")
    END IsMenuItem;

    PROCEDURE ThisMenuItems* (v: CtlT.Any): MenuItems;
        VAR new: MenuItems;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020867-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMenuItems;

    PROCEDURE IsMenuItems* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020867-0000-0000-C000-000000000046}")
    END IsMenuItems;

    PROCEDURE ThisWindow* (v: CtlT.Any): Window;
        VAR new: Window;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020893-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWindow;

    PROCEDURE IsWindow* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020893-0000-0000-C000-000000000046}")
    END IsWindow;

    PROCEDURE ThisWindows* (v: CtlT.Any): Windows;
        VAR new: Windows;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020892-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWindows;

    PROCEDURE IsWindows* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020892-0000-0000-C000-000000000046}")
    END IsWindows;

    PROCEDURE ThisPane* (v: CtlT.Any): Pane;
        VAR new: Pane;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020895-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPane;

    PROCEDURE IsPane* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020895-0000-0000-C000-000000000046}")
    END IsPane;

    PROCEDURE ThisPanes* (v: CtlT.Any): Panes;
        VAR new: Panes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020894-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPanes;

    PROCEDURE IsPanes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020894-0000-0000-C000-000000000046}")
    END IsPanes;

    PROCEDURE ThisName* (v: CtlT.Any): Name;
        VAR new: Name;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B9-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisName;

    PROCEDURE IsName* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B9-0000-0000-C000-000000000046}")
    END IsName;

    PROCEDURE ThisNames* (v: CtlT.Any): Names;
        VAR new: Names;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B8-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisNames;

    PROCEDURE IsNames* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B8-0000-0000-C000-000000000046}")
    END IsNames;

    PROCEDURE ThisDrawingObjects* (v: CtlT.Any): DrawingObjects;
        VAR new: DrawingObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDrawingObjects;

    PROCEDURE IsDrawingObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086F-0000-0000-C000-000000000046}")
    END IsDrawingObjects;

    PROCEDURE ThisGroupObject* (v: CtlT.Any): GroupObject;
        VAR new: GroupObject;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020898-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupObject;

    PROCEDURE IsGroupObject* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020898-0000-0000-C000-000000000046}")
    END IsGroupObject;

    PROCEDURE ThisGroupObjects* (v: CtlT.Any): GroupObjects;
        VAR new: GroupObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020899-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupObjects;

    PROCEDURE IsGroupObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020899-0000-0000-C000-000000000046}")
    END IsGroupObjects;

    PROCEDURE ThisLine* (v: CtlT.Any): Line;
        VAR new: Line;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLine;

    PROCEDURE IsLine* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089A-0000-0000-C000-000000000046}")
    END IsLine;

    PROCEDURE ThisLines* (v: CtlT.Any): Lines;
        VAR new: Lines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLines;

    PROCEDURE IsLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089B-0000-0000-C000-000000000046}")
    END IsLines;

    PROCEDURE ThisRectangle* (v: CtlT.Any): Rectangle;
        VAR new: Rectangle;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRectangle;

    PROCEDURE IsRectangle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089C-0000-0000-C000-000000000046}")
    END IsRectangle;

    PROCEDURE ThisRectangles* (v: CtlT.Any): Rectangles;
        VAR new: Rectangles;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRectangles;

    PROCEDURE IsRectangles* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089D-0000-0000-C000-000000000046}")
    END IsRectangles;

    PROCEDURE ThisOval* (v: CtlT.Any): Oval;
        VAR new: Oval;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOval;

    PROCEDURE IsOval* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089E-0000-0000-C000-000000000046}")
    END IsOval;

    PROCEDURE ThisOvals* (v: CtlT.Any): Ovals;
        VAR new: Ovals;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002089F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOvals;

    PROCEDURE IsOvals* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002089F-0000-0000-C000-000000000046}")
    END IsOvals;

    PROCEDURE ThisArc* (v: CtlT.Any): Arc;
        VAR new: Arc;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisArc;

    PROCEDURE IsArc* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A0-0000-0000-C000-000000000046}")
    END IsArc;

    PROCEDURE ThisArcs* (v: CtlT.Any): Arcs;
        VAR new: Arcs;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisArcs;

    PROCEDURE IsArcs* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A1-0000-0000-C000-000000000046}")
    END IsArcs;

    PROCEDURE ThisTextBox* (v: CtlT.Any): TextBox;
        VAR new: TextBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTextBox;

    PROCEDURE IsTextBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A4-0000-0000-C000-000000000046}")
    END IsTextBox;

    PROCEDURE ThisTextBoxes* (v: CtlT.Any): TextBoxes;
        VAR new: TextBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A5-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTextBoxes;

    PROCEDURE IsTextBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A5-0000-0000-C000-000000000046}")
    END IsTextBoxes;

    PROCEDURE ThisPicture* (v: CtlT.Any): Picture;
        VAR new: Picture;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A6-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPicture;

    PROCEDURE IsPicture* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A6-0000-0000-C000-000000000046}")
    END IsPicture;

    PROCEDURE ThisPictures* (v: CtlT.Any): Pictures;
        VAR new: Pictures;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A7-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPictures;

    PROCEDURE IsPictures* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A7-0000-0000-C000-000000000046}")
    END IsPictures;

    PROCEDURE ThisOLEObject* (v: CtlT.Any): OLEObject;
        VAR new: OLEObject;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A2-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOLEObject;

    PROCEDURE IsOLEObject* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A2-0000-0000-C000-000000000046}")
    END IsOLEObject;

    PROCEDURE ThisOLEObjects* (v: CtlT.Any): OLEObjects;
        VAR new: OLEObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A3-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOLEObjects;

    PROCEDURE IsOLEObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A3-0000-0000-C000-000000000046}")
    END IsOLEObjects;

    PROCEDURE ThisChartObject* (v: CtlT.Any): ChartObject;
        VAR new: ChartObject;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CF-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartObject;

    PROCEDURE IsChartObject* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CF-0000-0000-C000-000000000046}")
    END IsChartObject;

    PROCEDURE ThisChartObjects* (v: CtlT.Any): ChartObjects;
        VAR new: ChartObjects;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartObjects;

    PROCEDURE IsChartObjects* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D0-0000-0000-C000-000000000046}")
    END IsChartObjects;

    PROCEDURE ThisDrawing* (v: CtlT.Any): Drawing;
        VAR new: Drawing;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A8-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDrawing;

    PROCEDURE IsDrawing* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A8-0000-0000-C000-000000000046}")
    END IsDrawing;

    PROCEDURE ThisDrawings* (v: CtlT.Any): Drawings;
        VAR new: Drawings;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208A9-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDrawings;

    PROCEDURE IsDrawings* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208A9-0000-0000-C000-000000000046}")
    END IsDrawings;

    PROCEDURE ThisButton* (v: CtlT.Any): Button;
        VAR new: Button;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisButton;

    PROCEDURE IsButton* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087D-0000-0000-C000-000000000046}")
    END IsButton;

    PROCEDURE ThisButtons* (v: CtlT.Any): Buttons;
        VAR new: Buttons;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisButtons;

    PROCEDURE IsButtons* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087E-0000-0000-C000-000000000046}")
    END IsButtons;

    PROCEDURE ThisEditBox* (v: CtlT.Any): EditBox;
        VAR new: EditBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020883-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisEditBox;

    PROCEDURE IsEditBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020883-0000-0000-C000-000000000046}")
    END IsEditBox;

    PROCEDURE ThisEditBoxes* (v: CtlT.Any): EditBoxes;
        VAR new: EditBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020884-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisEditBoxes;

    PROCEDURE IsEditBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020884-0000-0000-C000-000000000046}")
    END IsEditBoxes;

    PROCEDURE ThisCheckBox* (v: CtlT.Any): CheckBox;
        VAR new: CheckBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCheckBox;

    PROCEDURE IsCheckBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087F-0000-0000-C000-000000000046}")
    END IsCheckBox;

    PROCEDURE ThisCheckBoxes* (v: CtlT.Any): CheckBoxes;
        VAR new: CheckBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020880-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCheckBoxes;

    PROCEDURE IsCheckBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020880-0000-0000-C000-000000000046}")
    END IsCheckBoxes;

    PROCEDURE ThisOptionButton* (v: CtlT.Any): OptionButton;
        VAR new: OptionButton;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020881-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOptionButton;

    PROCEDURE IsOptionButton* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020881-0000-0000-C000-000000000046}")
    END IsOptionButton;

    PROCEDURE ThisOptionButtons* (v: CtlT.Any): OptionButtons;
        VAR new: OptionButtons;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020882-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOptionButtons;

    PROCEDURE IsOptionButtons* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020882-0000-0000-C000-000000000046}")
    END IsOptionButtons;

    PROCEDURE ThisSpinner* (v: CtlT.Any): Spinner;
        VAR new: Spinner;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSpinner;

    PROCEDURE IsSpinner* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088D-0000-0000-C000-000000000046}")
    END IsSpinner;

    PROCEDURE ThisSpinners* (v: CtlT.Any): Spinners;
        VAR new: Spinners;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088E-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSpinners;

    PROCEDURE IsSpinners* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088E-0000-0000-C000-000000000046}")
    END IsSpinners;

    PROCEDURE ThisScrollBar* (v: CtlT.Any): ScrollBar;
        VAR new: ScrollBar;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020885-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScrollBar;

    PROCEDURE IsScrollBar* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020885-0000-0000-C000-000000000046}")
    END IsScrollBar;

    PROCEDURE ThisScrollBars* (v: CtlT.Any): ScrollBars;
        VAR new: ScrollBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020886-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisScrollBars;

    PROCEDURE IsScrollBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020886-0000-0000-C000-000000000046}")
    END IsScrollBars;

    PROCEDURE ThisListBox* (v: CtlT.Any): ListBox;
        VAR new: ListBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020887-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisListBox;

    PROCEDURE IsListBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020887-0000-0000-C000-000000000046}")
    END IsListBox;

    PROCEDURE ThisListBoxes* (v: CtlT.Any): ListBoxes;
        VAR new: ListBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020888-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisListBoxes;

    PROCEDURE IsListBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020888-0000-0000-C000-000000000046}")
    END IsListBoxes;

    PROCEDURE ThisGroupBox* (v: CtlT.Any): GroupBox;
        VAR new: GroupBox;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020889-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupBox;

    PROCEDURE IsGroupBox* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020889-0000-0000-C000-000000000046}")
    END IsGroupBox;

    PROCEDURE ThisGroupBoxes* (v: CtlT.Any): GroupBoxes;
        VAR new: GroupBoxes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGroupBoxes;

    PROCEDURE IsGroupBoxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088A-0000-0000-C000-000000000046}")
    END IsGroupBoxes;

    PROCEDURE ThisDropDown* (v: CtlT.Any): DropDown;
        VAR new: DropDown;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDropDown;

    PROCEDURE IsDropDown* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088B-0000-0000-C000-000000000046}")
    END IsDropDown;

    PROCEDURE ThisDropDowns* (v: CtlT.Any): DropDowns;
        VAR new: DropDowns;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDropDowns;

    PROCEDURE IsDropDowns* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088C-0000-0000-C000-000000000046}")
    END IsDropDowns;

    PROCEDURE ThisDialogFrame* (v: CtlT.Any): DialogFrame;
        VAR new: DialogFrame;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002088F-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogFrame;

    PROCEDURE IsDialogFrame* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002088F-0000-0000-C000-000000000046}")
    END IsDialogFrame;

    PROCEDURE ThisLabel* (v: CtlT.Any): Label;
        VAR new: Label;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020890-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLabel;

    PROCEDURE IsLabel* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020890-0000-0000-C000-000000000046}")
    END IsLabel;

    PROCEDURE ThisLabels* (v: CtlT.Any): Labels;
        VAR new: Labels;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020891-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLabels;

    PROCEDURE IsLabels* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020891-0000-0000-C000-000000000046}")
    END IsLabels;

    PROCEDURE ThisInterior* (v: CtlT.Any): Interior;
        VAR new: Interior;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020870-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisInterior;

    PROCEDURE IsInterior* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020870-0000-0000-C000-000000000046}")
    END IsInterior;

    PROCEDURE ThisSoundNote* (v: CtlT.Any): SoundNote;
        VAR new: SoundNote;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSoundNote;

    PROCEDURE IsSoundNote* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087B-0000-0000-C000-000000000046}")
    END IsSoundNote;

    PROCEDURE ThisCharacters* (v: CtlT.Any): Characters;
        VAR new: Characters;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020878-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCharacters;

    PROCEDURE IsCharacters* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020878-0000-0000-C000-000000000046}")
    END IsCharacters;

    PROCEDURE ThisDialog* (v: CtlT.Any): Dialog;
        VAR new: Dialog;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002087A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialog;

    PROCEDURE IsDialog* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002087A-0000-0000-C000-000000000046}")
    END IsDialog;

    PROCEDURE ThisDialogs* (v: CtlT.Any): Dialogs;
        VAR new: Dialogs;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020879-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogs;

    PROCEDURE IsDialogs* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020879-0000-0000-C000-000000000046}")
    END IsDialogs;

    PROCEDURE ThisOutline* (v: CtlT.Any): Outline;
        VAR new: Outline;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208AB-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisOutline;

    PROCEDURE IsOutline* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208AB-0000-0000-C000-000000000046}")
    END IsOutline;

    PROCEDURE ThisRoutingSlip* (v: CtlT.Any): RoutingSlip;
        VAR new: RoutingSlip;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208AA-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisRoutingSlip;

    PROCEDURE IsRoutingSlip* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208AA-0000-0000-C000-000000000046}")
    END IsRoutingSlip;

    PROCEDURE ThisModule* (v: CtlT.Any): Module;
        VAR new: Module;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000209AD-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisModule;

    PROCEDURE IsModule* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000209AD-0000-0000-C000-000000000046}")
    END IsModule;

    PROCEDURE ThisModules* (v: CtlT.Any): Modules;
        VAR new: Modules;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000209AE-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisModules;

    PROCEDURE IsModules* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000209AE-0000-0000-C000-000000000046}")
    END IsModules;

    PROCEDURE ThisDialogSheet* (v: CtlT.Any): DialogSheet;
        VAR new: DialogSheet;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000209AF-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogSheet;

    PROCEDURE IsDialogSheet* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000209AF-0000-0000-C000-000000000046}")
    END IsDialogSheet;

    PROCEDURE ThisDialogSheets* (v: CtlT.Any): DialogSheets;
        VAR new: DialogSheets;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000209B0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDialogSheets;

    PROCEDURE IsDialogSheets* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000209B0-0000-0000-C000-000000000046}")
    END IsDialogSheets;

    PROCEDURE ThisPageSetup* (v: CtlT.Any): PageSetup;
        VAR new: PageSetup;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPageSetup;

    PROCEDURE IsPageSetup* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B4-0000-0000-C000-000000000046}")
    END IsPageSetup;

    PROCEDURE ThisMailer* (v: CtlT.Any): Mailer;
        VAR new: Mailer;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisMailer;

    PROCEDURE IsMailer* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D1-0000-0000-C000-000000000046}")
    END IsMailer;

    PROCEDURE ThisFont* (v: CtlT.Any): Font;
        VAR new: Font;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002084D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFont;

    PROCEDURE IsFont* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002084D-0000-0000-C000-000000000046}")
    END IsFont;

    PROCEDURE ThisBorder* (v: CtlT.Any): Border;
        VAR new: Border;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020854-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisBorder;

    PROCEDURE IsBorder* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020854-0000-0000-C000-000000000046}")
    END IsBorder;

    PROCEDURE ThisBorders* (v: CtlT.Any): Borders;
        VAR new: Borders;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020855-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisBorders;

    PROCEDURE IsBorders* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020855-0000-0000-C000-000000000046}")
    END IsBorders;

    PROCEDURE ThisCorners* (v: CtlT.Any): Corners;
        VAR new: Corners;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C0-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCorners;

    PROCEDURE IsCorners* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C0-0000-0000-C000-000000000046}")
    END IsCorners;

    PROCEDURE ThisSeriesLines* (v: CtlT.Any): SeriesLines;
        VAR new: SeriesLines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C1-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSeriesLines;

    PROCEDURE IsSeriesLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C1-0000-0000-C000-000000000046}")
    END IsSeriesLines;

    PROCEDURE ThisHiLoLines* (v: CtlT.Any): HiLoLines;
        VAR new: HiLoLines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C2-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisHiLoLines;

    PROCEDURE IsHiLoLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C2-0000-0000-C000-000000000046}")
    END IsHiLoLines;

    PROCEDURE ThisGridlines* (v: CtlT.Any): Gridlines;
        VAR new: Gridlines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C3-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisGridlines;

    PROCEDURE IsGridlines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C3-0000-0000-C000-000000000046}")
    END IsGridlines;

    PROCEDURE ThisDropLines* (v: CtlT.Any): DropLines;
        VAR new: DropLines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDropLines;

    PROCEDURE IsDropLines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C4-0000-0000-C000-000000000046}")
    END IsDropLines;

    PROCEDURE ThisErrorBars* (v: CtlT.Any): ErrorBars;
        VAR new: ErrorBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CE-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisErrorBars;

    PROCEDURE IsErrorBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CE-0000-0000-C000-000000000046}")
    END IsErrorBars;

    PROCEDURE ThisUpBars* (v: CtlT.Any): UpBars;
        VAR new: UpBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C5-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisUpBars;

    PROCEDURE IsUpBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C5-0000-0000-C000-000000000046}")
    END IsUpBars;

    PROCEDURE ThisDownBars* (v: CtlT.Any): DownBars;
        VAR new: DownBars;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C6-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDownBars;

    PROCEDURE IsDownBars* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C6-0000-0000-C000-000000000046}")
    END IsDownBars;

    PROCEDURE ThisChartTitle* (v: CtlT.Any): ChartTitle;
        VAR new: ChartTitle;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020849-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartTitle;

    PROCEDURE IsChartTitle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020849-0000-0000-C000-000000000046}")
    END IsChartTitle;

    PROCEDURE ThisAxisTitle* (v: CtlT.Any): AxisTitle;
        VAR new: AxisTitle;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002084A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAxisTitle;

    PROCEDURE IsAxisTitle* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002084A-0000-0000-C000-000000000046}")
    END IsAxisTitle;

    PROCEDURE ThisFloor* (v: CtlT.Any): Floor;
        VAR new: Floor;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C7-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisFloor;

    PROCEDURE IsFloor* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C7-0000-0000-C000-000000000046}")
    END IsFloor;

    PROCEDURE ThisWalls* (v: CtlT.Any): Walls;
        VAR new: Walls;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C8-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisWalls;

    PROCEDURE IsWalls* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C8-0000-0000-C000-000000000046}")
    END IsWalls;

    PROCEDURE ThisPlotArea* (v: CtlT.Any): PlotArea;
        VAR new: PlotArea;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CB-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPlotArea;

    PROCEDURE IsPlotArea* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CB-0000-0000-C000-000000000046}")
    END IsPlotArea;

    PROCEDURE ThisChartArea* (v: CtlT.Any): ChartArea;
        VAR new: ChartArea;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CC-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartArea;

    PROCEDURE IsChartArea* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CC-0000-0000-C000-000000000046}")
    END IsChartArea;

    PROCEDURE ThisLegend* (v: CtlT.Any): Legend;
        VAR new: Legend;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208CD-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegend;

    PROCEDURE IsLegend* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208CD-0000-0000-C000-000000000046}")
    END IsLegend;

    PROCEDURE ThisTickLabels* (v: CtlT.Any): TickLabels;
        VAR new: TickLabels;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208C9-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTickLabels;

    PROCEDURE IsTickLabels* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208C9-0000-0000-C000-000000000046}")
    END IsTickLabels;

    PROCEDURE ThisChart* (v: CtlT.Any): Chart;
        VAR new: Chart;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020847-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChart;

    PROCEDURE IsChart* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020847-0000-0000-C000-000000000046}")
    END IsChart;

    PROCEDURE ThisCharts* (v: CtlT.Any): Charts;
        VAR new: Charts;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086D-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisCharts;

    PROCEDURE IsCharts* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086D-0000-0000-C000-000000000046}")
    END IsCharts;

    PROCEDURE ThisChartGroup* (v: CtlT.Any): ChartGroup;
        VAR new: ChartGroup;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020859-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartGroup;

    PROCEDURE IsChartGroup* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020859-0000-0000-C000-000000000046}")
    END IsChartGroup;

    PROCEDURE ThisChartGroups* (v: CtlT.Any): ChartGroups;
        VAR new: ChartGroups;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisChartGroups;

    PROCEDURE IsChartGroups* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085A-0000-0000-C000-000000000046}")
    END IsChartGroups;

    PROCEDURE ThisAxis* (v: CtlT.Any): Axis;
        VAR new: Axis;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020848-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAxis;

    PROCEDURE IsAxis* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020848-0000-0000-C000-000000000046}")
    END IsAxis;

    PROCEDURE ThisAxes* (v: CtlT.Any): Axes;
        VAR new: Axes;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002085B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAxes;

    PROCEDURE IsAxes* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002085B-0000-0000-C000-000000000046}")
    END IsAxes;

    PROCEDURE ThisDataLabel* (v: CtlT.Any): DataLabel;
        VAR new: DataLabel;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B2-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDataLabel;

    PROCEDURE IsDataLabel* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B2-0000-0000-C000-000000000046}")
    END IsDataLabel;

    PROCEDURE ThisDataLabels* (v: CtlT.Any): DataLabels;
        VAR new: DataLabels;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208B3-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisDataLabels;

    PROCEDURE IsDataLabels* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208B3-0000-0000-C000-000000000046}")
    END IsDataLabels;

    PROCEDURE ThisPoint* (v: CtlT.Any): Point;
        VAR new: Point;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086A-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPoint;

    PROCEDURE IsPoint* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086A-0000-0000-C000-000000000046}")
    END IsPoint;

    PROCEDURE ThisPoints* (v: CtlT.Any): Points;
        VAR new: Points;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{00020869-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisPoints;

    PROCEDURE IsPoints* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{00020869-0000-0000-C000-000000000046}")
    END IsPoints;

    PROCEDURE ThisSeries* (v: CtlT.Any): Series;
        VAR new: Series;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086B-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSeries;

    PROCEDURE IsSeries* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086B-0000-0000-C000-000000000046}")
    END IsSeries;

    PROCEDURE ThisSeriesCollection* (v: CtlT.Any): SeriesCollection;
        VAR new: SeriesCollection;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{0002086C-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisSeriesCollection;

    PROCEDURE IsSeriesCollection* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{0002086C-0000-0000-C000-000000000046}")
    END IsSeriesCollection;

    PROCEDURE ThisLegendEntry* (v: CtlT.Any): LegendEntry;
        VAR new: LegendEntry;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BA-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegendEntry;

    PROCEDURE IsLegendEntry* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BA-0000-0000-C000-000000000046}")
    END IsLegendEntry;

    PROCEDURE ThisLegendEntries* (v: CtlT.Any): LegendEntries;
        VAR new: LegendEntries;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BB-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegendEntries;

    PROCEDURE IsLegendEntries* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BB-0000-0000-C000-000000000046}")
    END IsLegendEntries;

    PROCEDURE ThisLegendKey* (v: CtlT.Any): LegendKey;
        VAR new: LegendKey;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BC-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisLegendKey;

    PROCEDURE IsLegendKey* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BC-0000-0000-C000-000000000046}")
    END IsLegendKey;

    PROCEDURE ThisTrendline* (v: CtlT.Any): Trendline;
        VAR new: Trendline;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BE-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTrendline;

    PROCEDURE IsTrendline* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BE-0000-0000-C000-000000000046}")
    END IsTrendline;

    PROCEDURE ThisTrendlines* (v: CtlT.Any): Trendlines;
        VAR new: Trendlines;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208BD-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisTrendlines;

    PROCEDURE IsTrendlines* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208BD-0000-0000-C000-000000000046}")
    END IsTrendlines;

    PROCEDURE ThisAutoCorrect* (v: CtlT.Any): AutoCorrect;
        VAR new: AutoCorrect;
    BEGIN
        IF v # NIL THEN
            NEW(new); CtlC.InitObj(new, v, "{000208D4-0000-0000-C000-000000000046}"); RETURN new
        ELSE RETURN NIL
        END
    END ThisAutoCorrect;

    PROCEDURE IsAutoCorrect* (v: CtlT.Any): BOOLEAN;
    BEGIN
        RETURN CtlC.IsObj(v, "{000208D4-0000-0000-C000-000000000046}")
    END IsAutoCorrect;



    (* ---------- _Global ---------- *)

    PROCEDURE (this: _Global) ActiveCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 305)
    END ActiveCell;

    PROCEDURE (this: _Global) PUTActiveCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 305, val)
    END PUTActiveCell;

    PROCEDURE (this: _Global) ActiveChart* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 183)
    END ActiveChart;

    PROCEDURE (this: _Global) PUTActiveChart* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 183, val)
    END PUTActiveChart;

    PROCEDURE (this: _Global) ActiveDialog* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 815)
    END ActiveDialog;

    PROCEDURE (this: _Global) PUTActiveDialog* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 815, val)
    END PUTActiveDialog;

    PROCEDURE (this: _Global) ActiveMenuBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 758)
    END ActiveMenuBar;

    PROCEDURE (this: _Global) PUTActiveMenuBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 758, val)
    END PUTActiveMenuBar;

    PROCEDURE (this: _Global) ActivePrinter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 306)
    END ActivePrinter;

    PROCEDURE (this: _Global) PUTActivePrinter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 306, val)
    END PUTActivePrinter;

    PROCEDURE (this: _Global) ActiveSheet* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 307)
    END ActiveSheet;

    PROCEDURE (this: _Global) PUTActiveSheet* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 307, val)
    END PUTActiveSheet;

    PROCEDURE (this: _Global) ActiveWindow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 759)
    END ActiveWindow;

    PROCEDURE (this: _Global) PUTActiveWindow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 759, val)
    END PUTActiveWindow;

    PROCEDURE (this: _Global) ActiveWorkbook* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 308)
    END ActiveWorkbook;

    PROCEDURE (this: _Global) PUTActiveWorkbook* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 308, val)
    END PUTActiveWorkbook;

    PROCEDURE (this: _Global) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: _Global) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: _Global) DDEAppReturnCode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 332)
    END DDEAppReturnCode;

    PROCEDURE (this: _Global) PUTDDEAppReturnCode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 332, val)
    END PUTDDEAppReturnCode;

    PROCEDURE (this: _Global) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: _Global) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: _Global) Selection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 147)
    END Selection;

    PROCEDURE (this: _Global) PUTSelection* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 147, val)
    END PUTSelection;

    PROCEDURE (this: _Global) ThisWorkbook* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 778)
    END ThisWorkbook;

    PROCEDURE (this: _Global) PUTThisWorkbook* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 778, val)
    END PUTThisWorkbook;

    PROCEDURE (this: _Global) AddIns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 549, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddIns;

    PROCEDURE (this: _Global) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: _Global) Calculate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 279, ret);
        RETURN CtlC.VarAny(ret)
    END Calculate;

    PROCEDURE (this: _Global) Cells* ((* optional *) RowIndex: CtlT.Any; ColumnIndex: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[1]);
        CtlC.AnyVar(ColumnIndex, arg[0]);
        CtlC.CallParMethod(this, 238, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Cells;

    PROCEDURE (this: _Global) Charts* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 121, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Charts;

    PROCEDURE (this: _Global) Columns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 241, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Columns;

    PROCEDURE (this: _Global) DDEExecute* (Channel: CtlT.Any; String: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[1]);
        CtlC.AnyVar(String, arg[0]);
        CtlC.CallParMethod(this, 333, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDEExecute;

    PROCEDURE (this: _Global) DDEInitiate* (App: CtlT.Any; Topic: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(App, arg[1]);
        CtlC.AnyVar(Topic, arg[0]);
        CtlC.CallParMethod(this, 334, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDEInitiate;

    PROCEDURE (this: _Global) DDEPoke* (Channel: CtlT.Any; Item: CtlT.Any; Data: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[2]);
        CtlC.AnyVar(Item, arg[1]);
        CtlC.AnyVar(Data, arg[0]);
        CtlC.CallParMethod(this, 335, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDEPoke;

    PROCEDURE (this: _Global) DDERequest* (Channel: CtlT.Any; Item: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[1]);
        CtlC.AnyVar(Item, arg[0]);
        CtlC.CallParMethod(this, 336, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDERequest;

    PROCEDURE (this: _Global) DDETerminate* (Channel: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[0]);
        CtlC.CallParMethod(this, 337, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDETerminate;

    PROCEDURE (this: _Global) DialogSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 764, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DialogSheets;

    PROCEDURE (this: _Global) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: _Global) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: _Global) Excel4IntlMacroSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 581, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Excel4IntlMacroSheets;

    PROCEDURE (this: _Global) Excel4MacroSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 579, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Excel4MacroSheets;

    PROCEDURE (this: _Global) ExecuteExcel4Macro* (String: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(String, arg[0]);
        CtlC.CallParMethod(this, 350, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ExecuteExcel4Macro;

    PROCEDURE (this: _Global) Intersect* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 766, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Intersect;

    PROCEDURE (this: _Global) MenuBars* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 589, arg, ret);
        RETURN CtlC.VarAny(ret)
    END MenuBars;

    PROCEDURE (this: _Global) Modules* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 582, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Modules;

    PROCEDURE (this: _Global) Names* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 442, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Names;

    PROCEDURE (this: _Global) Range* ((* optional *) Cell1: CtlT.Any; Cell2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallParMethod(this, 197, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Range;

    PROCEDURE (this: _Global) Rows* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 258, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Rows;

    PROCEDURE (this: _Global) Run* ((* optional *) Macro: CtlT.Any; Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 31 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[30]);
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 259, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Run;

    PROCEDURE (this: _Global) SendKeys* (Keys: CtlT.Any; (* optional *) Wait: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Keys, arg[1]);
        CtlC.AnyVar(Wait, arg[0]);
        CtlC.CallParMethod(this, 383, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SendKeys;

    PROCEDURE (this: _Global) Sheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 485, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Sheets;

    PROCEDURE (this: _Global) ShortcutMenus* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 776, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ShortcutMenus;

    PROCEDURE (this: _Global) Toolbars* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 552, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Toolbars;

    PROCEDURE (this: _Global) Union* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 779, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Union;

    PROCEDURE (this: _Global) Windows* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 430, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Windows;

    PROCEDURE (this: _Global) Workbooks* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 572, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Workbooks;

    PROCEDURE (this: _Global) Worksheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 494, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Worksheets;


    (* ---------- Application ---------- *)

    PROCEDURE (this: Application) ActiveCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 305)
    END ActiveCell;

    PROCEDURE (this: Application) PUTActiveCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 305, val)
    END PUTActiveCell;

    PROCEDURE (this: Application) ActiveChart* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 183)
    END ActiveChart;

    PROCEDURE (this: Application) PUTActiveChart* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 183, val)
    END PUTActiveChart;

    PROCEDURE (this: Application) ActiveDialog* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 815)
    END ActiveDialog;

    PROCEDURE (this: Application) PUTActiveDialog* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 815, val)
    END PUTActiveDialog;

    PROCEDURE (this: Application) ActiveMenuBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 758)
    END ActiveMenuBar;

    PROCEDURE (this: Application) PUTActiveMenuBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 758, val)
    END PUTActiveMenuBar;

    PROCEDURE (this: Application) ActivePrinter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 306)
    END ActivePrinter;

    PROCEDURE (this: Application) PUTActivePrinter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 306, val)
    END PUTActivePrinter;

    PROCEDURE (this: Application) ActiveSheet* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 307)
    END ActiveSheet;

    PROCEDURE (this: Application) PUTActiveSheet* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 307, val)
    END PUTActiveSheet;

    PROCEDURE (this: Application) ActiveWindow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 759)
    END ActiveWindow;

    PROCEDURE (this: Application) PUTActiveWindow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 759, val)
    END PUTActiveWindow;

    PROCEDURE (this: Application) ActiveWorkbook* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 308)
    END ActiveWorkbook;

    PROCEDURE (this: Application) PUTActiveWorkbook* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 308, val)
    END PUTActiveWorkbook;

    PROCEDURE (this: Application) AlertBeforeOverwriting* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 930)
    END AlertBeforeOverwriting;

    PROCEDURE (this: Application) PUTAlertBeforeOverwriting* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 930, val)
    END PUTAlertBeforeOverwriting;

    PROCEDURE (this: Application) AltStartupPath* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 313)
    END AltStartupPath;

    PROCEDURE (this: Application) PUTAltStartupPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 313, val)
    END PUTAltStartupPath;

    PROCEDURE (this: Application) AskToUpdateLinks* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 992)
    END AskToUpdateLinks;

    PROCEDURE (this: Application) PUTAskToUpdateLinks* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 992, val)
    END PUTAskToUpdateLinks;

    PROCEDURE (this: Application) AutoCorrect* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1145)
    END AutoCorrect;

    PROCEDURE (this: Application) PUTAutoCorrect* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1145, val)
    END PUTAutoCorrect;

    PROCEDURE (this: Application) Build* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 314)
    END Build;

    PROCEDURE (this: Application) PUTBuild* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 314, val)
    END PUTBuild;

    PROCEDURE (this: Application) CalculateBeforeSave* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 315)
    END CalculateBeforeSave;

    PROCEDURE (this: Application) PUTCalculateBeforeSave* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 315, val)
    END PUTCalculateBeforeSave;

    PROCEDURE (this: Application) Calculation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 316)
    END Calculation;

    PROCEDURE (this: Application) PUTCalculation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 316, val)
    END PUTCalculation;

    PROCEDURE (this: Application) Caller* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 317)
    END Caller;

    PROCEDURE (this: Application) PUTCaller* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 317, val)
    END PUTCaller;

    PROCEDURE (this: Application) CanPlaySounds* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 318)
    END CanPlaySounds;

    PROCEDURE (this: Application) PUTCanPlaySounds* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 318, val)
    END PUTCanPlaySounds;

    PROCEDURE (this: Application) CanRecordSounds* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 319)
    END CanRecordSounds;

    PROCEDURE (this: Application) PUTCanRecordSounds* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 319, val)
    END PUTCanRecordSounds;

    PROCEDURE (this: Application) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Application) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Application) CellDragAndDrop* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 320)
    END CellDragAndDrop;

    PROCEDURE (this: Application) PUTCellDragAndDrop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 320, val)
    END PUTCellDragAndDrop;

    PROCEDURE (this: Application) ClipboardFormats* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 321)
    END ClipboardFormats;

    PROCEDURE (this: Application) PUTClipboardFormats* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 321, val)
    END PUTClipboardFormats;

    PROCEDURE (this: Application) ColorButtons* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 365)
    END ColorButtons;

    PROCEDURE (this: Application) PUTColorButtons* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 365, val)
    END PUTColorButtons;

    PROCEDURE (this: Application) CommandUnderlines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 323)
    END CommandUnderlines;

    PROCEDURE (this: Application) PUTCommandUnderlines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 323, val)
    END PUTCommandUnderlines;

    PROCEDURE (this: Application) ConstrainNumeric* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 324)
    END ConstrainNumeric;

    PROCEDURE (this: Application) PUTConstrainNumeric* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 324, val)
    END PUTConstrainNumeric;

    PROCEDURE (this: Application) CopyObjectsWithCells* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 991)
    END CopyObjectsWithCells;

    PROCEDURE (this: Application) PUTCopyObjectsWithCells* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 991, val)
    END PUTCopyObjectsWithCells;

    PROCEDURE (this: Application) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Application) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Application) Cursor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1161)
    END Cursor;

    PROCEDURE (this: Application) PUTCursor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1161, val)
    END PUTCursor;

    PROCEDURE (this: Application) CustomListCount* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 787)
    END CustomListCount;

    PROCEDURE (this: Application) PUTCustomListCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 787, val)
    END PUTCustomListCount;

    PROCEDURE (this: Application) CutCopyMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 330)
    END CutCopyMode;

    PROCEDURE (this: Application) PUTCutCopyMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 330, val)
    END PUTCutCopyMode;

    PROCEDURE (this: Application) DataEntryMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 331)
    END DataEntryMode;

    PROCEDURE (this: Application) PUTDataEntryMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 331, val)
    END PUTDataEntryMode;

    PROCEDURE (this: Application) DDEAppReturnCode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 332)
    END DDEAppReturnCode;

    PROCEDURE (this: Application) PUTDDEAppReturnCode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 332, val)
    END PUTDDEAppReturnCode;

    PROCEDURE (this: Application) DefaultFilePath* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1038)
    END DefaultFilePath;

    PROCEDURE (this: Application) PUTDefaultFilePath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1038, val)
    END PUTDefaultFilePath;

    PROCEDURE (this: Application) DisplayAlerts* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 343)
    END DisplayAlerts;

    PROCEDURE (this: Application) PUTDisplayAlerts* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 343, val)
    END PUTDisplayAlerts;

    PROCEDURE (this: Application) DisplayClipboardWindow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 322)
    END DisplayClipboardWindow;

    PROCEDURE (this: Application) PUTDisplayClipboardWindow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 322, val)
    END PUTDisplayClipboardWindow;

    PROCEDURE (this: Application) DisplayExcel4Menus* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 927)
    END DisplayExcel4Menus;

    PROCEDURE (this: Application) PUTDisplayExcel4Menus* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 927, val)
    END PUTDisplayExcel4Menus;

    PROCEDURE (this: Application) DisplayFormulaBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 344)
    END DisplayFormulaBar;

    PROCEDURE (this: Application) PUTDisplayFormulaBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 344, val)
    END PUTDisplayFormulaBar;

    PROCEDURE (this: Application) DisplayFullScreen* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1061)
    END DisplayFullScreen;

    PROCEDURE (this: Application) PUTDisplayFullScreen* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1061, val)
    END PUTDisplayFullScreen;

    PROCEDURE (this: Application) DisplayInfoWindow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 765)
    END DisplayInfoWindow;

    PROCEDURE (this: Application) PUTDisplayInfoWindow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 765, val)
    END PUTDisplayInfoWindow;

    PROCEDURE (this: Application) DisplayNoteIndicator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 345)
    END DisplayNoteIndicator;

    PROCEDURE (this: Application) PUTDisplayNoteIndicator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 345, val)
    END PUTDisplayNoteIndicator;

    PROCEDURE (this: Application) DisplayRecentFiles* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 926)
    END DisplayRecentFiles;

    PROCEDURE (this: Application) PUTDisplayRecentFiles* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 926, val)
    END PUTDisplayRecentFiles;

    PROCEDURE (this: Application) DisplayScrollBars* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 346)
    END DisplayScrollBars;

    PROCEDURE (this: Application) PUTDisplayScrollBars* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 346, val)
    END PUTDisplayScrollBars;

    PROCEDURE (this: Application) DisplayStatusBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 347)
    END DisplayStatusBar;

    PROCEDURE (this: Application) PUTDisplayStatusBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 347, val)
    END PUTDisplayStatusBar;

    PROCEDURE (this: Application) EditDirectlyInCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 929)
    END EditDirectlyInCell;

    PROCEDURE (this: Application) PUTEditDirectlyInCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 929, val)
    END PUTEditDirectlyInCell;

    PROCEDURE (this: Application) EnableAnimations* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1180)
    END EnableAnimations;

    PROCEDURE (this: Application) PUTEnableAnimations* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1180, val)
    END PUTEnableAnimations;

    PROCEDURE (this: Application) EnableAutoComplete* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1179)
    END EnableAutoComplete;

    PROCEDURE (this: Application) PUTEnableAutoComplete* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1179, val)
    END PUTEnableAutoComplete;

    PROCEDURE (this: Application) EnableCancelKey* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1096)
    END EnableCancelKey;

    PROCEDURE (this: Application) PUTEnableCancelKey* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1096, val)
    END PUTEnableCancelKey;

    PROCEDURE (this: Application) EnableTipWizard* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1064)
    END EnableTipWizard;

    PROCEDURE (this: Application) PUTEnableTipWizard* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1064, val)
    END PUTEnableTipWizard;

    PROCEDURE (this: Application) FileConverters* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 931)
    END FileConverters;

    PROCEDURE (this: Application) PUTFileConverters* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 931, val)
    END PUTFileConverters;

    PROCEDURE (this: Application) FixedDecimal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 351)
    END FixedDecimal;

    PROCEDURE (this: Application) PUTFixedDecimal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 351, val)
    END PUTFixedDecimal;

    PROCEDURE (this: Application) FixedDecimalPlaces* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 352)
    END FixedDecimalPlaces;

    PROCEDURE (this: Application) PUTFixedDecimalPlaces* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 352, val)
    END PUTFixedDecimalPlaces;

    PROCEDURE (this: Application) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Application) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Application) IgnoreRemoteRequests* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 356)
    END IgnoreRemoteRequests;

    PROCEDURE (this: Application) PUTIgnoreRemoteRequests* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 356, val)
    END PUTIgnoreRemoteRequests;

    PROCEDURE (this: Application) Interactive* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 361)
    END Interactive;

    PROCEDURE (this: Application) PUTInteractive* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 361, val)
    END PUTInteractive;

    PROCEDURE (this: Application) International* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 362)
    END International;

    PROCEDURE (this: Application) PUTInternational* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 362, val)
    END PUTInternational;

    PROCEDURE (this: Application) Iteration* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 363)
    END Iteration;

    PROCEDURE (this: Application) PUTIteration* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 363, val)
    END PUTIteration;

    PROCEDURE (this: Application) LargeButtons* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 364)
    END LargeButtons;

    PROCEDURE (this: Application) PUTLargeButtons* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 364, val)
    END PUTLargeButtons;

    PROCEDURE (this: Application) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Application) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Application) LibraryPath* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 366)
    END LibraryPath;

    PROCEDURE (this: Application) PUTLibraryPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 366, val)
    END PUTLibraryPath;

    PROCEDURE (this: Application) MailSession* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 942)
    END MailSession;

    PROCEDURE (this: Application) PUTMailSession* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 942, val)
    END PUTMailSession;

    PROCEDURE (this: Application) MailSystem* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 971)
    END MailSystem;

    PROCEDURE (this: Application) PUTMailSystem* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 971, val)
    END PUTMailSystem;

    PROCEDURE (this: Application) MathCoprocessorAvailable* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 367)
    END MathCoprocessorAvailable;

    PROCEDURE (this: Application) PUTMathCoprocessorAvailable* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 367, val)
    END PUTMathCoprocessorAvailable;

    PROCEDURE (this: Application) MaxChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 368)
    END MaxChange;

    PROCEDURE (this: Application) PUTMaxChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 368, val)
    END PUTMaxChange;

    PROCEDURE (this: Application) MaxIterations* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 369)
    END MaxIterations;

    PROCEDURE (this: Application) PUTMaxIterations* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 369, val)
    END PUTMaxIterations;

    PROCEDURE (this: Application) MemoryFree* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 370)
    END MemoryFree;

    PROCEDURE (this: Application) PUTMemoryFree* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 370, val)
    END PUTMemoryFree;

    PROCEDURE (this: Application) MemoryTotal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 371)
    END MemoryTotal;

    PROCEDURE (this: Application) PUTMemoryTotal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 371, val)
    END PUTMemoryTotal;

    PROCEDURE (this: Application) MemoryUsed* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 372)
    END MemoryUsed;

    PROCEDURE (this: Application) PUTMemoryUsed* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 372, val)
    END PUTMemoryUsed;

    PROCEDURE (this: Application) MouseAvailable* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 373)
    END MouseAvailable;

    PROCEDURE (this: Application) PUTMouseAvailable* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 373, val)
    END PUTMouseAvailable;

    PROCEDURE (this: Application) MoveAfterReturn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 374)
    END MoveAfterReturn;

    PROCEDURE (this: Application) PUTMoveAfterReturn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 374, val)
    END PUTMoveAfterReturn;

    PROCEDURE (this: Application) MoveAfterReturnDirection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1144)
    END MoveAfterReturnDirection;

    PROCEDURE (this: Application) PUTMoveAfterReturnDirection* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1144, val)
    END PUTMoveAfterReturnDirection;

    PROCEDURE (this: Application) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Application) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Application) NetworkTemplatesPath* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 388)
    END NetworkTemplatesPath;

    PROCEDURE (this: Application) PUTNetworkTemplatesPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 388, val)
    END PUTNetworkTemplatesPath;

    PROCEDURE (this: Application) OnCalculate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 625)
    END OnCalculate;

    PROCEDURE (this: Application) PUTOnCalculate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 625, val)
    END PUTOnCalculate;

    PROCEDURE (this: Application) OnData* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 629)
    END OnData;

    PROCEDURE (this: Application) PUTOnData* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 629, val)
    END PUTOnData;

    PROCEDURE (this: Application) OnDoubleClick* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: Application) PUTOnDoubleClick* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 628, val)
    END PUTOnDoubleClick;

    PROCEDURE (this: Application) OnEntry* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 627)
    END OnEntry;

    PROCEDURE (this: Application) PUTOnEntry* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 627, val)
    END PUTOnEntry;

    PROCEDURE (this: Application) OnSheetActivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: Application) PUTOnSheetActivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1031, val)
    END PUTOnSheetActivate;

    PROCEDURE (this: Application) OnSheetDeactivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: Application) PUTOnSheetDeactivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1081, val)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: Application) OnWindow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 623)
    END OnWindow;

    PROCEDURE (this: Application) PUTOnWindow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 623, val)
    END PUTOnWindow;

    PROCEDURE (this: Application) OperatingSystem* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 375)
    END OperatingSystem;

    PROCEDURE (this: Application) PUTOperatingSystem* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 375, val)
    END PUTOperatingSystem;

    PROCEDURE (this: Application) OrganizationName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 376)
    END OrganizationName;

    PROCEDURE (this: Application) PUTOrganizationName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 376, val)
    END PUTOrganizationName;

    PROCEDURE (this: Application) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Application) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Application) Path* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 291)
    END Path;

    PROCEDURE (this: Application) PUTPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 291, val)
    END PUTPath;

    PROCEDURE (this: Application) PathSeparator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 377)
    END PathSeparator;

    PROCEDURE (this: Application) PUTPathSeparator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 377, val)
    END PUTPathSeparator;

    PROCEDURE (this: Application) PreviousSelections* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 378)
    END PreviousSelections;

    PROCEDURE (this: Application) PUTPreviousSelections* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 378, val)
    END PUTPreviousSelections;

    PROCEDURE (this: Application) PromptForSummaryInfo* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1062)
    END PromptForSummaryInfo;

    PROCEDURE (this: Application) PUTPromptForSummaryInfo* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1062, val)
    END PUTPromptForSummaryInfo;

    PROCEDURE (this: Application) RecordRelative* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 379)
    END RecordRelative;

    PROCEDURE (this: Application) PUTRecordRelative* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 379, val)
    END PUTRecordRelative;

    PROCEDURE (this: Application) ReferenceStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 380)
    END ReferenceStyle;

    PROCEDURE (this: Application) PUTReferenceStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 380, val)
    END PUTReferenceStyle;

    PROCEDURE (this: Application) RegisteredFunctions* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 775)
    END RegisteredFunctions;

    PROCEDURE (this: Application) PUTRegisteredFunctions* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 775, val)
    END PUTRegisteredFunctions;

    PROCEDURE (this: Application) ScreenUpdating* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 382)
    END ScreenUpdating;

    PROCEDURE (this: Application) PUTScreenUpdating* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 382, val)
    END PUTScreenUpdating;

    PROCEDURE (this: Application) Selection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 147)
    END Selection;

    PROCEDURE (this: Application) PUTSelection* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 147, val)
    END PUTSelection;

    PROCEDURE (this: Application) SheetsInNewWorkbook* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 993)
    END SheetsInNewWorkbook;

    PROCEDURE (this: Application) PUTSheetsInNewWorkbook* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 993, val)
    END PUTSheetsInNewWorkbook;

    PROCEDURE (this: Application) ShowToolTips* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 387)
    END ShowToolTips;

    PROCEDURE (this: Application) PUTShowToolTips* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 387, val)
    END PUTShowToolTips;

    PROCEDURE (this: Application) StandardFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 924)
    END StandardFont;

    PROCEDURE (this: Application) PUTStandardFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 924, val)
    END PUTStandardFont;

    PROCEDURE (this: Application) StandardFontSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 925)
    END StandardFontSize;

    PROCEDURE (this: Application) PUTStandardFontSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 925, val)
    END PUTStandardFontSize;

    PROCEDURE (this: Application) StartupPath* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 385)
    END StartupPath;

    PROCEDURE (this: Application) PUTStartupPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 385, val)
    END PUTStartupPath;

    PROCEDURE (this: Application) StatusBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 386)
    END StatusBar;

    PROCEDURE (this: Application) PUTStatusBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 386, val)
    END PUTStatusBar;

    PROCEDURE (this: Application) TemplatesPath* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 381)
    END TemplatesPath;

    PROCEDURE (this: Application) PUTTemplatesPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 381, val)
    END PUTTemplatesPath;

    PROCEDURE (this: Application) ThisWorkbook* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 778)
    END ThisWorkbook;

    PROCEDURE (this: Application) PUTThisWorkbook* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 778, val)
    END PUTThisWorkbook;

    PROCEDURE (this: Application) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Application) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Application) TransitionMenuKey* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 310)
    END TransitionMenuKey;

    PROCEDURE (this: Application) PUTTransitionMenuKey* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 310, val)
    END PUTTransitionMenuKey;

    PROCEDURE (this: Application) TransitionMenuKeyAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 311)
    END TransitionMenuKeyAction;

    PROCEDURE (this: Application) PUTTransitionMenuKeyAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 311, val)
    END PUTTransitionMenuKeyAction;

    PROCEDURE (this: Application) TransitionNavigKeys* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 312)
    END TransitionNavigKeys;

    PROCEDURE (this: Application) PUTTransitionNavigKeys* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 312, val)
    END PUTTransitionNavigKeys;

    PROCEDURE (this: Application) UsableHeight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 389)
    END UsableHeight;

    PROCEDURE (this: Application) PUTUsableHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 389, val)
    END PUTUsableHeight;

    PROCEDURE (this: Application) UsableWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 390)
    END UsableWidth;

    PROCEDURE (this: Application) PUTUsableWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 390, val)
    END PUTUsableWidth;

    PROCEDURE (this: Application) UserName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 391)
    END UserName;

    PROCEDURE (this: Application) PUTUserName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 391, val)
    END PUTUserName;

    PROCEDURE (this: Application) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Application) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: Application) Version* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 392)
    END Version;

    PROCEDURE (this: Application) PUTVersion* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 392, val)
    END PUTVersion;

    PROCEDURE (this: Application) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Application) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Application) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Application) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Application) WindowsForPens* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 395)
    END WindowsForPens;

    PROCEDURE (this: Application) PUTWindowsForPens* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 395, val)
    END PUTWindowsForPens;

    PROCEDURE (this: Application) WindowState* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 396)
    END WindowState;

    PROCEDURE (this: Application) PUTWindowState* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 396, val)
    END PUTWindowState;

    PROCEDURE (this: Application) _WSFunction* ((* optional *) Range: CtlT.Any; Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 31 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Range, arg[30]);
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 169, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _WSFunction;

    PROCEDURE (this: Application) Acos* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16483, ret);
        RETURN CtlC.VarAny(ret)
    END Acos;

    PROCEDURE (this: Application) Acosh* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16617, ret);
        RETURN CtlC.VarAny(ret)
    END Acosh;

    PROCEDURE (this: Application) ActivateMicrosoftApp* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1095, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ActivateMicrosoftApp;

    PROCEDURE (this: Application) AddChartAutoFormat* (Chart: CtlT.Any; Name: CtlT.Any; (* optional *) Description: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Chart, arg[2]);
        CtlC.AnyVar(Name, arg[1]);
        CtlC.AnyVar(Description, arg[0]);
        CtlC.CallParMethod(this, 216, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddChartAutoFormat;

    PROCEDURE (this: Application) AddCustomList* (ListArray: CtlT.Any; (* optional *) ByRow: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ListArray, arg[1]);
        CtlC.AnyVar(ByRow, arg[0]);
        CtlC.CallParMethod(this, 780, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddCustomList;

    PROCEDURE (this: Application) AddIns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 549, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddIns;

    PROCEDURE (this: Application) And* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16420, ret);
        RETURN CtlC.VarAny(ret)
    END And;

    PROCEDURE (this: Application) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Application) Asin* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16482, ret);
        RETURN CtlC.VarAny(ret)
    END Asin;

    PROCEDURE (this: Application) Asinh* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16616, ret);
        RETURN CtlC.VarAny(ret)
    END Asinh;

    PROCEDURE (this: Application) Atan2* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16481, ret);
        RETURN CtlC.VarAny(ret)
    END Atan2;

    PROCEDURE (this: Application) Atanh* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16618, ret);
        RETURN CtlC.VarAny(ret)
    END Atanh;

    PROCEDURE (this: Application) AveDev* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16653, ret);
        RETURN CtlC.VarAny(ret)
    END AveDev;

    PROCEDURE (this: Application) Average* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16389, ret);
        RETURN CtlC.VarAny(ret)
    END Average;

    PROCEDURE (this: Application) BetaDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16654, ret);
        RETURN CtlC.VarAny(ret)
    END BetaDist;

    PROCEDURE (this: Application) BetaInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16656, ret);
        RETURN CtlC.VarAny(ret)
    END BetaInv;

    PROCEDURE (this: Application) BinomDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16657, ret);
        RETURN CtlC.VarAny(ret)
    END BinomDist;

    PROCEDURE (this: Application) Calculate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 279, ret);
        RETURN CtlC.VarAny(ret)
    END Calculate;

    PROCEDURE (this: Application) Ceiling* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16672, ret);
        RETURN CtlC.VarAny(ret)
    END Ceiling;

    PROCEDURE (this: Application) Cells* ((* optional *) RowIndex: CtlT.Any; ColumnIndex: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[1]);
        CtlC.AnyVar(ColumnIndex, arg[0]);
        CtlC.CallParMethod(this, 238, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Cells;

    PROCEDURE (this: Application) CentimetersToPoints* (Centimeters: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Centimeters, arg[0]);
        CtlC.CallParMethod(this, 1086, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CentimetersToPoints;

    PROCEDURE (this: Application) Charts* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 121, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Charts;

    PROCEDURE (this: Application) CheckSpelling* (Word: CtlT.Any; (* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Word, arg[2]);
        CtlC.AnyVar(CustomDictionary, arg[1]);
        CtlC.AnyVar(IgnoreUppercase, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Application) ChiDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16658, ret);
        RETURN CtlC.VarAny(ret)
    END ChiDist;

    PROCEDURE (this: Application) ChiInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16659, ret);
        RETURN CtlC.VarAny(ret)
    END ChiInv;

    PROCEDURE (this: Application) ChiTest* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16690, ret);
        RETURN CtlC.VarAny(ret)
    END ChiTest;

    PROCEDURE (this: Application) Choose* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16484, ret);
        RETURN CtlC.VarAny(ret)
    END Choose;

    PROCEDURE (this: Application) Clean* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16546, ret);
        RETURN CtlC.VarAny(ret)
    END Clean;

    PROCEDURE (this: Application) Columns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 241, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Columns;

    PROCEDURE (this: Application) Combin* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16660, ret);
        RETURN CtlC.VarAny(ret)
    END Combin;

    PROCEDURE (this: Application) Confidence* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16661, ret);
        RETURN CtlC.VarAny(ret)
    END Confidence;

    PROCEDURE (this: Application) ConvertFormula* (Formula: CtlT.Any; FromReferenceStyle: CtlT.Any; (* optional *) ToReferenceStyle: CtlT.Any; ToAbsolute: CtlT.Any; RelativeTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Formula, arg[4]);
        CtlC.AnyVar(FromReferenceStyle, arg[3]);
        CtlC.AnyVar(ToReferenceStyle, arg[2]);
        CtlC.AnyVar(ToAbsolute, arg[1]);
        CtlC.AnyVar(RelativeTo, arg[0]);
        CtlC.CallParMethod(this, 325, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ConvertFormula;

    PROCEDURE (this: Application) Correl* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16691, ret);
        RETURN CtlC.VarAny(ret)
    END Correl;

    PROCEDURE (this: Application) Cosh* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16614, ret);
        RETURN CtlC.VarAny(ret)
    END Cosh;

    PROCEDURE (this: Application) Count* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16384, ret);
        RETURN CtlC.VarAny(ret)
    END Count;

    PROCEDURE (this: Application) CountA* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16553, ret);
        RETURN CtlC.VarAny(ret)
    END CountA;

    PROCEDURE (this: Application) CountBlank* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16731, ret);
        RETURN CtlC.VarAny(ret)
    END CountBlank;

    PROCEDURE (this: Application) CountIf* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16730, ret);
        RETURN CtlC.VarAny(ret)
    END CountIf;

    PROCEDURE (this: Application) Covar* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16692, ret);
        RETURN CtlC.VarAny(ret)
    END Covar;

    PROCEDURE (this: Application) CritBinom* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16662, ret);
        RETURN CtlC.VarAny(ret)
    END CritBinom;

    PROCEDURE (this: Application) DAverage* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16426, ret);
        RETURN CtlC.VarAny(ret)
    END DAverage;

    PROCEDURE (this: Application) Days360* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16604, ret);
        RETURN CtlC.VarAny(ret)
    END Days360;

    PROCEDURE (this: Application) Db* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16631, ret);
        RETURN CtlC.VarAny(ret)
    END Db;

    PROCEDURE (this: Application) DCount* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16424, ret);
        RETURN CtlC.VarAny(ret)
    END DCount;

    PROCEDURE (this: Application) DCountA* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16583, ret);
        RETURN CtlC.VarAny(ret)
    END DCountA;

    PROCEDURE (this: Application) Ddb* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16528, ret);
        RETURN CtlC.VarAny(ret)
    END Ddb;

    PROCEDURE (this: Application) DDEExecute* (Channel: CtlT.Any; String: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[1]);
        CtlC.AnyVar(String, arg[0]);
        CtlC.CallParMethod(this, 333, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDEExecute;

    PROCEDURE (this: Application) DDEInitiate* (App: CtlT.Any; Topic: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(App, arg[1]);
        CtlC.AnyVar(Topic, arg[0]);
        CtlC.CallParMethod(this, 334, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDEInitiate;

    PROCEDURE (this: Application) DDEPoke* (Channel: CtlT.Any; Item: CtlT.Any; Data: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[2]);
        CtlC.AnyVar(Item, arg[1]);
        CtlC.AnyVar(Data, arg[0]);
        CtlC.CallParMethod(this, 335, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDEPoke;

    PROCEDURE (this: Application) DDERequest* (Channel: CtlT.Any; Item: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[1]);
        CtlC.AnyVar(Item, arg[0]);
        CtlC.CallParMethod(this, 336, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDERequest;

    PROCEDURE (this: Application) DDETerminate* (Channel: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Channel, arg[0]);
        CtlC.CallParMethod(this, 337, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DDETerminate;

    PROCEDURE (this: Application) Degrees* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16727, ret);
        RETURN CtlC.VarAny(ret)
    END Degrees;

    PROCEDURE (this: Application) DeleteChartAutoFormat* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 217, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DeleteChartAutoFormat;

    PROCEDURE (this: Application) DeleteCustomList* (ListNum: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ListNum, arg[0]);
        CtlC.CallParMethod(this, 783, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DeleteCustomList;

    PROCEDURE (this: Application) DevSq* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16702, ret);
        RETURN CtlC.VarAny(ret)
    END DevSq;

    PROCEDURE (this: Application) DGet* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16619, ret);
        RETURN CtlC.VarAny(ret)
    END DGet;

    PROCEDURE (this: Application) Dialogs* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 761, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Dialogs;

    PROCEDURE (this: Application) DialogSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 764, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DialogSheets;

    PROCEDURE (this: Application) DMax* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16428, ret);
        RETURN CtlC.VarAny(ret)
    END DMax;

    PROCEDURE (this: Application) DMin* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16427, ret);
        RETURN CtlC.VarAny(ret)
    END DMin;

    PROCEDURE (this: Application) Dollar* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16397, ret);
        RETURN CtlC.VarAny(ret)
    END Dollar;

    PROCEDURE (this: Application) DoubleClick* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 349, ret);
        RETURN CtlC.VarAny(ret)
    END DoubleClick;

    PROCEDURE (this: Application) DProduct* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16573, ret);
        RETURN CtlC.VarAny(ret)
    END DProduct;

    PROCEDURE (this: Application) DStDev* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16429, ret);
        RETURN CtlC.VarAny(ret)
    END DStDev;

    PROCEDURE (this: Application) DStDevP* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16579, ret);
        RETURN CtlC.VarAny(ret)
    END DStDevP;

    PROCEDURE (this: Application) DSum* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16425, ret);
        RETURN CtlC.VarAny(ret)
    END DSum;

    PROCEDURE (this: Application) DVar* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16431, ret);
        RETURN CtlC.VarAny(ret)
    END DVar;

    PROCEDURE (this: Application) DVarP* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16580, ret);
        RETURN CtlC.VarAny(ret)
    END DVarP;

    PROCEDURE (this: Application) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: Application) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: Application) Even* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16663, ret);
        RETURN CtlC.VarAny(ret)
    END Even;

    PROCEDURE (this: Application) Excel4IntlMacroSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 581, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Excel4IntlMacroSheets;

    PROCEDURE (this: Application) Excel4MacroSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 579, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Excel4MacroSheets;

    PROCEDURE (this: Application) ExecuteExcel4Macro* (String: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(String, arg[0]);
        CtlC.CallParMethod(this, 350, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ExecuteExcel4Macro;

    PROCEDURE (this: Application) ExponDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16664, ret);
        RETURN CtlC.VarAny(ret)
    END ExponDist;

    PROCEDURE (this: Application) Fact* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16568, ret);
        RETURN CtlC.VarAny(ret)
    END Fact;

    PROCEDURE (this: Application) FDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16665, ret);
        RETURN CtlC.VarAny(ret)
    END FDist;

    PROCEDURE (this: Application) Find* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16508, ret);
        RETURN CtlC.VarAny(ret)
    END Find;

    PROCEDURE (this: Application) FindB* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16589, ret);
        RETURN CtlC.VarAny(ret)
    END FindB;

    PROCEDURE (this: Application) FindFile* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1068, ret);
        RETURN CtlC.VarAny(ret)
    END FindFile;

    PROCEDURE (this: Application) FInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16666, ret);
        RETURN CtlC.VarAny(ret)
    END FInv;

    PROCEDURE (this: Application) Fisher* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16667, ret);
        RETURN CtlC.VarAny(ret)
    END Fisher;

    PROCEDURE (this: Application) FisherInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16668, ret);
        RETURN CtlC.VarAny(ret)
    END FisherInv;

    PROCEDURE (this: Application) Fixed* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16398, ret);
        RETURN CtlC.VarAny(ret)
    END Fixed;

    PROCEDURE (this: Application) Floor* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16669, ret);
        RETURN CtlC.VarAny(ret)
    END Floor;

    PROCEDURE (this: Application) Forecast* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16693, ret);
        RETURN CtlC.VarAny(ret)
    END Forecast;

    PROCEDURE (this: Application) Frequency* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16636, ret);
        RETURN CtlC.VarAny(ret)
    END Frequency;

    PROCEDURE (this: Application) FTest* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16694, ret);
        RETURN CtlC.VarAny(ret)
    END FTest;

    PROCEDURE (this: Application) Fv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16441, ret);
        RETURN CtlC.VarAny(ret)
    END Fv;

    PROCEDURE (this: Application) GammaDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16670, ret);
        RETURN CtlC.VarAny(ret)
    END GammaDist;

    PROCEDURE (this: Application) GammaInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16671, ret);
        RETURN CtlC.VarAny(ret)
    END GammaInv;

    PROCEDURE (this: Application) GammaLn* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16655, ret);
        RETURN CtlC.VarAny(ret)
    END GammaLn;

    PROCEDURE (this: Application) GeoMean* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16703, ret);
        RETURN CtlC.VarAny(ret)
    END GeoMean;

    PROCEDURE (this: Application) GetCustomListContents* (ListNum: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ListNum, arg[0]);
        CtlC.CallParMethod(this, 786, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GetCustomListContents;

    PROCEDURE (this: Application) GetCustomListNum* (ListArray: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ListArray, arg[0]);
        CtlC.CallParMethod(this, 785, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GetCustomListNum;

    PROCEDURE (this: Application) GetOpenFilename* ((* optional *) FileFilter: CtlT.Any; FilterIndex: CtlT.Any; Title: CtlT.Any; ButtonText: CtlT.Any; MultiSelect: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(FileFilter, arg[4]);
        CtlC.AnyVar(FilterIndex, arg[3]);
        CtlC.AnyVar(Title, arg[2]);
        CtlC.AnyVar(ButtonText, arg[1]);
        CtlC.AnyVar(MultiSelect, arg[0]);
        CtlC.CallParMethod(this, 1075, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GetOpenFilename;

    PROCEDURE (this: Application) GetSaveAsFilename* ((* optional *) InitialFilename: CtlT.Any; FileFilter: CtlT.Any; FilterIndex: CtlT.Any; Title: CtlT.Any; ButtonText: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(InitialFilename, arg[4]);
        CtlC.AnyVar(FileFilter, arg[3]);
        CtlC.AnyVar(FilterIndex, arg[2]);
        CtlC.AnyVar(Title, arg[1]);
        CtlC.AnyVar(ButtonText, arg[0]);
        CtlC.CallParMethod(this, 1076, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GetSaveAsFilename;

    PROCEDURE (this: Application) Goto* ((* optional *) Reference: CtlT.Any; Scroll: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Reference, arg[1]);
        CtlC.AnyVar(Scroll, arg[0]);
        CtlC.CallParMethod(this, 475, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Goto;

    PROCEDURE (this: Application) Growth* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16436, ret);
        RETURN CtlC.VarAny(ret)
    END Growth;

    PROCEDURE (this: Application) HarMean* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16704, ret);
        RETURN CtlC.VarAny(ret)
    END HarMean;

    PROCEDURE (this: Application) Help* ((* optional *) HelpFile: CtlT.Any; HelpContextID: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(HelpFile, arg[1]);
        CtlC.AnyVar(HelpContextID, arg[0]);
        CtlC.CallParMethod(this, 354, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Help;

    PROCEDURE (this: Application) HLookup* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16485, ret);
        RETURN CtlC.VarAny(ret)
    END HLookup;

    PROCEDURE (this: Application) HypGeomDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16673, ret);
        RETURN CtlC.VarAny(ret)
    END HypGeomDist;

    PROCEDURE (this: Application) InchesToPoints* (Inches: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Inches, arg[0]);
        CtlC.CallParMethod(this, 1087, arg, ret);
        RETURN CtlC.VarAny(ret)
    END InchesToPoints;

    PROCEDURE (this: Application) Index* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16413, ret);
        RETURN CtlC.VarAny(ret)
    END Index;

    PROCEDURE (this: Application) InputBox* (Prompt: CtlT.Any; (* optional *) Title: CtlT.Any; Default: CtlT.Any; Left: CtlT.Any; Top: CtlT.Any; HelpFile: CtlT.Any; HelpContextID: CtlT.Any; Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Prompt, arg[7]);
        CtlC.AnyVar(Title, arg[6]);
        CtlC.AnyVar(Default, arg[5]);
        CtlC.AnyVar(Left, arg[4]);
        CtlC.AnyVar(Top, arg[3]);
        CtlC.AnyVar(HelpFile, arg[2]);
        CtlC.AnyVar(HelpContextID, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 357, arg, ret);
        RETURN CtlC.VarAny(ret)
    END InputBox;

    PROCEDURE (this: Application) Intercept* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16695, ret);
        RETURN CtlC.VarAny(ret)
    END Intercept;

    PROCEDURE (this: Application) Intersect* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 766, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Intersect;

    PROCEDURE (this: Application) Ipmt* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16551, ret);
        RETURN CtlC.VarAny(ret)
    END Ipmt;

    PROCEDURE (this: Application) Irr* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16446, ret);
        RETURN CtlC.VarAny(ret)
    END Irr;

    PROCEDURE (this: Application) IsErr* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16510, ret);
        RETURN CtlC.VarAny(ret)
    END IsErr;

    PROCEDURE (this: Application) IsError* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16387, ret);
        RETURN CtlC.VarAny(ret)
    END IsError;

    PROCEDURE (this: Application) IsLogical* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16582, ret);
        RETURN CtlC.VarAny(ret)
    END IsLogical;

    PROCEDURE (this: Application) IsNA* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16386, ret);
        RETURN CtlC.VarAny(ret)
    END IsNA;

    PROCEDURE (this: Application) IsNonText* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16574, ret);
        RETURN CtlC.VarAny(ret)
    END IsNonText;

    PROCEDURE (this: Application) IsNumber* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16512, ret);
        RETURN CtlC.VarAny(ret)
    END IsNumber;

    PROCEDURE (this: Application) Ispmt* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16734, ret);
        RETURN CtlC.VarAny(ret)
    END Ispmt;

    PROCEDURE (this: Application) IsText* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16511, ret);
        RETURN CtlC.VarAny(ret)
    END IsText;

    PROCEDURE (this: Application) Kurt* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16706, ret);
        RETURN CtlC.VarAny(ret)
    END Kurt;

    PROCEDURE (this: Application) Large* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16709, ret);
        RETURN CtlC.VarAny(ret)
    END Large;

    PROCEDURE (this: Application) LinEst* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16433, ret);
        RETURN CtlC.VarAny(ret)
    END LinEst;

    PROCEDURE (this: Application) Ln* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16406, ret);
        RETURN CtlC.VarAny(ret)
    END Ln;

    PROCEDURE (this: Application) Log* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16493, ret);
        RETURN CtlC.VarAny(ret)
    END Log;

    PROCEDURE (this: Application) Log10* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16407, ret);
        RETURN CtlC.VarAny(ret)
    END Log10;

    PROCEDURE (this: Application) LogEst* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16435, ret);
        RETURN CtlC.VarAny(ret)
    END LogEst;

    PROCEDURE (this: Application) LogInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16675, ret);
        RETURN CtlC.VarAny(ret)
    END LogInv;

    PROCEDURE (this: Application) LogNormDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16674, ret);
        RETURN CtlC.VarAny(ret)
    END LogNormDist;

    PROCEDURE (this: Application) Lookup* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16412, ret);
        RETURN CtlC.VarAny(ret)
    END Lookup;

    PROCEDURE (this: Application) MacroOptions* ((* optional *) Macro: CtlT.Any; Description: CtlT.Any; HasMenu: CtlT.Any; MenuText: CtlT.Any; HasShortcutKey: CtlT.Any; ShortcutKey: CtlT.Any; Category: CtlT.Any; StatusBar: CtlT.Any; HelpContextID: CtlT.Any; HelpFile: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 10 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[9]);
        CtlC.AnyVar(Description, arg[8]);
        CtlC.AnyVar(HasMenu, arg[7]);
        CtlC.AnyVar(MenuText, arg[6]);
        CtlC.AnyVar(HasShortcutKey, arg[5]);
        CtlC.AnyVar(ShortcutKey, arg[4]);
        CtlC.AnyVar(Category, arg[3]);
        CtlC.AnyVar(StatusBar, arg[2]);
        CtlC.AnyVar(HelpContextID, arg[1]);
        CtlC.AnyVar(HelpFile, arg[0]);
        CtlC.CallParMethod(this, 1135, arg, ret);
        RETURN CtlC.VarAny(ret)
    END MacroOptions;

    PROCEDURE (this: Application) MailLogoff* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 945, ret);
        RETURN CtlC.VarAny(ret)
    END MailLogoff;

    PROCEDURE (this: Application) MailLogon* ((* optional *) Name: CtlT.Any; Password: CtlT.Any; DownloadNewMail: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[2]);
        CtlC.AnyVar(Password, arg[1]);
        CtlC.AnyVar(DownloadNewMail, arg[0]);
        CtlC.CallParMethod(this, 943, arg, ret);
        RETURN CtlC.VarAny(ret)
    END MailLogon;

    PROCEDURE (this: Application) Match* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16448, ret);
        RETURN CtlC.VarAny(ret)
    END Match;

    PROCEDURE (this: Application) Max* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16391, ret);
        RETURN CtlC.VarAny(ret)
    END Max;

    PROCEDURE (this: Application) MDeterm* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16547, ret);
        RETURN CtlC.VarAny(ret)
    END MDeterm;

    PROCEDURE (this: Application) Median* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16611, ret);
        RETURN CtlC.VarAny(ret)
    END Median;

    PROCEDURE (this: Application) MenuBars* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 589, arg, ret);
        RETURN CtlC.VarAny(ret)
    END MenuBars;

    PROCEDURE (this: Application) Min* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16390, ret);
        RETURN CtlC.VarAny(ret)
    END Min;

    PROCEDURE (this: Application) MInverse* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16548, ret);
        RETURN CtlC.VarAny(ret)
    END MInverse;

    PROCEDURE (this: Application) MIrr* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16445, ret);
        RETURN CtlC.VarAny(ret)
    END MIrr;

    PROCEDURE (this: Application) MMult* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16549, ret);
        RETURN CtlC.VarAny(ret)
    END MMult;

    PROCEDURE (this: Application) Mode* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16714, ret);
        RETURN CtlC.VarAny(ret)
    END Mode;

    PROCEDURE (this: Application) Modules* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 582, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Modules;

    PROCEDURE (this: Application) Names* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 442, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Names;

    PROCEDURE (this: Application) NegBinomDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16676, ret);
        RETURN CtlC.VarAny(ret)
    END NegBinomDist;

    PROCEDURE (this: Application) NextLetter* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 972, ret);
        RETURN CtlC.VarAny(ret)
    END NextLetter;

    PROCEDURE (this: Application) NormDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16677, ret);
        RETURN CtlC.VarAny(ret)
    END NormDist;

    PROCEDURE (this: Application) NormInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16679, ret);
        RETURN CtlC.VarAny(ret)
    END NormInv;

    PROCEDURE (this: Application) NormSDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16678, ret);
        RETURN CtlC.VarAny(ret)
    END NormSDist;

    PROCEDURE (this: Application) NormSInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16680, ret);
        RETURN CtlC.VarAny(ret)
    END NormSInv;

    PROCEDURE (this: Application) NPer* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16442, ret);
        RETURN CtlC.VarAny(ret)
    END NPer;

    PROCEDURE (this: Application) Npv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16395, ret);
        RETURN CtlC.VarAny(ret)
    END Npv;

    PROCEDURE (this: Application) Odd* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16682, ret);
        RETURN CtlC.VarAny(ret)
    END Odd;

    PROCEDURE (this: Application) OnKey* (Key: CtlT.Any; (* optional *) Procedure: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Key, arg[1]);
        CtlC.AnyVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 626, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OnKey;

    PROCEDURE (this: Application) OnRepeat* (Text: CtlT.Any; Procedure: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 769, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OnRepeat;

    PROCEDURE (this: Application) OnTime* (EarliestTime: CtlT.Any; Procedure: CtlT.Any; (* optional *) LatestTime: CtlT.Any; Schedule: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(EarliestTime, arg[3]);
        CtlC.AnyVar(Procedure, arg[2]);
        CtlC.AnyVar(LatestTime, arg[1]);
        CtlC.AnyVar(Schedule, arg[0]);
        CtlC.CallParMethod(this, 624, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OnTime;

    PROCEDURE (this: Application) OnUndo* (Text: CtlT.Any; Procedure: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 770, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OnUndo;

    PROCEDURE (this: Application) Or* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16421, ret);
        RETURN CtlC.VarAny(ret)
    END Or;

    PROCEDURE (this: Application) Pearson* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16696, ret);
        RETURN CtlC.VarAny(ret)
    END Pearson;

    PROCEDURE (this: Application) Percentile* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16712, ret);
        RETURN CtlC.VarAny(ret)
    END Percentile;

    PROCEDURE (this: Application) PercentRank* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16713, ret);
        RETURN CtlC.VarAny(ret)
    END PercentRank;

    PROCEDURE (this: Application) Permut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16683, ret);
        RETURN CtlC.VarAny(ret)
    END Permut;

    PROCEDURE (this: Application) Pi* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16403, ret);
        RETURN CtlC.VarAny(ret)
    END Pi;

    PROCEDURE (this: Application) Pmt* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16443, ret);
        RETURN CtlC.VarAny(ret)
    END Pmt;

    PROCEDURE (this: Application) Poisson* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16684, ret);
        RETURN CtlC.VarAny(ret)
    END Poisson;

    PROCEDURE (this: Application) Power* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16721, ret);
        RETURN CtlC.VarAny(ret)
    END Power;

    PROCEDURE (this: Application) Ppmt* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16552, ret);
        RETURN CtlC.VarAny(ret)
    END Ppmt;

    PROCEDURE (this: Application) Prob* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16701, ret);
        RETURN CtlC.VarAny(ret)
    END Prob;

    PROCEDURE (this: Application) Product* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16567, ret);
        RETURN CtlC.VarAny(ret)
    END Product;

    PROCEDURE (this: Application) Proper* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16498, ret);
        RETURN CtlC.VarAny(ret)
    END Proper;

    PROCEDURE (this: Application) Pv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16440, ret);
        RETURN CtlC.VarAny(ret)
    END Pv;

    PROCEDURE (this: Application) Quartile* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16711, ret);
        RETURN CtlC.VarAny(ret)
    END Quartile;

    PROCEDURE (this: Application) Quit* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 302, ret);
        RETURN CtlC.VarAny(ret)
    END Quit;

    PROCEDURE (this: Application) Radians* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16726, ret);
        RETURN CtlC.VarAny(ret)
    END Radians;

    PROCEDURE (this: Application) Range* ((* optional *) Cell1: CtlT.Any; Cell2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallParMethod(this, 197, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Range;

    PROCEDURE (this: Application) Rank* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16600, ret);
        RETURN CtlC.VarAny(ret)
    END Rank;

    PROCEDURE (this: Application) Rate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16444, ret);
        RETURN CtlC.VarAny(ret)
    END Rate;

    PROCEDURE (this: Application) RecordMacro* ((* optional *) BasicCode: CtlT.Any; XlmCode: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(BasicCode, arg[1]);
        CtlC.AnyVar(XlmCode, arg[0]);
        CtlC.CallParMethod(this, 773, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RecordMacro;

    PROCEDURE (this: Application) RegisterXLL* (Filename: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 30, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RegisterXLL;

    PROCEDURE (this: Application) Repeat* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 301, ret);
        RETURN CtlC.VarAny(ret)
    END Repeat;

    PROCEDURE (this: Application) Replace* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16503, ret);
        RETURN CtlC.VarAny(ret)
    END Replace;

    PROCEDURE (this: Application) ReplaceB* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16591, ret);
        RETURN CtlC.VarAny(ret)
    END ReplaceB;

    PROCEDURE (this: Application) Rept* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16414, ret);
        RETURN CtlC.VarAny(ret)
    END Rept;

    PROCEDURE (this: Application) ResetTipWizard* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 928, ret);
        RETURN CtlC.VarAny(ret)
    END ResetTipWizard;

    PROCEDURE (this: Application) Roman* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16738, ret);
        RETURN CtlC.VarAny(ret)
    END Roman;

    PROCEDURE (this: Application) Round* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16411, ret);
        RETURN CtlC.VarAny(ret)
    END Round;

    PROCEDURE (this: Application) RoundDown* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16597, ret);
        RETURN CtlC.VarAny(ret)
    END RoundDown;

    PROCEDURE (this: Application) RoundUp* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16596, ret);
        RETURN CtlC.VarAny(ret)
    END RoundUp;

    PROCEDURE (this: Application) Rows* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 258, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Rows;

    PROCEDURE (this: Application) RSq* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16697, ret);
        RETURN CtlC.VarAny(ret)
    END RSq;

    PROCEDURE (this: Application) Run* ((* optional *) Macro: CtlT.Any; Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 31 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Macro, arg[30]);
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 259, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Run;

    PROCEDURE (this: Application) Save* ((* optional *) Filename: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 283, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Save;

    PROCEDURE (this: Application) Search* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16466, ret);
        RETURN CtlC.VarAny(ret)
    END Search;

    PROCEDURE (this: Application) SearchB* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16590, ret);
        RETURN CtlC.VarAny(ret)
    END SearchB;

    PROCEDURE (this: Application) SendKeys* (Keys: CtlT.Any; (* optional *) Wait: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Keys, arg[1]);
        CtlC.AnyVar(Wait, arg[0]);
        CtlC.CallParMethod(this, 383, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SendKeys;

    PROCEDURE (this: Application) SetDefaultChart* ((* optional *) FormatName: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(FormatName, arg[0]);
        CtlC.CallParMethod(this, 219, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SetDefaultChart;

    PROCEDURE (this: Application) Sheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 485, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Sheets;

    PROCEDURE (this: Application) ShortcutMenus* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 776, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ShortcutMenus;

    PROCEDURE (this: Application) Sinh* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16613, ret);
        RETURN CtlC.VarAny(ret)
    END Sinh;

    PROCEDURE (this: Application) Skew* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16707, ret);
        RETURN CtlC.VarAny(ret)
    END Skew;

    PROCEDURE (this: Application) Sln* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16526, ret);
        RETURN CtlC.VarAny(ret)
    END Sln;

    PROCEDURE (this: Application) Slope* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16699, ret);
        RETURN CtlC.VarAny(ret)
    END Slope;

    PROCEDURE (this: Application) Small* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16710, ret);
        RETURN CtlC.VarAny(ret)
    END Small;

    PROCEDURE (this: Application) Standardize* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16681, ret);
        RETURN CtlC.VarAny(ret)
    END Standardize;

    PROCEDURE (this: Application) StDev* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16396, ret);
        RETURN CtlC.VarAny(ret)
    END StDev;

    PROCEDURE (this: Application) StDevP* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16577, ret);
        RETURN CtlC.VarAny(ret)
    END StDevP;

    PROCEDURE (this: Application) StEyx* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16698, ret);
        RETURN CtlC.VarAny(ret)
    END StEyx;

    PROCEDURE (this: Application) Substitute* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16504, ret);
        RETURN CtlC.VarAny(ret)
    END Substitute;

    PROCEDURE (this: Application) Subtotal* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16728, ret);
        RETURN CtlC.VarAny(ret)
    END Subtotal;

    PROCEDURE (this: Application) Sum* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16388, ret);
        RETURN CtlC.VarAny(ret)
    END Sum;

    PROCEDURE (this: Application) SumIf* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16729, ret);
        RETURN CtlC.VarAny(ret)
    END SumIf;

    PROCEDURE (this: Application) SumProduct* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16612, ret);
        RETURN CtlC.VarAny(ret)
    END SumProduct;

    PROCEDURE (this: Application) SumSq* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16705, ret);
        RETURN CtlC.VarAny(ret)
    END SumSq;

    PROCEDURE (this: Application) SumX2MY2* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16688, ret);
        RETURN CtlC.VarAny(ret)
    END SumX2MY2;

    PROCEDURE (this: Application) SumX2PY2* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16689, ret);
        RETURN CtlC.VarAny(ret)
    END SumX2PY2;

    PROCEDURE (this: Application) SumXMY2* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16687, ret);
        RETURN CtlC.VarAny(ret)
    END SumXMY2;

    PROCEDURE (this: Application) Syd* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16527, ret);
        RETURN CtlC.VarAny(ret)
    END Syd;

    PROCEDURE (this: Application) Tanh* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16615, ret);
        RETURN CtlC.VarAny(ret)
    END Tanh;

    PROCEDURE (this: Application) TDist* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16685, ret);
        RETURN CtlC.VarAny(ret)
    END TDist;

    PROCEDURE (this: Application) Text* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16432, ret);
        RETURN CtlC.VarAny(ret)
    END Text;

    PROCEDURE (this: Application) TInv* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16716, ret);
        RETURN CtlC.VarAny(ret)
    END TInv;

    PROCEDURE (this: Application) Toolbars* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 552, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Toolbars;

    PROCEDURE (this: Application) Transpose* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16467, ret);
        RETURN CtlC.VarAny(ret)
    END Transpose;

    PROCEDURE (this: Application) Trend* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16434, ret);
        RETURN CtlC.VarAny(ret)
    END Trend;

    PROCEDURE (this: Application) Trim* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16502, ret);
        RETURN CtlC.VarAny(ret)
    END Trim;

    PROCEDURE (this: Application) TrimMean* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16715, ret);
        RETURN CtlC.VarAny(ret)
    END TrimMean;

    PROCEDURE (this: Application) TTest* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16700, ret);
        RETURN CtlC.VarAny(ret)
    END TTest;

    PROCEDURE (this: Application) Undo* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 303, ret);
        RETURN CtlC.VarAny(ret)
    END Undo;

    PROCEDURE (this: Application) Union* (Arg1: CtlT.Any; Arg2: CtlT.Any; (* optional *) Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 779, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Union;

    PROCEDURE (this: Application) USDollar* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16588, ret);
        RETURN CtlC.VarAny(ret)
    END USDollar;

    PROCEDURE (this: Application) Var* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16430, ret);
        RETURN CtlC.VarAny(ret)
    END Var;

    PROCEDURE (this: Application) VarP* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16578, ret);
        RETURN CtlC.VarAny(ret)
    END VarP;

    PROCEDURE (this: Application) Vdb* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16606, ret);
        RETURN CtlC.VarAny(ret)
    END Vdb;

    PROCEDURE (this: Application) VLookup* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16486, ret);
        RETURN CtlC.VarAny(ret)
    END VLookup;

    PROCEDURE (this: Application) Volatile* ((* optional *) Volatile: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Volatile, arg[0]);
        CtlC.CallParMethod(this, 788, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Volatile;

    PROCEDURE (this: Application) Wait* (Time: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Time, arg[0]);
        CtlC.CallParMethod(this, 393, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Wait;

    PROCEDURE (this: Application) Weekday* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16454, ret);
        RETURN CtlC.VarAny(ret)
    END Weekday;

    PROCEDURE (this: Application) Weibull* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16686, ret);
        RETURN CtlC.VarAny(ret)
    END Weibull;

    PROCEDURE (this: Application) Windows* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 430, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Windows;

    PROCEDURE (this: Application) Workbooks* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 572, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Workbooks;

    PROCEDURE (this: Application) Worksheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 494, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Worksheets;

    PROCEDURE (this: Application) ZTest* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 16708, ret);
        RETURN CtlC.VarAny(ret)
    END ZTest;


    (* ---------- Style ---------- *)

    PROCEDURE (this: Style) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: Style) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: Style) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Style) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Style) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: Style) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: Style) FormulaHidden* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 262)
    END FormulaHidden;

    PROCEDURE (this: Style) PUTFormulaHidden* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 262, val)
    END PUTFormulaHidden;

    PROCEDURE (this: Style) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Style) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Style) IncludeAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 413)
    END IncludeAlignment;

    PROCEDURE (this: Style) PUTIncludeAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 413, val)
    END PUTIncludeAlignment;

    PROCEDURE (this: Style) IncludeBorder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 414)
    END IncludeBorder;

    PROCEDURE (this: Style) PUTIncludeBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 414, val)
    END PUTIncludeBorder;

    PROCEDURE (this: Style) IncludeFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 415)
    END IncludeFont;

    PROCEDURE (this: Style) PUTIncludeFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 415, val)
    END PUTIncludeFont;

    PROCEDURE (this: Style) IncludeNumber* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 416)
    END IncludeNumber;

    PROCEDURE (this: Style) PUTIncludeNumber* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 416, val)
    END PUTIncludeNumber;

    PROCEDURE (this: Style) IncludePatterns* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 417)
    END IncludePatterns;

    PROCEDURE (this: Style) PUTIncludePatterns* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 417, val)
    END PUTIncludePatterns;

    PROCEDURE (this: Style) IncludeProtection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 418)
    END IncludeProtection;

    PROCEDURE (this: Style) PUTIncludeProtection* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 418, val)
    END PUTIncludeProtection;

    PROCEDURE (this: Style) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Style) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Style) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Style) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Style) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Style) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Style) NameLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 937)
    END NameLocal;

    PROCEDURE (this: Style) PUTNameLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 937, val)
    END PUTNameLocal;

    PROCEDURE (this: Style) NumberFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 193)
    END NumberFormat;

    PROCEDURE (this: Style) PUTNumberFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 193, val)
    END PUTNumberFormat;

    PROCEDURE (this: Style) NumberFormatLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1097)
    END NumberFormatLocal;

    PROCEDURE (this: Style) PUTNumberFormatLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1097, val)
    END PUTNumberFormatLocal;

    PROCEDURE (this: Style) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Style) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: Style) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Style) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Style) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Style) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: Style) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Style) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: Style) WrapText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 276)
    END WrapText;

    PROCEDURE (this: Style) PUTWrapText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 276, val)
    END PUTWrapText;

    PROCEDURE (this: Style) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Style) Borders* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 435, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Borders;

    PROCEDURE (this: Style) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;


    (* ---------- Styles ---------- *)

    PROCEDURE (this: Styles) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Styles) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Styles) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Styles) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Styles) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Styles) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Styles) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Styles) Add* (Name: CtlT.Any; (* optional *) BasedOn: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[1]);
        CtlC.AnyVar(BasedOn, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Styles) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Styles) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Styles) Merge* (Workbook: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Workbook, arg[0]);
        CtlC.CallParMethod(this, 564, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Merge;


    (* ---------- Toolbar ---------- *)

    PROCEDURE (this: Toolbar) BuiltIn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 553)
    END BuiltIn;

    PROCEDURE (this: Toolbar) PUTBuiltIn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 553, val)
    END PUTBuiltIn;

    PROCEDURE (this: Toolbar) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Toolbar) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Toolbar) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Toolbar) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Toolbar) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Toolbar) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Toolbar) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Toolbar) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Toolbar) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Toolbar) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Toolbar) Position* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 133)
    END Position;

    PROCEDURE (this: Toolbar) PUTPosition* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 133, val)
    END PUTPosition;

    PROCEDURE (this: Toolbar) Protection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 176)
    END Protection;

    PROCEDURE (this: Toolbar) PUTProtection* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 176, val)
    END PUTProtection;

    PROCEDURE (this: Toolbar) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Toolbar) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Toolbar) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Toolbar) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Toolbar) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Toolbar) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Toolbar) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Toolbar) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Toolbar) Reset* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 555, ret);
        RETURN CtlC.VarAny(ret)
    END Reset;

    PROCEDURE (this: Toolbar) ToolbarButtons* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 964, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ToolbarButtons;


    (* ---------- Toolbars ---------- *)

    PROCEDURE (this: Toolbars) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Toolbars) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Toolbars) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Toolbars) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Toolbars) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Toolbars) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Toolbars) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Toolbars) Add* ((* optional *) Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Toolbars) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Toolbars) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- ToolbarButton ---------- *)

    PROCEDURE (this: ToolbarButton) BuiltIn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 553)
    END BuiltIn;

    PROCEDURE (this: ToolbarButton) PUTBuiltIn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 553, val)
    END PUTBuiltIn;

    PROCEDURE (this: ToolbarButton) BuiltInFace* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 554)
    END BuiltInFace;

    PROCEDURE (this: ToolbarButton) PUTBuiltInFace* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 554, val)
    END PUTBuiltInFace;

    PROCEDURE (this: ToolbarButton) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ToolbarButton) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ToolbarButton) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: ToolbarButton) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: ToolbarButton) HelpContextID* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 355)
    END HelpContextID;

    PROCEDURE (this: ToolbarButton) PUTHelpContextID* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 355, val)
    END PUTHelpContextID;

    PROCEDURE (this: ToolbarButton) HelpFile* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 360)
    END HelpFile;

    PROCEDURE (this: ToolbarButton) PUTHelpFile* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 360, val)
    END PUTHelpFile;

    PROCEDURE (this: ToolbarButton) Id* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 570)
    END Id;

    PROCEDURE (this: ToolbarButton) PUTId* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 570, val)
    END PUTId;

    PROCEDURE (this: ToolbarButton) IsGap* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 561)
    END IsGap;

    PROCEDURE (this: ToolbarButton) PUTIsGap* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 561, val)
    END PUTIsGap;

    PROCEDURE (this: ToolbarButton) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: ToolbarButton) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: ToolbarButton) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: ToolbarButton) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: ToolbarButton) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ToolbarButton) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ToolbarButton) Pushed* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 560)
    END Pushed;

    PROCEDURE (this: ToolbarButton) PUTPushed* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 560, val)
    END PUTPushed;

    PROCEDURE (this: ToolbarButton) StatusBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 386)
    END StatusBar;

    PROCEDURE (this: ToolbarButton) PUTStatusBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 386, val)
    END PUTStatusBar;

    PROCEDURE (this: ToolbarButton) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ToolbarButton) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ToolbarButton) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ToolbarButton) Copy* (Toolbar: CtlT.Any; Before: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Toolbar, arg[1]);
        CtlC.AnyVar(Before, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ToolbarButton) CopyFace* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 966, ret);
        RETURN CtlC.VarAny(ret)
    END CopyFace;

    PROCEDURE (this: ToolbarButton) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ToolbarButton) Edit* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 562, ret);
        RETURN CtlC.VarAny(ret)
    END Edit;

    PROCEDURE (this: ToolbarButton) Move* (Toolbar: CtlT.Any; Before: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Toolbar, arg[1]);
        CtlC.AnyVar(Before, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: ToolbarButton) PasteFace* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 967, ret);
        RETURN CtlC.VarAny(ret)
    END PasteFace;

    PROCEDURE (this: ToolbarButton) Reset* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 555, ret);
        RETURN CtlC.VarAny(ret)
    END Reset;


    (* ---------- ToolbarButtons ---------- *)

    PROCEDURE (this: ToolbarButtons) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: ToolbarButtons) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: ToolbarButtons) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ToolbarButtons) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ToolbarButtons) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ToolbarButtons) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ToolbarButtons) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: ToolbarButtons) Add* ((* optional *) Button: CtlT.Any; Before: CtlT.Any; OnAction: CtlT.Any; Pushed: CtlT.Any; Enabled: CtlT.Any; StatusBar: CtlT.Any; HelpFile: CtlT.Any; HelpContextID: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Button, arg[7]);
        CtlC.AnyVar(Before, arg[6]);
        CtlC.AnyVar(OnAction, arg[5]);
        CtlC.AnyVar(Pushed, arg[4]);
        CtlC.AnyVar(Enabled, arg[3]);
        CtlC.AnyVar(StatusBar, arg[2]);
        CtlC.AnyVar(HelpFile, arg[1]);
        CtlC.AnyVar(HelpContextID, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: ToolbarButtons) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ToolbarButtons) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- AddIn ---------- *)

    PROCEDURE (this: AddIn) Author* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 574)
    END Author;

    PROCEDURE (this: AddIn) PUTAuthor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 574, val)
    END PUTAuthor;

    PROCEDURE (this: AddIn) Comments* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 575)
    END Comments;

    PROCEDURE (this: AddIn) PUTComments* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 575, val)
    END PUTComments;

    PROCEDURE (this: AddIn) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: AddIn) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: AddIn) FullName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 289)
    END FullName;

    PROCEDURE (this: AddIn) PUTFullName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 289, val)
    END PUTFullName;

    PROCEDURE (this: AddIn) Installed* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 550)
    END Installed;

    PROCEDURE (this: AddIn) PUTInstalled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 550, val)
    END PUTInstalled;

    PROCEDURE (this: AddIn) Keywords* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 577)
    END Keywords;

    PROCEDURE (this: AddIn) PUTKeywords* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 577, val)
    END PUTKeywords;

    PROCEDURE (this: AddIn) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: AddIn) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: AddIn) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: AddIn) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: AddIn) Path* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 291)
    END Path;

    PROCEDURE (this: AddIn) PUTPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 291, val)
    END PUTPath;

    PROCEDURE (this: AddIn) Subject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 953)
    END Subject;

    PROCEDURE (this: AddIn) PUTSubject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 953, val)
    END PUTSubject;

    PROCEDURE (this: AddIn) Title* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 199)
    END Title;

    PROCEDURE (this: AddIn) PUTTitle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 199, val)
    END PUTTitle;

    PROCEDURE (this: AddIn) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;


    (* ---------- AddIns ---------- *)

    PROCEDURE (this: AddIns) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: AddIns) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: AddIns) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: AddIns) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: AddIns) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: AddIns) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: AddIns) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: AddIns) Add* (Filename: CtlT.Any; (* optional *) CopyFile: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(CopyFile, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: AddIns) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: AddIns) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Areas ---------- *)

    PROCEDURE (this: Areas) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Areas) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Areas) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Areas) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Areas) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Areas) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Areas) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Areas) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Areas) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Range ---------- *)

    PROCEDURE (this: Range) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: Range) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: Range) Column* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 240)
    END Column;

    PROCEDURE (this: Range) PUTColumn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 240, val)
    END PUTColumn;

    PROCEDURE (this: Range) ColumnWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 242)
    END ColumnWidth;

    PROCEDURE (this: Range) PUTColumnWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 242, val)
    END PUTColumnWidth;

    PROCEDURE (this: Range) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Range) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Range) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Range) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Range) CurrentArray* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 501)
    END CurrentArray;

    PROCEDURE (this: Range) PUTCurrentArray* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 501, val)
    END PUTCurrentArray;

    PROCEDURE (this: Range) CurrentRegion* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 243)
    END CurrentRegion;

    PROCEDURE (this: Range) PUTCurrentRegion* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 243, val)
    END PUTCurrentRegion;

    PROCEDURE (this: Range) Dependents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 543)
    END Dependents;

    PROCEDURE (this: Range) PUTDependents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 543, val)
    END PUTDependents;

    PROCEDURE (this: Range) DirectDependents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 545)
    END DirectDependents;

    PROCEDURE (this: Range) PUTDirectDependents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 545, val)
    END PUTDirectDependents;

    PROCEDURE (this: Range) DirectPrecedents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 546)
    END DirectPrecedents;

    PROCEDURE (this: Range) PUTDirectPrecedents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 546, val)
    END PUTDirectPrecedents;

    PROCEDURE (this: Range) EntireColumn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 246)
    END EntireColumn;

    PROCEDURE (this: Range) PUTEntireColumn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 246, val)
    END PUTEntireColumn;

    PROCEDURE (this: Range) EntireRow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 247)
    END EntireRow;

    PROCEDURE (this: Range) PUTEntireRow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 247, val)
    END PUTEntireRow;

    PROCEDURE (this: Range) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: Range) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: Range) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: Range) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: Range) FormulaArray* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 586)
    END FormulaArray;

    PROCEDURE (this: Range) PUTFormulaArray* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 586, val)
    END PUTFormulaArray;

    PROCEDURE (this: Range) FormulaHidden* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 262)
    END FormulaHidden;

    PROCEDURE (this: Range) PUTFormulaHidden* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 262, val)
    END PUTFormulaHidden;

    PROCEDURE (this: Range) FormulaLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 263)
    END FormulaLocal;

    PROCEDURE (this: Range) PUTFormulaLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 263, val)
    END PUTFormulaLocal;

    PROCEDURE (this: Range) FormulaR1C1* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 264)
    END FormulaR1C1;

    PROCEDURE (this: Range) PUTFormulaR1C1* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 264, val)
    END PUTFormulaR1C1;

    PROCEDURE (this: Range) FormulaR1C1Local* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 265)
    END FormulaR1C1Local;

    PROCEDURE (this: Range) PUTFormulaR1C1Local* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 265, val)
    END PUTFormulaR1C1Local;

    PROCEDURE (this: Range) HasArray* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 266)
    END HasArray;

    PROCEDURE (this: Range) PUTHasArray* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 266, val)
    END PUTHasArray;

    PROCEDURE (this: Range) HasFormula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 267)
    END HasFormula;

    PROCEDURE (this: Range) PUTHasFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 267, val)
    END PUTHasFormula;

    PROCEDURE (this: Range) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Range) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Range) Hidden* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 268)
    END Hidden;

    PROCEDURE (this: Range) PUTHidden* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 268, val)
    END PUTHidden;

    PROCEDURE (this: Range) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Range) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Range) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Range) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Range) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Range) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Range) ListHeaderRows* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1187)
    END ListHeaderRows;

    PROCEDURE (this: Range) PUTListHeaderRows* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1187, val)
    END PUTListHeaderRows;

    PROCEDURE (this: Range) LocationInTable* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 691)
    END LocationInTable;

    PROCEDURE (this: Range) PUTLocationInTable* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 691, val)
    END PUTLocationInTable;

    PROCEDURE (this: Range) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Range) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Range) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Range) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Range) Next* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 502)
    END Next;

    PROCEDURE (this: Range) PUTNext* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 502, val)
    END PUTNext;

    PROCEDURE (this: Range) NumberFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 193)
    END NumberFormat;

    PROCEDURE (this: Range) PUTNumberFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 193, val)
    END PUTNumberFormat;

    PROCEDURE (this: Range) NumberFormatLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1097)
    END NumberFormatLocal;

    PROCEDURE (this: Range) PUTNumberFormatLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1097, val)
    END PUTNumberFormatLocal;

    PROCEDURE (this: Range) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Range) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: Range) OutlineLevel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 271)
    END OutlineLevel;

    PROCEDURE (this: Range) PUTOutlineLevel* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 271, val)
    END PUTOutlineLevel;

    PROCEDURE (this: Range) PageBreak* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 255)
    END PageBreak;

    PROCEDURE (this: Range) PUTPageBreak* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 255, val)
    END PUTPageBreak;

    PROCEDURE (this: Range) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Range) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Range) PivotField* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 731)
    END PivotField;

    PROCEDURE (this: Range) PUTPivotField* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 731, val)
    END PUTPivotField;

    PROCEDURE (this: Range) PivotItem* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 740)
    END PivotItem;

    PROCEDURE (this: Range) PUTPivotItem* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 740, val)
    END PUTPivotItem;

    PROCEDURE (this: Range) PivotTable* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 716)
    END PivotTable;

    PROCEDURE (this: Range) PUTPivotTable* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 716, val)
    END PUTPivotTable;

    PROCEDURE (this: Range) Precedents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 544)
    END Precedents;

    PROCEDURE (this: Range) PUTPrecedents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 544, val)
    END PUTPrecedents;

    PROCEDURE (this: Range) PrefixCharacter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 504)
    END PrefixCharacter;

    PROCEDURE (this: Range) PUTPrefixCharacter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 504, val)
    END PUTPrefixCharacter;

    PROCEDURE (this: Range) Previous* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 503)
    END Previous;

    PROCEDURE (this: Range) PUTPrevious* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 503, val)
    END PUTPrevious;

    PROCEDURE (this: Range) Row* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 257)
    END Row;

    PROCEDURE (this: Range) PUTRow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 257, val)
    END PUTRow;

    PROCEDURE (this: Range) RowHeight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 272)
    END RowHeight;

    PROCEDURE (this: Range) PUTRowHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 272, val)
    END PUTRowHeight;

    PROCEDURE (this: Range) ShowDetail* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 585)
    END ShowDetail;

    PROCEDURE (this: Range) PUTShowDetail* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 585, val)
    END PUTShowDetail;

    PROCEDURE (this: Range) SoundNote* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 916)
    END SoundNote;

    PROCEDURE (this: Range) PUTSoundNote* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 916, val)
    END PUTSoundNote;

    PROCEDURE (this: Range) Style* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 260)
    END Style;

    PROCEDURE (this: Range) PUTStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 260, val)
    END PUTStyle;

    PROCEDURE (this: Range) Summary* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 273)
    END Summary;

    PROCEDURE (this: Range) PUTSummary* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 273, val)
    END PUTSummary;

    PROCEDURE (this: Range) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: Range) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: Range) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Range) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Range) UseStandardHeight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 274)
    END UseStandardHeight;

    PROCEDURE (this: Range) PUTUseStandardHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 274, val)
    END PUTUseStandardHeight;

    PROCEDURE (this: Range) UseStandardWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 275)
    END UseStandardWidth;

    PROCEDURE (this: Range) PUTUseStandardWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 275, val)
    END PUTUseStandardWidth;

    PROCEDURE (this: Range) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Range) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: Range) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Range) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: Range) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Range) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Range) WrapText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 276)
    END WrapText;

    PROCEDURE (this: Range) PUTWrapText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 276, val)
    END PUTWrapText;

    PROCEDURE (this: Range) _Dummy* ((* optional *) Activate: CtlT.Any; DirectObject: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Activate, arg[1]);
        CtlC.AnyVar(DirectObject, arg[0]);
        CtlC.CallParMethod(this, 0, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Dummy;

    PROCEDURE (this: Range) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Range) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: Range) Address* ((* optional *) RowAbsolute: CtlT.Any; ColumnAbsolute: CtlT.Any; ReferenceStyle: CtlT.Any; External: CtlT.Any; RelativeTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowAbsolute, arg[4]);
        CtlC.AnyVar(ColumnAbsolute, arg[3]);
        CtlC.AnyVar(ReferenceStyle, arg[2]);
        CtlC.AnyVar(External, arg[1]);
        CtlC.AnyVar(RelativeTo, arg[0]);
        CtlC.CallParMethod(this, 236, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Address;

    PROCEDURE (this: Range) AddressLocal* ((* optional *) RowAbsolute: CtlT.Any; ColumnAbsolute: CtlT.Any; ReferenceStyle: CtlT.Any; External: CtlT.Any; RelativeTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowAbsolute, arg[4]);
        CtlC.AnyVar(ColumnAbsolute, arg[3]);
        CtlC.AnyVar(ReferenceStyle, arg[2]);
        CtlC.AnyVar(External, arg[1]);
        CtlC.AnyVar(RelativeTo, arg[0]);
        CtlC.CallParMethod(this, 437, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddressLocal;

    PROCEDURE (this: Range) AdvancedFilter* (Action: CtlT.Any; (* optional *) CriteriaRange: CtlT.Any; CopyToRange: CtlT.Any; Unique: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Action, arg[3]);
        CtlC.AnyVar(CriteriaRange, arg[2]);
        CtlC.AnyVar(CopyToRange, arg[1]);
        CtlC.AnyVar(Unique, arg[0]);
        CtlC.CallParMethod(this, 876, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AdvancedFilter;

    PROCEDURE (this: Range) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Range) ApplyNames* ((* optional *) Names: CtlT.Any; IgnoreRelativeAbsolute: CtlT.Any; UseRowColumnNames: CtlT.Any; OmitColumn: CtlT.Any; OmitRow: CtlT.Any; Order: CtlT.Any; AppendLast: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Names, arg[6]);
        CtlC.AnyVar(IgnoreRelativeAbsolute, arg[5]);
        CtlC.AnyVar(UseRowColumnNames, arg[4]);
        CtlC.AnyVar(OmitColumn, arg[3]);
        CtlC.AnyVar(OmitRow, arg[2]);
        CtlC.AnyVar(Order, arg[1]);
        CtlC.AnyVar(AppendLast, arg[0]);
        CtlC.CallParMethod(this, 441, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ApplyNames;

    PROCEDURE (this: Range) ApplyOutlineStyles* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 448, ret);
        RETURN CtlC.VarAny(ret)
    END ApplyOutlineStyles;

    PROCEDURE (this: Range) Areas* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 568, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Areas;

    PROCEDURE (this: Range) AutoComplete* (String: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(String, arg[0]);
        CtlC.CallParMethod(this, 1185, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AutoComplete;

    PROCEDURE (this: Range) AutoFill* (Destination: CtlT.Any; (* optional *) Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 449, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AutoFill;

    PROCEDURE (this: Range) AutoFilter* ((* optional *) Field: CtlT.Any; Criteria1: CtlT.Any; Operator: CtlT.Any; Criteria2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Field, arg[3]);
        CtlC.AnyVar(Criteria1, arg[2]);
        CtlC.AnyVar(Operator, arg[1]);
        CtlC.AnyVar(Criteria2, arg[0]);
        CtlC.CallParMethod(this, 793, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AutoFilter;

    PROCEDURE (this: Range) AutoFit* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 237, ret);
        RETURN CtlC.VarAny(ret)
    END AutoFit;

    PROCEDURE (this: Range) AutoFormat* ((* optional *) Format: CtlT.Any; Number: CtlT.Any; Font: CtlT.Any; Alignment: CtlT.Any; Border: CtlT.Any; Pattern: CtlT.Any; Width: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Format, arg[6]);
        CtlC.AnyVar(Number, arg[5]);
        CtlC.AnyVar(Font, arg[4]);
        CtlC.AnyVar(Alignment, arg[3]);
        CtlC.AnyVar(Border, arg[2]);
        CtlC.AnyVar(Pattern, arg[1]);
        CtlC.AnyVar(Width, arg[0]);
        CtlC.CallParMethod(this, 114, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AutoFormat;

    PROCEDURE (this: Range) AutoOutline* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1036, ret);
        RETURN CtlC.VarAny(ret)
    END AutoOutline;

    PROCEDURE (this: Range) BorderAround* ((* optional *) LineStyle: CtlT.Any; Weight: CtlT.Any; ColorIndex: CtlT.Any; Color: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(LineStyle, arg[3]);
        CtlC.AnyVar(Weight, arg[2]);
        CtlC.AnyVar(ColorIndex, arg[1]);
        CtlC.AnyVar(Color, arg[0]);
        CtlC.CallParMethod(this, 1067, arg, ret);
        RETURN CtlC.VarAny(ret)
    END BorderAround;

    PROCEDURE (this: Range) Borders* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 435, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Borders;

    PROCEDURE (this: Range) Calculate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 279, ret);
        RETURN CtlC.VarAny(ret)
    END Calculate;

    PROCEDURE (this: Range) Cells* ((* optional *) RowIndex: CtlT.Any; ColumnIndex: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[1]);
        CtlC.AnyVar(ColumnIndex, arg[0]);
        CtlC.CallParMethod(this, 238, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Cells;

    PROCEDURE (this: Range) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: Range) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Range) Clear* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 111, ret);
        RETURN CtlC.VarAny(ret)
    END Clear;

    PROCEDURE (this: Range) ClearContents* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 113, ret);
        RETURN CtlC.VarAny(ret)
    END ClearContents;

    PROCEDURE (this: Range) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: Range) ClearNotes* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 239, ret);
        RETURN CtlC.VarAny(ret)
    END ClearNotes;

    PROCEDURE (this: Range) ClearOutline* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1037, ret);
        RETURN CtlC.VarAny(ret)
    END ClearOutline;

    PROCEDURE (this: Range) ColumnDifferences* (Comparison: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Comparison, arg[0]);
        CtlC.CallParMethod(this, 510, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ColumnDifferences;

    PROCEDURE (this: Range) Columns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 241, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Columns;

    PROCEDURE (this: Range) Consolidate* ((* optional *) Sources: CtlT.Any; Function: CtlT.Any; TopRow: CtlT.Any; LeftColumn: CtlT.Any; CreateLinks: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Sources, arg[4]);
        CtlC.AnyVar(Function, arg[3]);
        CtlC.AnyVar(TopRow, arg[2]);
        CtlC.AnyVar(LeftColumn, arg[1]);
        CtlC.AnyVar(CreateLinks, arg[0]);
        CtlC.CallParMethod(this, 482, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Consolidate;

    PROCEDURE (this: Range) Copy* ((* optional *) Destination: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Range) CopyFromRecordset* (Data: CtlT.Any; (* optional *) MaxRows: CtlT.Any; MaxColumns: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Data, arg[2]);
        CtlC.AnyVar(MaxRows, arg[1]);
        CtlC.AnyVar(MaxColumns, arg[0]);
        CtlC.CallParMethod(this, 1152, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyFromRecordset;

    PROCEDURE (this: Range) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Range) CreateNames* ((* optional *) Top: CtlT.Any; Left: CtlT.Any; Bottom: CtlT.Any; Right: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Top, arg[3]);
        CtlC.AnyVar(Left, arg[2]);
        CtlC.AnyVar(Bottom, arg[1]);
        CtlC.AnyVar(Right, arg[0]);
        CtlC.CallParMethod(this, 457, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CreateNames;

    PROCEDURE (this: Range) CreatePublisher* ((* optional *) Edition: CtlT.Any; Appearance: CtlT.Any; ContainsPICT: CtlT.Any; ContainsBIFF: CtlT.Any; ContainsRTF: CtlT.Any; ContainsVALU: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Edition, arg[5]);
        CtlC.AnyVar(Appearance, arg[4]);
        CtlC.AnyVar(ContainsPICT, arg[3]);
        CtlC.AnyVar(ContainsBIFF, arg[2]);
        CtlC.AnyVar(ContainsRTF, arg[1]);
        CtlC.AnyVar(ContainsVALU, arg[0]);
        CtlC.CallParMethod(this, 458, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CreatePublisher;

    PROCEDURE (this: Range) Cut* ((* optional *) Destination: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[0]);
        CtlC.CallParMethod(this, 565, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Range) DataSeries* ((* optional *) Rowcol: CtlT.Any; Type: CtlT.Any; Date: CtlT.Any; Step: CtlT.Any; Stop: CtlT.Any; Trend: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Rowcol, arg[5]);
        CtlC.AnyVar(Type, arg[4]);
        CtlC.AnyVar(Date, arg[3]);
        CtlC.AnyVar(Step, arg[2]);
        CtlC.AnyVar(Stop, arg[1]);
        CtlC.AnyVar(Trend, arg[0]);
        CtlC.CallParMethod(this, 464, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DataSeries;

    PROCEDURE (this: Range) Delete* ((* optional *) Shift: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Shift, arg[0]);
        CtlC.CallParMethod(this, 117, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Range) DialogBox* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 245, ret);
        RETURN CtlC.VarAny(ret)
    END DialogBox;

    PROCEDURE (this: Range) End* (Direction: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Direction, arg[0]);
        CtlC.CallParMethod(this, 500, arg, ret);
        RETURN CtlC.VarAny(ret)
    END End;

    PROCEDURE (this: Range) FillDown* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 248, ret);
        RETURN CtlC.VarAny(ret)
    END FillDown;

    PROCEDURE (this: Range) FillLeft* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 249, ret);
        RETURN CtlC.VarAny(ret)
    END FillLeft;

    PROCEDURE (this: Range) FillRight* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 250, ret);
        RETURN CtlC.VarAny(ret)
    END FillRight;

    PROCEDURE (this: Range) FillUp* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 251, ret);
        RETURN CtlC.VarAny(ret)
    END FillUp;

    PROCEDURE (this: Range) Find* (What: CtlT.Any; (* optional *) After: CtlT.Any; LookIn: CtlT.Any; LookAt: CtlT.Any; SearchOrder: CtlT.Any; SearchDirection: CtlT.Any; MatchCase: CtlT.Any; MatchByte: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(What, arg[7]);
        CtlC.AnyVar(After, arg[6]);
        CtlC.AnyVar(LookIn, arg[5]);
        CtlC.AnyVar(LookAt, arg[4]);
        CtlC.AnyVar(SearchOrder, arg[3]);
        CtlC.AnyVar(SearchDirection, arg[2]);
        CtlC.AnyVar(MatchCase, arg[1]);
        CtlC.AnyVar(MatchByte, arg[0]);
        CtlC.CallParMethod(this, 398, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Find;

    PROCEDURE (this: Range) FindNext* ((* optional *) After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 399, arg, ret);
        RETURN CtlC.VarAny(ret)
    END FindNext;

    PROCEDURE (this: Range) FindPrevious* ((* optional *) After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 400, arg, ret);
        RETURN CtlC.VarAny(ret)
    END FindPrevious;

    PROCEDURE (this: Range) FunctionWizard* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 571, ret);
        RETURN CtlC.VarAny(ret)
    END FunctionWizard;

    PROCEDURE (this: Range) GoalSeek* (Goal: CtlT.Any; ChangingCell: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Goal, arg[1]);
        CtlC.AnyVar(ChangingCell, arg[0]);
        CtlC.CallParMethod(this, 472, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GoalSeek;

    PROCEDURE (this: Range) Group* ((* optional *) Start: CtlT.Any; End: CtlT.Any; By: CtlT.Any; Periods: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[3]);
        CtlC.AnyVar(End, arg[2]);
        CtlC.AnyVar(By, arg[1]);
        CtlC.AnyVar(Periods, arg[0]);
        CtlC.CallParMethod(this, 46, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Range) Insert* ((* optional *) Shift: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Shift, arg[0]);
        CtlC.CallParMethod(this, 252, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Insert;

    PROCEDURE (this: Range) Item* (RowIndex: CtlT.Any; (* optional *) ColumnIndex: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[1]);
        CtlC.AnyVar(ColumnIndex, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Range) Justify* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 495, ret);
        RETURN CtlC.VarAny(ret)
    END Justify;

    PROCEDURE (this: Range) ListNames* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 253, ret);
        RETURN CtlC.VarAny(ret)
    END ListNames;

    PROCEDURE (this: Range) NavigateArrow* ((* optional *) TowardPrecedent: CtlT.Any; ArrowNumber: CtlT.Any; LinkNumber: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(TowardPrecedent, arg[2]);
        CtlC.AnyVar(ArrowNumber, arg[1]);
        CtlC.AnyVar(LinkNumber, arg[0]);
        CtlC.CallParMethod(this, 1032, arg, ret);
        RETURN CtlC.VarAny(ret)
    END NavigateArrow;

    PROCEDURE (this: Range) NoteText* ((* optional *) Text: CtlT.Any; Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[2]);
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 1127, arg, ret);
        RETURN CtlC.VarAny(ret)
    END NoteText;

    PROCEDURE (this: Range) Offset* ((* optional *) RowOffset: CtlT.Any; ColumnOffset: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowOffset, arg[1]);
        CtlC.AnyVar(ColumnOffset, arg[0]);
        CtlC.CallParMethod(this, 254, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Offset;

    PROCEDURE (this: Range) Parse* ((* optional *) ParseLine: CtlT.Any; Destination: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ParseLine, arg[1]);
        CtlC.AnyVar(Destination, arg[0]);
        CtlC.CallParMethod(this, 477, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Parse;

    PROCEDURE (this: Range) PasteSpecial* ((* optional *) Paste: CtlT.Any; Operation: CtlT.Any; SkipBlanks: CtlT.Any; Transpose: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Paste, arg[3]);
        CtlC.AnyVar(Operation, arg[2]);
        CtlC.AnyVar(SkipBlanks, arg[1]);
        CtlC.AnyVar(Transpose, arg[0]);
        CtlC.CallParMethod(this, 1027, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PasteSpecial;

    PROCEDURE (this: Range) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Range) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Range) Range* ((* optional *) Cell1: CtlT.Any; Cell2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallParMethod(this, 197, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Range;

    PROCEDURE (this: Range) RemoveSubtotal* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 883, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveSubtotal;

    PROCEDURE (this: Range) Replace* (What: CtlT.Any; Replacement: CtlT.Any; (* optional *) LookAt: CtlT.Any; SearchOrder: CtlT.Any; MatchCase: CtlT.Any; MatchByte: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(What, arg[5]);
        CtlC.AnyVar(Replacement, arg[4]);
        CtlC.AnyVar(LookAt, arg[3]);
        CtlC.AnyVar(SearchOrder, arg[2]);
        CtlC.AnyVar(MatchCase, arg[1]);
        CtlC.AnyVar(MatchByte, arg[0]);
        CtlC.CallParMethod(this, 226, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Replace;

    PROCEDURE (this: Range) Resize* ((* optional *) RowSize: CtlT.Any; ColumnSize: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowSize, arg[1]);
        CtlC.AnyVar(ColumnSize, arg[0]);
        CtlC.CallParMethod(this, 256, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Resize;

    PROCEDURE (this: Range) RowDifferences* (Comparison: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Comparison, arg[0]);
        CtlC.CallParMethod(this, 511, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RowDifferences;

    PROCEDURE (this: Range) Rows* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 258, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Rows;

    PROCEDURE (this: Range) Run* ((* optional *) Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 259, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Run;

    PROCEDURE (this: Range) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Range) Show* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 496, ret);
        RETURN CtlC.VarAny(ret)
    END Show;

    PROCEDURE (this: Range) ShowDependents* ((* optional *) Remove: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Remove, arg[0]);
        CtlC.CallParMethod(this, 877, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ShowDependents;

    PROCEDURE (this: Range) ShowErrors* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 878, ret);
        RETURN CtlC.VarAny(ret)
    END ShowErrors;

    PROCEDURE (this: Range) ShowPrecedents* ((* optional *) Remove: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Remove, arg[0]);
        CtlC.CallParMethod(this, 879, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ShowPrecedents;

    PROCEDURE (this: Range) Sort* ((* optional *) Key1: CtlT.Any; Order1: CtlT.Any; Key2: CtlT.Any; Type: CtlT.Any; Order2: CtlT.Any; Key3: CtlT.Any; Order3: CtlT.Any; Header: CtlT.Any; OrderCustom: CtlT.Any; MatchCase: CtlT.Any; Orientation: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Key1, arg[10]);
        CtlC.AnyVar(Order1, arg[9]);
        CtlC.AnyVar(Key2, arg[8]);
        CtlC.AnyVar(Type, arg[7]);
        CtlC.AnyVar(Order2, arg[6]);
        CtlC.AnyVar(Key3, arg[5]);
        CtlC.AnyVar(Order3, arg[4]);
        CtlC.AnyVar(Header, arg[3]);
        CtlC.AnyVar(OrderCustom, arg[2]);
        CtlC.AnyVar(MatchCase, arg[1]);
        CtlC.AnyVar(Orientation, arg[0]);
        CtlC.CallParMethod(this, 880, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Sort;

    PROCEDURE (this: Range) SortSpecial* ((* optional *) SortMethod: CtlT.Any; Key1: CtlT.Any; Order1: CtlT.Any; Type: CtlT.Any; Key2: CtlT.Any; Order2: CtlT.Any; Key3: CtlT.Any; Order3: CtlT.Any; Header: CtlT.Any; OrderCustom: CtlT.Any; MatchCase: CtlT.Any; Orientation: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 12 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SortMethod, arg[11]);
        CtlC.AnyVar(Key1, arg[10]);
        CtlC.AnyVar(Order1, arg[9]);
        CtlC.AnyVar(Type, arg[8]);
        CtlC.AnyVar(Key2, arg[7]);
        CtlC.AnyVar(Order2, arg[6]);
        CtlC.AnyVar(Key3, arg[5]);
        CtlC.AnyVar(Order3, arg[4]);
        CtlC.AnyVar(Header, arg[3]);
        CtlC.AnyVar(OrderCustom, arg[2]);
        CtlC.AnyVar(MatchCase, arg[1]);
        CtlC.AnyVar(Orientation, arg[0]);
        CtlC.CallParMethod(this, 881, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SortSpecial;

    PROCEDURE (this: Range) SpecialCells* (Type: CtlT.Any; (* optional *) Value: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(Value, arg[0]);
        CtlC.CallParMethod(this, 410, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SpecialCells;

    PROCEDURE (this: Range) SubscribeTo* (Edition: CtlT.Any; (* optional *) Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Edition, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 481, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SubscribeTo;

    PROCEDURE (this: Range) Subtotal* (GroupBy: CtlT.Any; Function: CtlT.Any; TotalList: CtlT.Any; (* optional *) Replace: CtlT.Any; PageBreaks: CtlT.Any; SummaryBelowData: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(GroupBy, arg[5]);
        CtlC.AnyVar(Function, arg[4]);
        CtlC.AnyVar(TotalList, arg[3]);
        CtlC.AnyVar(Replace, arg[2]);
        CtlC.AnyVar(PageBreaks, arg[1]);
        CtlC.AnyVar(SummaryBelowData, arg[0]);
        CtlC.CallParMethod(this, 882, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Subtotal;

    PROCEDURE (this: Range) Table* ((* optional *) RowInput: CtlT.Any; ColumnInput: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowInput, arg[1]);
        CtlC.AnyVar(ColumnInput, arg[0]);
        CtlC.CallParMethod(this, 497, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Table;

    PROCEDURE (this: Range) TextToColumns* ((* optional *) Destination: CtlT.Any; DataType: CtlT.Any; TextQualifier: CtlT.Any; ConsecutiveDelimiter: CtlT.Any; Tab: CtlT.Any; Semicolon: CtlT.Any; Comma: CtlT.Any; Space: CtlT.Any; Other: CtlT.Any; OtherChar: CtlT.Any; FieldInfo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[10]);
        CtlC.AnyVar(DataType, arg[9]);
        CtlC.AnyVar(TextQualifier, arg[8]);
        CtlC.AnyVar(ConsecutiveDelimiter, arg[7]);
        CtlC.AnyVar(Tab, arg[6]);
        CtlC.AnyVar(Semicolon, arg[5]);
        CtlC.AnyVar(Comma, arg[4]);
        CtlC.AnyVar(Space, arg[3]);
        CtlC.AnyVar(Other, arg[2]);
        CtlC.AnyVar(OtherChar, arg[1]);
        CtlC.AnyVar(FieldInfo, arg[0]);
        CtlC.CallParMethod(this, 1040, arg, ret);
        RETURN CtlC.VarAny(ret)
    END TextToColumns;

    PROCEDURE (this: Range) Ungroup* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN CtlC.VarAny(ret)
    END Ungroup;

    PROCEDURE (this: Range) Worksheet* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 348, ret);
        RETURN CtlC.VarAny(ret)
    END Worksheet;


    (* ---------- Workbook ---------- *)

    PROCEDURE (this: Workbook) ActiveChart* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 183)
    END ActiveChart;

    PROCEDURE (this: Workbook) PUTActiveChart* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 183, val)
    END PUTActiveChart;

    PROCEDURE (this: Workbook) ActiveSheet* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 307)
    END ActiveSheet;

    PROCEDURE (this: Workbook) PUTActiveSheet* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 307, val)
    END PUTActiveSheet;

    PROCEDURE (this: Workbook) Author* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 574)
    END Author;

    PROCEDURE (this: Workbook) PUTAuthor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 574, val)
    END PUTAuthor;

    PROCEDURE (this: Workbook) Colors* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 286)
    END Colors;

    PROCEDURE (this: Workbook) PUTColors* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 286, val)
    END PUTColors;

    PROCEDURE (this: Workbook) Comments* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 575)
    END Comments;

    PROCEDURE (this: Workbook) PUTComments* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 575, val)
    END PUTComments;

    PROCEDURE (this: Workbook) Container* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1190)
    END Container;

    PROCEDURE (this: Workbook) PUTContainer* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1190, val)
    END PUTContainer;

    PROCEDURE (this: Workbook) CreateBackup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 287)
    END CreateBackup;

    PROCEDURE (this: Workbook) PUTCreateBackup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 287, val)
    END PUTCreateBackup;

    PROCEDURE (this: Workbook) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Workbook) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Workbook) Date1904* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 403)
    END Date1904;

    PROCEDURE (this: Workbook) PUTDate1904* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 403, val)
    END PUTDate1904;

    PROCEDURE (this: Workbook) DisplayDrawingObjects* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 404)
    END DisplayDrawingObjects;

    PROCEDURE (this: Workbook) PUTDisplayDrawingObjects* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 404, val)
    END PUTDisplayDrawingObjects;

    PROCEDURE (this: Workbook) FileFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 288)
    END FileFormat;

    PROCEDURE (this: Workbook) PUTFileFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 288, val)
    END PUTFileFormat;

    PROCEDURE (this: Workbook) FullName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 289)
    END FullName;

    PROCEDURE (this: Workbook) PUTFullName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 289, val)
    END PUTFullName;

    PROCEDURE (this: Workbook) HasMailer* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 976)
    END HasMailer;

    PROCEDURE (this: Workbook) PUTHasMailer* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 976, val)
    END PUTHasMailer;

    PROCEDURE (this: Workbook) HasPassword* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 290)
    END HasPassword;

    PROCEDURE (this: Workbook) PUTHasPassword* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 290, val)
    END PUTHasPassword;

    PROCEDURE (this: Workbook) HasRoutingSlip* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 950)
    END HasRoutingSlip;

    PROCEDURE (this: Workbook) PUTHasRoutingSlip* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 950, val)
    END PUTHasRoutingSlip;

    PROCEDURE (this: Workbook) Keywords* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 577)
    END Keywords;

    PROCEDURE (this: Workbook) PUTKeywords* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 577, val)
    END PUTKeywords;

    PROCEDURE (this: Workbook) Mailer* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 979)
    END Mailer;

    PROCEDURE (this: Workbook) PUTMailer* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 979, val)
    END PUTMailer;

    PROCEDURE (this: Workbook) MultiUserEditing* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1169)
    END MultiUserEditing;

    PROCEDURE (this: Workbook) PUTMultiUserEditing* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1169, val)
    END PUTMultiUserEditing;

    PROCEDURE (this: Workbook) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Workbook) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Workbook) OnSave* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1178)
    END OnSave;

    PROCEDURE (this: Workbook) PUTOnSave* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1178, val)
    END PUTOnSave;

    PROCEDURE (this: Workbook) OnSheetActivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: Workbook) PUTOnSheetActivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1031, val)
    END PUTOnSheetActivate;

    PROCEDURE (this: Workbook) OnSheetDeactivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: Workbook) PUTOnSheetDeactivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1081, val)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: Workbook) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Workbook) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Workbook) Path* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 291)
    END Path;

    PROCEDURE (this: Workbook) PUTPath* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 291, val)
    END PUTPath;

    PROCEDURE (this: Workbook) PrecisionAsDisplayed* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 405)
    END PrecisionAsDisplayed;

    PROCEDURE (this: Workbook) PUTPrecisionAsDisplayed* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 405, val)
    END PUTPrecisionAsDisplayed;

    PROCEDURE (this: Workbook) ProtectStructure* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 588)
    END ProtectStructure;

    PROCEDURE (this: Workbook) PUTProtectStructure* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 588, val)
    END PUTProtectStructure;

    PROCEDURE (this: Workbook) ProtectWindows* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 295)
    END ProtectWindows;

    PROCEDURE (this: Workbook) PUTProtectWindows* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 295, val)
    END PUTProtectWindows;

    PROCEDURE (this: Workbook) ReadOnly* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 296)
    END ReadOnly;

    PROCEDURE (this: Workbook) PUTReadOnly* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 296, val)
    END PUTReadOnly;

    PROCEDURE (this: Workbook) ReadOnlyRecommended* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 297)
    END ReadOnlyRecommended;

    PROCEDURE (this: Workbook) PUTReadOnlyRecommended* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 297, val)
    END PUTReadOnlyRecommended;

    PROCEDURE (this: Workbook) RevisionNumber* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1172)
    END RevisionNumber;

    PROCEDURE (this: Workbook) PUTRevisionNumber* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1172, val)
    END PUTRevisionNumber;

    PROCEDURE (this: Workbook) Routed* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 951)
    END Routed;

    PROCEDURE (this: Workbook) PUTRouted* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 951, val)
    END PUTRouted;

    PROCEDURE (this: Workbook) RoutingSlip* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 949)
    END RoutingSlip;

    PROCEDURE (this: Workbook) PUTRoutingSlip* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 949, val)
    END PUTRoutingSlip;

    PROCEDURE (this: Workbook) Saved* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 298)
    END Saved;

    PROCEDURE (this: Workbook) PUTSaved* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 298, val)
    END PUTSaved;

    PROCEDURE (this: Workbook) SaveLinkValues* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 406)
    END SaveLinkValues;

    PROCEDURE (this: Workbook) PUTSaveLinkValues* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 406, val)
    END PUTSaveLinkValues;

    PROCEDURE (this: Workbook) ShowConflictHistory* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1171)
    END ShowConflictHistory;

    PROCEDURE (this: Workbook) PUTShowConflictHistory* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1171, val)
    END PUTShowConflictHistory;

    PROCEDURE (this: Workbook) Subject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 953)
    END Subject;

    PROCEDURE (this: Workbook) PUTSubject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 953, val)
    END PUTSubject;

    PROCEDURE (this: Workbook) Title* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 199)
    END Title;

    PROCEDURE (this: Workbook) PUTTitle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 199, val)
    END PUTTitle;

    PROCEDURE (this: Workbook) UpdateRemoteReferences* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 411)
    END UpdateRemoteReferences;

    PROCEDURE (this: Workbook) PUTUpdateRemoteReferences* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 411, val)
    END PUTUpdateRemoteReferences;

    PROCEDURE (this: Workbook) UserStatus* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1173)
    END UserStatus;

    PROCEDURE (this: Workbook) PUTUserStatus* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1173, val)
    END PUTUserStatus;

    PROCEDURE (this: Workbook) WriteReserved* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 299)
    END WriteReserved;

    PROCEDURE (this: Workbook) PUTWriteReserved* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 299, val)
    END PUTWriteReserved;

    PROCEDURE (this: Workbook) WriteReservedBy* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 300)
    END WriteReservedBy;

    PROCEDURE (this: Workbook) PUTWriteReservedBy* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 300, val)
    END PUTWriteReservedBy;

    PROCEDURE (this: Workbook) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: Workbook) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Workbook) BuiltinDocumentProperties* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1176, arg, ret);
        RETURN CtlC.VarAny(ret)
    END BuiltinDocumentProperties;

    PROCEDURE (this: Workbook) ChangeFileAccess* (Mode: CtlT.Any; (* optional *) WritePassword: CtlT.Any; Notify: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Mode, arg[2]);
        CtlC.AnyVar(WritePassword, arg[1]);
        CtlC.AnyVar(Notify, arg[0]);
        CtlC.CallParMethod(this, 989, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChangeFileAccess;

    PROCEDURE (this: Workbook) ChangeLink* (Name: CtlT.Any; NewName: CtlT.Any; (* optional *) Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[2]);
        CtlC.AnyVar(NewName, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 802, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChangeLink;

    PROCEDURE (this: Workbook) Charts* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 121, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Charts;

    PROCEDURE (this: Workbook) Close* ((* optional *) SaveChanges: CtlT.Any; Filename: CtlT.Any; RouteWorkbook: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SaveChanges, arg[2]);
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(RouteWorkbook, arg[0]);
        CtlC.CallParMethod(this, 277, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Close;

    PROCEDURE (this: Workbook) CustomDocumentProperties* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1177, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CustomDocumentProperties;

    PROCEDURE (this: Workbook) DeleteNumberFormat* (NumberFormat: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(NumberFormat, arg[0]);
        CtlC.CallParMethod(this, 397, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DeleteNumberFormat;

    PROCEDURE (this: Workbook) DialogSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 764, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DialogSheets;

    PROCEDURE (this: Workbook) Excel4IntlMacroSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 581, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Excel4IntlMacroSheets;

    PROCEDURE (this: Workbook) Excel4MacroSheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 579, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Excel4MacroSheets;

    PROCEDURE (this: Workbook) ExclusiveAccess* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1168, ret);
        RETURN CtlC.VarAny(ret)
    END ExclusiveAccess;

    PROCEDURE (this: Workbook) ForwardMailer* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 973, ret);
        RETURN CtlC.VarAny(ret)
    END ForwardMailer;

    PROCEDURE (this: Workbook) LinkInfo* (Name: CtlT.Any; LinkInfo: CtlT.Any; (* optional *) Type: CtlT.Any; EditionRef: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[3]);
        CtlC.AnyVar(LinkInfo, arg[2]);
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(EditionRef, arg[0]);
        CtlC.CallParMethod(this, 807, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LinkInfo;

    PROCEDURE (this: Workbook) LinkSources* ((* optional *) Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 808, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LinkSources;

    PROCEDURE (this: Workbook) Modules* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 582, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Modules;

    PROCEDURE (this: Workbook) Names* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 442, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Names;

    PROCEDURE (this: Workbook) NewWindow* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 280, ret);
        RETURN CtlC.VarAny(ret)
    END NewWindow;

    PROCEDURE (this: Workbook) OpenLinks* (Name: CtlT.Any; (* optional *) ReadOnly: CtlT.Any; Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[2]);
        CtlC.AnyVar(ReadOnly, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 803, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OpenLinks;

    PROCEDURE (this: Workbook) Post* ((* optional *) DestName: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(DestName, arg[0]);
        CtlC.CallParMethod(this, 1166, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Post;

    PROCEDURE (this: Workbook) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Workbook) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Workbook) Protect* ((* optional *) Password: CtlT.Any; Structure: CtlT.Any; Windows: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[2]);
        CtlC.AnyVar(Structure, arg[1]);
        CtlC.AnyVar(Windows, arg[0]);
        CtlC.CallParMethod(this, 282, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Protect;

    PROCEDURE (this: Workbook) Reply* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 977, ret);
        RETURN CtlC.VarAny(ret)
    END Reply;

    PROCEDURE (this: Workbook) ReplyAll* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 978, ret);
        RETURN CtlC.VarAny(ret)
    END ReplyAll;

    PROCEDURE (this: Workbook) Route* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 946, ret);
        RETURN CtlC.VarAny(ret)
    END Route;

    PROCEDURE (this: Workbook) RunAutoMacros* (Which: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Which, arg[0]);
        CtlC.CallParMethod(this, 634, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RunAutoMacros;

    PROCEDURE (this: Workbook) Save* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 283, ret);
        RETURN CtlC.VarAny(ret)
    END Save;

    PROCEDURE (this: Workbook) SaveAs* ((* optional *) Filename: CtlT.Any; FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any; AccessMode: CtlT.Any; ConflictResolution: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[7]);
        CtlC.AnyVar(FileFormat, arg[6]);
        CtlC.AnyVar(Password, arg[5]);
        CtlC.AnyVar(WriteResPassword, arg[4]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[3]);
        CtlC.AnyVar(CreateBackup, arg[2]);
        CtlC.AnyVar(AccessMode, arg[1]);
        CtlC.AnyVar(ConflictResolution, arg[0]);
        CtlC.CallParMethod(this, 284, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SaveAs;

    PROCEDURE (this: Workbook) SaveCopyAs* ((* optional *) Filename: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 175, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SaveCopyAs;

    PROCEDURE (this: Workbook) SendMail* (Recipients: CtlT.Any; (* optional *) Subject: CtlT.Any; ReturnReceipt: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Recipients, arg[2]);
        CtlC.AnyVar(Subject, arg[1]);
        CtlC.AnyVar(ReturnReceipt, arg[0]);
        CtlC.CallParMethod(this, 947, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SendMail;

    PROCEDURE (this: Workbook) SendMailer* ((* optional *) FileFormat: CtlT.Any; Priority: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(FileFormat, arg[1]);
        CtlC.AnyVar(Priority, arg[0]);
        CtlC.CallParMethod(this, 980, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SendMailer;

    PROCEDURE (this: Workbook) SetLinkOnData* (Name: CtlT.Any; (* optional *) Procedure: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[1]);
        CtlC.AnyVar(Procedure, arg[0]);
        CtlC.CallParMethod(this, 809, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SetLinkOnData;

    PROCEDURE (this: Workbook) Sheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 485, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Sheets;

    PROCEDURE (this: Workbook) Styles* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 493, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Styles;

    PROCEDURE (this: Workbook) Unprotect* ((* optional *) Password: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Unprotect;

    PROCEDURE (this: Workbook) UpdateFromFile* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 995, ret);
        RETURN CtlC.VarAny(ret)
    END UpdateFromFile;

    PROCEDURE (this: Workbook) UpdateLink* ((* optional *) Name: CtlT.Any; Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 804, arg, ret);
        RETURN CtlC.VarAny(ret)
    END UpdateLink;

    PROCEDURE (this: Workbook) Windows* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 430, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Windows;

    PROCEDURE (this: Workbook) Worksheets* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 494, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Worksheets;


    (* ---------- Workbooks ---------- *)

    PROCEDURE (this: Workbooks) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Workbooks) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Workbooks) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Workbooks) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Workbooks) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Workbooks) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Workbooks) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Workbooks) Add* ((* optional *) Template: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Template, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Workbooks) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Workbooks) Close* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 277, ret);
        RETURN CtlC.VarAny(ret)
    END Close;

    PROCEDURE (this: Workbooks) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Workbooks) Open* (Filename: CtlT.Any; (* optional *) UpdateLinks: CtlT.Any; ReadOnly: CtlT.Any; Format: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; IgnoreReadOnlyRecommended: CtlT.Any; Origin: CtlT.Any; Delimiter: CtlT.Any; Editable: CtlT.Any; Notify: CtlT.Any; Converter: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 12 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[11]);
        CtlC.AnyVar(UpdateLinks, arg[10]);
        CtlC.AnyVar(ReadOnly, arg[9]);
        CtlC.AnyVar(Format, arg[8]);
        CtlC.AnyVar(Password, arg[7]);
        CtlC.AnyVar(WriteResPassword, arg[6]);
        CtlC.AnyVar(IgnoreReadOnlyRecommended, arg[5]);
        CtlC.AnyVar(Origin, arg[4]);
        CtlC.AnyVar(Delimiter, arg[3]);
        CtlC.AnyVar(Editable, arg[2]);
        CtlC.AnyVar(Notify, arg[1]);
        CtlC.AnyVar(Converter, arg[0]);
        CtlC.CallParMethod(this, 682, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Open;

    PROCEDURE (this: Workbooks) OpenText* (Filename: CtlT.Any; (* optional *) Origin: CtlT.Any; StartRow: CtlT.Any; DataType: CtlT.Any; TextQualifier: CtlT.Any; ConsecutiveDelimiter: CtlT.Any; Tab: CtlT.Any; Semicolon: CtlT.Any; Comma: CtlT.Any; Space: CtlT.Any; Other: CtlT.Any; OtherChar: CtlT.Any; FieldInfo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 13 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[12]);
        CtlC.AnyVar(Origin, arg[11]);
        CtlC.AnyVar(StartRow, arg[10]);
        CtlC.AnyVar(DataType, arg[9]);
        CtlC.AnyVar(TextQualifier, arg[8]);
        CtlC.AnyVar(ConsecutiveDelimiter, arg[7]);
        CtlC.AnyVar(Tab, arg[6]);
        CtlC.AnyVar(Semicolon, arg[5]);
        CtlC.AnyVar(Comma, arg[4]);
        CtlC.AnyVar(Space, arg[3]);
        CtlC.AnyVar(Other, arg[2]);
        CtlC.AnyVar(OtherChar, arg[1]);
        CtlC.AnyVar(FieldInfo, arg[0]);
        CtlC.CallParMethod(this, 683, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OpenText;


    (* ---------- Sheets ---------- *)

    PROCEDURE (this: Sheets) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Sheets) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Sheets) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Sheets) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Sheets) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Sheets) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Sheets) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Sheets) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Sheets) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Sheets) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any; Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[3]);
        CtlC.AnyVar(After, arg[2]);
        CtlC.AnyVar(Count, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Sheets) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Sheets) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Sheets) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Sheets) FillAcrossSheets* (Range: CtlT.Any; (* optional *) Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Range, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 469, arg, ret);
        RETURN CtlC.VarAny(ret)
    END FillAcrossSheets;

    PROCEDURE (this: Sheets) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Sheets) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: Sheets) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Sheets) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Sheets) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Worksheet ---------- *)

    PROCEDURE (this: Worksheet) AutoFilterMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 792)
    END AutoFilterMode;

    PROCEDURE (this: Worksheet) PUTAutoFilterMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 792, val)
    END PUTAutoFilterMode;

    PROCEDURE (this: Worksheet) CircularReference* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1069)
    END CircularReference;

    PROCEDURE (this: Worksheet) PUTCircularReference* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1069, val)
    END PUTCircularReference;

    PROCEDURE (this: Worksheet) ConsolidationFunction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 789)
    END ConsolidationFunction;

    PROCEDURE (this: Worksheet) PUTConsolidationFunction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 789, val)
    END PUTConsolidationFunction;

    PROCEDURE (this: Worksheet) ConsolidationOptions* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 790)
    END ConsolidationOptions;

    PROCEDURE (this: Worksheet) PUTConsolidationOptions* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 790, val)
    END PUTConsolidationOptions;

    PROCEDURE (this: Worksheet) ConsolidationSources* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 791)
    END ConsolidationSources;

    PROCEDURE (this: Worksheet) PUTConsolidationSources* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 791, val)
    END PUTConsolidationSources;

    PROCEDURE (this: Worksheet) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Worksheet) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Worksheet) DisplayAutomaticPageBreaks* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 643)
    END DisplayAutomaticPageBreaks;

    PROCEDURE (this: Worksheet) PUTDisplayAutomaticPageBreaks* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 643, val)
    END PUTDisplayAutomaticPageBreaks;

    PROCEDURE (this: Worksheet) EnableAutoFilter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1156)
    END EnableAutoFilter;

    PROCEDURE (this: Worksheet) PUTEnableAutoFilter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1156, val)
    END PUTEnableAutoFilter;

    PROCEDURE (this: Worksheet) EnableOutlining* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1157)
    END EnableOutlining;

    PROCEDURE (this: Worksheet) PUTEnableOutlining* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1157, val)
    END PUTEnableOutlining;

    PROCEDURE (this: Worksheet) EnablePivotTable* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1158)
    END EnablePivotTable;

    PROCEDURE (this: Worksheet) PUTEnablePivotTable* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1158, val)
    END PUTEnablePivotTable;

    PROCEDURE (this: Worksheet) FilterMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 800)
    END FilterMode;

    PROCEDURE (this: Worksheet) PUTFilterMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 800, val)
    END PUTFilterMode;

    PROCEDURE (this: Worksheet) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Worksheet) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Worksheet) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Worksheet) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Worksheet) Next* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 502)
    END Next;

    PROCEDURE (this: Worksheet) PUTNext* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 502, val)
    END PUTNext;

    PROCEDURE (this: Worksheet) OnCalculate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 625)
    END OnCalculate;

    PROCEDURE (this: Worksheet) PUTOnCalculate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 625, val)
    END PUTOnCalculate;

    PROCEDURE (this: Worksheet) OnData* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 629)
    END OnData;

    PROCEDURE (this: Worksheet) PUTOnData* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 629, val)
    END PUTOnData;

    PROCEDURE (this: Worksheet) OnDoubleClick* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: Worksheet) PUTOnDoubleClick* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 628, val)
    END PUTOnDoubleClick;

    PROCEDURE (this: Worksheet) OnEntry* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 627)
    END OnEntry;

    PROCEDURE (this: Worksheet) PUTOnEntry* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 627, val)
    END PUTOnEntry;

    PROCEDURE (this: Worksheet) OnSheetActivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: Worksheet) PUTOnSheetActivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1031, val)
    END PUTOnSheetActivate;

    PROCEDURE (this: Worksheet) OnSheetDeactivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: Worksheet) PUTOnSheetDeactivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1081, val)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: Worksheet) Outline* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 102)
    END Outline;

    PROCEDURE (this: Worksheet) PUTOutline* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 102, val)
    END PUTOutline;

    PROCEDURE (this: Worksheet) PageSetup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 998)
    END PageSetup;

    PROCEDURE (this: Worksheet) PUTPageSetup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 998, val)
    END PUTPageSetup;

    PROCEDURE (this: Worksheet) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Worksheet) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Worksheet) Previous* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 503)
    END Previous;

    PROCEDURE (this: Worksheet) PUTPrevious* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 503, val)
    END PUTPrevious;

    PROCEDURE (this: Worksheet) ProtectContents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 292)
    END ProtectContents;

    PROCEDURE (this: Worksheet) PUTProtectContents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 292, val)
    END PUTProtectContents;

    PROCEDURE (this: Worksheet) ProtectDrawingObjects* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 293)
    END ProtectDrawingObjects;

    PROCEDURE (this: Worksheet) PUTProtectDrawingObjects* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 293, val)
    END PUTProtectDrawingObjects;

    PROCEDURE (this: Worksheet) ProtectionMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: Worksheet) PUTProtectionMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1159, val)
    END PUTProtectionMode;

    PROCEDURE (this: Worksheet) ProtectScenarios* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 294)
    END ProtectScenarios;

    PROCEDURE (this: Worksheet) PUTProtectScenarios* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 294, val)
    END PUTProtectScenarios;

    PROCEDURE (this: Worksheet) StandardHeight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 407)
    END StandardHeight;

    PROCEDURE (this: Worksheet) PUTStandardHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 407, val)
    END PUTStandardHeight;

    PROCEDURE (this: Worksheet) StandardWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 408)
    END StandardWidth;

    PROCEDURE (this: Worksheet) PUTStandardWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 408, val)
    END PUTStandardWidth;

    PROCEDURE (this: Worksheet) TransitionExpEval* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 401)
    END TransitionExpEval;

    PROCEDURE (this: Worksheet) PUTTransitionExpEval* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 401, val)
    END PUTTransitionExpEval;

    PROCEDURE (this: Worksheet) TransitionFormEntry* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 402)
    END TransitionFormEntry;

    PROCEDURE (this: Worksheet) PUTTransitionFormEntry* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 402, val)
    END PUTTransitionFormEntry;

    PROCEDURE (this: Worksheet) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: Worksheet) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: Worksheet) UsedRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 412)
    END UsedRange;

    PROCEDURE (this: Worksheet) PUTUsedRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 412, val)
    END PUTUsedRange;

    PROCEDURE (this: Worksheet) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Worksheet) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Worksheet) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: Worksheet) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Worksheet) Arcs* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 760, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Arcs;

    PROCEDURE (this: Worksheet) Buttons* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 557, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Buttons;

    PROCEDURE (this: Worksheet) Calculate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 279, ret);
        RETURN CtlC.VarAny(ret)
    END Calculate;

    PROCEDURE (this: Worksheet) Cells* ((* optional *) RowIndex: CtlT.Any; ColumnIndex: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowIndex, arg[1]);
        CtlC.AnyVar(ColumnIndex, arg[0]);
        CtlC.CallParMethod(this, 238, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Cells;

    PROCEDURE (this: Worksheet) ChartObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1060, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChartObjects;

    PROCEDURE (this: Worksheet) CheckBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 824, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckBoxes;

    PROCEDURE (this: Worksheet) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Worksheet) ClearArrows* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 970, ret);
        RETURN CtlC.VarAny(ret)
    END ClearArrows;

    PROCEDURE (this: Worksheet) Columns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 241, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Columns;

    PROCEDURE (this: Worksheet) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Worksheet) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Worksheet) DrawingObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 88, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DrawingObjects;

    PROCEDURE (this: Worksheet) Drawings* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 772, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Drawings;

    PROCEDURE (this: Worksheet) DropDowns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 836, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DropDowns;

    PROCEDURE (this: Worksheet) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: Worksheet) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: Worksheet) GroupBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 834, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GroupBoxes;

    PROCEDURE (this: Worksheet) GroupObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1113, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GroupObjects;

    PROCEDURE (this: Worksheet) Labels* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 841, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Labels;

    PROCEDURE (this: Worksheet) Lines* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 767, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Lines;

    PROCEDURE (this: Worksheet) ListBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 832, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ListBoxes;

    PROCEDURE (this: Worksheet) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: Worksheet) Names* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 442, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Names;

    PROCEDURE (this: Worksheet) OLEObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 799, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OLEObjects;

    PROCEDURE (this: Worksheet) OptionButtons* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 826, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OptionButtons;

    PROCEDURE (this: Worksheet) Ovals* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 801, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Ovals;

    PROCEDURE (this: Worksheet) Paste* ((* optional *) Destination: CtlT.Any; Link: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[1]);
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 211, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Paste;

    PROCEDURE (this: Worksheet) PasteSpecial* ((* optional *) Format: CtlT.Any; Link: CtlT.Any; DisplayAsIcon: CtlT.Any; IconFileName: CtlT.Any; IconIndex: CtlT.Any; IconLabel: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Format, arg[5]);
        CtlC.AnyVar(Link, arg[4]);
        CtlC.AnyVar(DisplayAsIcon, arg[3]);
        CtlC.AnyVar(IconFileName, arg[2]);
        CtlC.AnyVar(IconIndex, arg[1]);
        CtlC.AnyVar(IconLabel, arg[0]);
        CtlC.CallParMethod(this, 1027, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PasteSpecial;

    PROCEDURE (this: Worksheet) Pictures* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 771, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Pictures;

    PROCEDURE (this: Worksheet) PivotTables* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 690, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PivotTables;

    PROCEDURE (this: Worksheet) PivotTableWizard* ((* optional *) SourceType: CtlT.Any; SourceData: CtlT.Any; TableDestination: CtlT.Any; TableName: CtlT.Any; RowGrand: CtlT.Any; ColumnGrand: CtlT.Any; SaveData: CtlT.Any; HasAutoFormat: CtlT.Any; AutoPage: CtlT.Any; Reserved: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 10 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SourceType, arg[9]);
        CtlC.AnyVar(SourceData, arg[8]);
        CtlC.AnyVar(TableDestination, arg[7]);
        CtlC.AnyVar(TableName, arg[6]);
        CtlC.AnyVar(RowGrand, arg[5]);
        CtlC.AnyVar(ColumnGrand, arg[4]);
        CtlC.AnyVar(SaveData, arg[3]);
        CtlC.AnyVar(HasAutoFormat, arg[2]);
        CtlC.AnyVar(AutoPage, arg[1]);
        CtlC.AnyVar(Reserved, arg[0]);
        CtlC.CallParMethod(this, 684, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PivotTableWizard;

    PROCEDURE (this: Worksheet) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Worksheet) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Worksheet) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Protect;

    PROCEDURE (this: Worksheet) Range* ((* optional *) Cell1: CtlT.Any; Cell2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell1, arg[1]);
        CtlC.AnyVar(Cell2, arg[0]);
        CtlC.CallParMethod(this, 197, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Range;

    PROCEDURE (this: Worksheet) Rectangles* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 774, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Rectangles;

    PROCEDURE (this: Worksheet) Rows* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 258, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Rows;

    PROCEDURE (this: Worksheet) SaveAs* (Filename: CtlT.Any; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[5]);
        CtlC.AnyVar(FileFormat, arg[4]);
        CtlC.AnyVar(Password, arg[3]);
        CtlC.AnyVar(WriteResPassword, arg[2]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[1]);
        CtlC.AnyVar(CreateBackup, arg[0]);
        CtlC.CallParMethod(this, 284, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SaveAs;

    PROCEDURE (this: Worksheet) Scenarios* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 908, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Scenarios;

    PROCEDURE (this: Worksheet) ScrollBars* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 830, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ScrollBars;

    PROCEDURE (this: Worksheet) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Worksheet) SetBackgroundPicture* ((* optional *) Filename: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 1188, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SetBackgroundPicture;

    PROCEDURE (this: Worksheet) ShowAllData* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 794, ret);
        RETURN CtlC.VarAny(ret)
    END ShowAllData;

    PROCEDURE (this: Worksheet) ShowDataForm* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 409, ret);
        RETURN CtlC.VarAny(ret)
    END ShowDataForm;

    PROCEDURE (this: Worksheet) Spinners* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 838, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Spinners;

    PROCEDURE (this: Worksheet) TextBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 777, arg, ret);
        RETURN CtlC.VarAny(ret)
    END TextBoxes;

    PROCEDURE (this: Worksheet) Unprotect* ((* optional *) Password: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Unprotect;


    (* ---------- Worksheets ---------- *)

    PROCEDURE (this: Worksheets) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Worksheets) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Worksheets) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Worksheets) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Worksheets) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Worksheets) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Worksheets) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Worksheets) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Worksheets) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Worksheets) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any; Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[3]);
        CtlC.AnyVar(After, arg[2]);
        CtlC.AnyVar(Count, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Worksheets) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Worksheets) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Worksheets) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Worksheets) FillAcrossSheets* (Range: CtlT.Any; (* optional *) Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Range, arg[1]);
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 469, arg, ret);
        RETURN CtlC.VarAny(ret)
    END FillAcrossSheets;

    PROCEDURE (this: Worksheets) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Worksheets) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: Worksheets) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Worksheets) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Worksheets) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- PivotTable ---------- *)

    PROCEDURE (this: PivotTable) ColumnFields* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 713)
    END ColumnFields;

    PROCEDURE (this: PivotTable) PUTColumnFields* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 713, val)
    END PUTColumnFields;

    PROCEDURE (this: PivotTable) ColumnGrand* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 694)
    END ColumnGrand;

    PROCEDURE (this: PivotTable) PUTColumnGrand* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 694, val)
    END PUTColumnGrand;

    PROCEDURE (this: PivotTable) ColumnRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 702)
    END ColumnRange;

    PROCEDURE (this: PivotTable) PUTColumnRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 702, val)
    END PUTColumnRange;

    PROCEDURE (this: PivotTable) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PivotTable) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PivotTable) DataBodyRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 705)
    END DataBodyRange;

    PROCEDURE (this: PivotTable) PUTDataBodyRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 705, val)
    END PUTDataBodyRange;

    PROCEDURE (this: PivotTable) DataFields* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 715)
    END DataFields;

    PROCEDURE (this: PivotTable) PUTDataFields* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 715, val)
    END PUTDataFields;

    PROCEDURE (this: PivotTable) DataLabelRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 704)
    END DataLabelRange;

    PROCEDURE (this: PivotTable) PUTDataLabelRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 704, val)
    END PUTDataLabelRange;

    PROCEDURE (this: PivotTable) HasAutoFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 695)
    END HasAutoFormat;

    PROCEDURE (this: PivotTable) PUTHasAutoFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 695, val)
    END PUTHasAutoFormat;

    PROCEDURE (this: PivotTable) HiddenFields* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 711)
    END HiddenFields;

    PROCEDURE (this: PivotTable) PUTHiddenFields* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 711, val)
    END PUTHiddenFields;

    PROCEDURE (this: PivotTable) InnerDetail* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 698)
    END InnerDetail;

    PROCEDURE (this: PivotTable) PUTInnerDetail* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 698, val)
    END PUTInnerDetail;

    PROCEDURE (this: PivotTable) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: PivotTable) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: PivotTable) PageFields* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 714)
    END PageFields;

    PROCEDURE (this: PivotTable) PUTPageFields* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 714, val)
    END PUTPageFields;

    PROCEDURE (this: PivotTable) PageRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 703)
    END PageRange;

    PROCEDURE (this: PivotTable) PUTPageRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 703, val)
    END PUTPageRange;

    PROCEDURE (this: PivotTable) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PivotTable) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PivotTable) RefreshDate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 696)
    END RefreshDate;

    PROCEDURE (this: PivotTable) PUTRefreshDate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 696, val)
    END PUTRefreshDate;

    PROCEDURE (this: PivotTable) RefreshName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 697)
    END RefreshName;

    PROCEDURE (this: PivotTable) PUTRefreshName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 697, val)
    END PUTRefreshName;

    PROCEDURE (this: PivotTable) RowFields* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 712)
    END RowFields;

    PROCEDURE (this: PivotTable) PUTRowFields* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 712, val)
    END PUTRowFields;

    PROCEDURE (this: PivotTable) RowGrand* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 693)
    END RowGrand;

    PROCEDURE (this: PivotTable) PUTRowGrand* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 693, val)
    END PUTRowGrand;

    PROCEDURE (this: PivotTable) RowRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 701)
    END RowRange;

    PROCEDURE (this: PivotTable) PUTRowRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 701, val)
    END PUTRowRange;

    PROCEDURE (this: PivotTable) SaveData* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 692)
    END SaveData;

    PROCEDURE (this: PivotTable) PUTSaveData* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 692, val)
    END PUTSaveData;

    PROCEDURE (this: PivotTable) SourceData* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 686)
    END SourceData;

    PROCEDURE (this: PivotTable) PUTSourceData* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 686, val)
    END PUTSourceData;

    PROCEDURE (this: PivotTable) TableRange1* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 699)
    END TableRange1;

    PROCEDURE (this: PivotTable) PUTTableRange1* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 699, val)
    END PUTTableRange1;

    PROCEDURE (this: PivotTable) TableRange2* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 700)
    END TableRange2;

    PROCEDURE (this: PivotTable) PUTTableRange2* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 700, val)
    END PUTTableRange2;

    PROCEDURE (this: PivotTable) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: PivotTable) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: PivotTable) VisibleFields* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 710)
    END VisibleFields;

    PROCEDURE (this: PivotTable) PUTVisibleFields* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 710, val)
    END PUTVisibleFields;

    PROCEDURE (this: PivotTable) AddFields* ((* optional *) RowFields: CtlT.Any; ColumnFields: CtlT.Any; PageFields: CtlT.Any; AddToTable: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowFields, arg[3]);
        CtlC.AnyVar(ColumnFields, arg[2]);
        CtlC.AnyVar(PageFields, arg[1]);
        CtlC.AnyVar(AddToTable, arg[0]);
        CtlC.CallParMethod(this, 708, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddFields;

    PROCEDURE (this: PivotTable) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: PivotTable) PivotFields* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 718, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PivotFields;

    PROCEDURE (this: PivotTable) RefreshTable* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 717, ret);
        RETURN CtlC.VarAny(ret)
    END RefreshTable;

    PROCEDURE (this: PivotTable) ShowPages* ((* optional *) PageField: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(PageField, arg[0]);
        CtlC.CallParMethod(this, 706, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ShowPages;


    (* ---------- PivotTables ---------- *)

    PROCEDURE (this: PivotTables) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: PivotTables) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: PivotTables) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PivotTables) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PivotTables) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PivotTables) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PivotTables) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: PivotTables) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: PivotTables) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- PivotField ---------- *)

    PROCEDURE (this: PivotField) BaseField* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 734)
    END BaseField;

    PROCEDURE (this: PivotField) PUTBaseField* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 734, val)
    END PUTBaseField;

    PROCEDURE (this: PivotField) BaseItem* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 735)
    END BaseItem;

    PROCEDURE (this: PivotField) PUTBaseItem* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 735, val)
    END PUTBaseItem;

    PROCEDURE (this: PivotField) Calculation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 316)
    END Calculation;

    PROCEDURE (this: PivotField) PUTCalculation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 316, val)
    END PUTCalculation;

    PROCEDURE (this: PivotField) ChildField* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 736)
    END ChildField;

    PROCEDURE (this: PivotField) PUTChildField* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 736, val)
    END PUTChildField;

    PROCEDURE (this: PivotField) ChildItems* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 730)
    END ChildItems;

    PROCEDURE (this: PivotField) PUTChildItems* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 730, val)
    END PUTChildItems;

    PROCEDURE (this: PivotField) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PivotField) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PivotField) CurrentPage* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 738)
    END CurrentPage;

    PROCEDURE (this: PivotField) PUTCurrentPage* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 738, val)
    END PUTCurrentPage;

    PROCEDURE (this: PivotField) DataRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 720)
    END DataRange;

    PROCEDURE (this: PivotField) PUTDataRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 720, val)
    END PUTDataRange;

    PROCEDURE (this: PivotField) DataType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 722)
    END DataType;

    PROCEDURE (this: PivotField) PUTDataType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 722, val)
    END PUTDataType;

    PROCEDURE (this: PivotField) Function* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 899)
    END Function;

    PROCEDURE (this: PivotField) PUTFunction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 899, val)
    END PUTFunction;

    PROCEDURE (this: PivotField) GroupLevel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 723)
    END GroupLevel;

    PROCEDURE (this: PivotField) PUTGroupLevel* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 723, val)
    END PUTGroupLevel;

    PROCEDURE (this: PivotField) HiddenItems* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 728)
    END HiddenItems;

    PROCEDURE (this: PivotField) PUTHiddenItems* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 728, val)
    END PUTHiddenItems;

    PROCEDURE (this: PivotField) LabelRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 719)
    END LabelRange;

    PROCEDURE (this: PivotField) PUTLabelRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 719, val)
    END PUTLabelRange;

    PROCEDURE (this: PivotField) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: PivotField) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: PivotField) NumberFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 193)
    END NumberFormat;

    PROCEDURE (this: PivotField) PUTNumberFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 193, val)
    END PUTNumberFormat;

    PROCEDURE (this: PivotField) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: PivotField) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: PivotField) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PivotField) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PivotField) ParentField* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 732)
    END ParentField;

    PROCEDURE (this: PivotField) PUTParentField* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 732, val)
    END PUTParentField;

    PROCEDURE (this: PivotField) ParentItems* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 729)
    END ParentItems;

    PROCEDURE (this: PivotField) PUTParentItems* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 729, val)
    END PUTParentItems;

    PROCEDURE (this: PivotField) Position* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 133)
    END Position;

    PROCEDURE (this: PivotField) PUTPosition* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 133, val)
    END PUTPosition;

    PROCEDURE (this: PivotField) SourceName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 721)
    END SourceName;

    PROCEDURE (this: PivotField) PUTSourceName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 721, val)
    END PUTSourceName;

    PROCEDURE (this: PivotField) Subtotals* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 733)
    END Subtotals;

    PROCEDURE (this: PivotField) PUTSubtotals* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 733, val)
    END PUTSubtotals;

    PROCEDURE (this: PivotField) TotalLevels* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 724)
    END TotalLevels;

    PROCEDURE (this: PivotField) PUTTotalLevels* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 724, val)
    END PUTTotalLevels;

    PROCEDURE (this: PivotField) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: PivotField) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: PivotField) VisibleItems* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 727)
    END VisibleItems;

    PROCEDURE (this: PivotField) PUTVisibleItems* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 727, val)
    END PUTVisibleItems;

    PROCEDURE (this: PivotField) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: PivotField) PivotItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 737, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PivotItems;


    (* ---------- PivotFields ---------- *)

    PROCEDURE (this: PivotFields) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: PivotFields) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: PivotFields) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PivotFields) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PivotFields) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PivotFields) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PivotFields) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: PivotFields) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: PivotFields) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- PivotItem ---------- *)

    PROCEDURE (this: PivotItem) ChildItems* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 730)
    END ChildItems;

    PROCEDURE (this: PivotItem) PUTChildItems* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 730, val)
    END PUTChildItems;

    PROCEDURE (this: PivotItem) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PivotItem) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PivotItem) DataRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 720)
    END DataRange;

    PROCEDURE (this: PivotItem) PUTDataRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 720, val)
    END PUTDataRange;

    PROCEDURE (this: PivotItem) LabelRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 719)
    END LabelRange;

    PROCEDURE (this: PivotItem) PUTLabelRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 719, val)
    END PUTLabelRange;

    PROCEDURE (this: PivotItem) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: PivotItem) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: PivotItem) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PivotItem) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PivotItem) ParentItem* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 741)
    END ParentItem;

    PROCEDURE (this: PivotItem) PUTParentItem* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 741, val)
    END PUTParentItem;

    PROCEDURE (this: PivotItem) ParentShowDetail* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 739)
    END ParentShowDetail;

    PROCEDURE (this: PivotItem) PUTParentShowDetail* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 739, val)
    END PUTParentShowDetail;

    PROCEDURE (this: PivotItem) Position* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 133)
    END Position;

    PROCEDURE (this: PivotItem) PUTPosition* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 133, val)
    END PUTPosition;

    PROCEDURE (this: PivotItem) ShowDetail* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 585)
    END ShowDetail;

    PROCEDURE (this: PivotItem) PUTShowDetail* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 585, val)
    END PUTShowDetail;

    PROCEDURE (this: PivotItem) SourceName* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 721)
    END SourceName;

    PROCEDURE (this: PivotItem) PUTSourceName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 721, val)
    END PUTSourceName;

    PROCEDURE (this: PivotItem) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: PivotItem) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: PivotItem) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: PivotItem) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: PivotItem) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;


    (* ---------- PivotItems ---------- *)

    PROCEDURE (this: PivotItems) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: PivotItems) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: PivotItems) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PivotItems) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PivotItems) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PivotItems) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PivotItems) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: PivotItems) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: PivotItems) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Scenario ---------- *)

    PROCEDURE (this: Scenario) ChangingCells* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 911)
    END ChangingCells;

    PROCEDURE (this: Scenario) PUTChangingCells* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 911, val)
    END PUTChangingCells;

    PROCEDURE (this: Scenario) Comment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 910)
    END Comment;

    PROCEDURE (this: Scenario) PUTComment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 910, val)
    END PUTComment;

    PROCEDURE (this: Scenario) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Scenario) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Scenario) Hidden* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 268)
    END Hidden;

    PROCEDURE (this: Scenario) PUTHidden* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 268, val)
    END PUTHidden;

    PROCEDURE (this: Scenario) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Scenario) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Scenario) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Scenario) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Scenario) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Scenario) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Scenario) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Scenario) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Scenario) Values* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 164)
    END Values;

    PROCEDURE (this: Scenario) PUTValues* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 164, val)
    END PUTValues;

    PROCEDURE (this: Scenario) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Scenario) ChangeScenario* (ChangingCells: CtlT.Any; (* optional *) Values: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ChangingCells, arg[1]);
        CtlC.AnyVar(Values, arg[0]);
        CtlC.CallParMethod(this, 912, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChangeScenario;

    PROCEDURE (this: Scenario) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Scenario) Show* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 496, ret);
        RETURN CtlC.VarAny(ret)
    END Show;


    (* ---------- Scenarios ---------- *)

    PROCEDURE (this: Scenarios) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Scenarios) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Scenarios) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Scenarios) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Scenarios) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Scenarios) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Scenarios) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Scenarios) Add* (Name: CtlT.Any; ChangingCells: CtlT.Any; (* optional *) Values: CtlT.Any; Comment: CtlT.Any; Locked: CtlT.Any; Hidden: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[5]);
        CtlC.AnyVar(ChangingCells, arg[4]);
        CtlC.AnyVar(Values, arg[3]);
        CtlC.AnyVar(Comment, arg[2]);
        CtlC.AnyVar(Locked, arg[1]);
        CtlC.AnyVar(Hidden, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Scenarios) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Scenarios) CreateSummary* ((* optional *) ReportType: CtlT.Any; ResultCells: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ReportType, arg[1]);
        CtlC.AnyVar(ResultCells, arg[0]);
        CtlC.CallParMethod(this, 913, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CreateSummary;

    PROCEDURE (this: Scenarios) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Scenarios) Merge* (Source: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[0]);
        CtlC.CallParMethod(this, 564, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Merge;


    (* ---------- MenuBar ---------- *)

    PROCEDURE (this: MenuBar) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: MenuBar) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: MenuBar) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: MenuBar) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: MenuBar) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: MenuBar) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: MenuBar) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: MenuBar) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: MenuBar) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: MenuBar) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: MenuBar) BuiltIn* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 553, ret);
        RETURN CtlC.VarAny(ret)
    END BuiltIn;

    PROCEDURE (this: MenuBar) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: MenuBar) Menus* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 591, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Menus;

    PROCEDURE (this: MenuBar) Reset* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 555, ret);
        RETURN CtlC.VarAny(ret)
    END Reset;


    (* ---------- MenuBars ---------- *)

    PROCEDURE (this: MenuBars) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: MenuBars) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: MenuBars) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: MenuBars) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: MenuBars) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: MenuBars) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: MenuBars) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: MenuBars) Add* ((* optional *) Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: MenuBars) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: MenuBars) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Menu ---------- *)

    PROCEDURE (this: Menu) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Menu) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Menu) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Menu) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Menu) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Menu) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Menu) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Menu) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Menu) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Menu) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Menu) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Menu) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Menu) MenuItems* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 593, arg, ret);
        RETURN CtlC.VarAny(ret)
    END MenuItems;


    (* ---------- Menus ---------- *)

    PROCEDURE (this: Menus) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Menus) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Menus) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Menus) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Menus) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Menus) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Menus) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Menus) Add* (Caption: CtlT.Any; (* optional *) Before: CtlT.Any; Restore: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Caption, arg[2]);
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(Restore, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Menus) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Menus) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- MenuItem ---------- *)

    PROCEDURE (this: MenuItem) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: MenuItem) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: MenuItem) Checked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 599)
    END Checked;

    PROCEDURE (this: MenuItem) PUTChecked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 599, val)
    END PUTChecked;

    PROCEDURE (this: MenuItem) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: MenuItem) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: MenuItem) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: MenuItem) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: MenuItem) HelpContextID* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 355)
    END HelpContextID;

    PROCEDURE (this: MenuItem) PUTHelpContextID* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 355, val)
    END PUTHelpContextID;

    PROCEDURE (this: MenuItem) HelpFile* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 360)
    END HelpFile;

    PROCEDURE (this: MenuItem) PUTHelpFile* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 360, val)
    END PUTHelpFile;

    PROCEDURE (this: MenuItem) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: MenuItem) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: MenuItem) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: MenuItem) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: MenuItem) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: MenuItem) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: MenuItem) StatusBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 386)
    END StatusBar;

    PROCEDURE (this: MenuItem) PUTStatusBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 386, val)
    END PUTStatusBar;

    PROCEDURE (this: MenuItem) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: MenuItem) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;


    (* ---------- MenuItems ---------- *)

    PROCEDURE (this: MenuItems) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: MenuItems) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: MenuItems) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: MenuItems) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: MenuItems) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: MenuItems) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: MenuItems) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: MenuItems) Add* (Caption: CtlT.Any; (* optional *) OnAction: CtlT.Any; ShortcutKey: CtlT.Any; Before: CtlT.Any; Restore: CtlT.Any; StatusBar: CtlT.Any; HelpFile: CtlT.Any; HelpContextID: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 8 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Caption, arg[7]);
        CtlC.AnyVar(OnAction, arg[6]);
        CtlC.AnyVar(ShortcutKey, arg[5]);
        CtlC.AnyVar(Before, arg[4]);
        CtlC.AnyVar(Restore, arg[3]);
        CtlC.AnyVar(StatusBar, arg[2]);
        CtlC.AnyVar(HelpFile, arg[1]);
        CtlC.AnyVar(HelpContextID, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: MenuItems) AddMenu* (Caption: CtlT.Any; (* optional *) Before: CtlT.Any; Restore: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Caption, arg[2]);
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(Restore, arg[0]);
        CtlC.CallParMethod(this, 598, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddMenu;

    PROCEDURE (this: MenuItems) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: MenuItems) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Window ---------- *)

    PROCEDURE (this: Window) ActiveCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 305)
    END ActiveCell;

    PROCEDURE (this: Window) PUTActiveCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 305, val)
    END PUTActiveCell;

    PROCEDURE (this: Window) ActiveChart* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 183)
    END ActiveChart;

    PROCEDURE (this: Window) PUTActiveChart* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 183, val)
    END PUTActiveChart;

    PROCEDURE (this: Window) ActivePane* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 642)
    END ActivePane;

    PROCEDURE (this: Window) PUTActivePane* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 642, val)
    END PUTActivePane;

    PROCEDURE (this: Window) ActiveSheet* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 307)
    END ActiveSheet;

    PROCEDURE (this: Window) PUTActiveSheet* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 307, val)
    END PUTActiveSheet;

    PROCEDURE (this: Window) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Window) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Window) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Window) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Window) DisplayFormulas* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 644)
    END DisplayFormulas;

    PROCEDURE (this: Window) PUTDisplayFormulas* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 644, val)
    END PUTDisplayFormulas;

    PROCEDURE (this: Window) DisplayGridlines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 645)
    END DisplayGridlines;

    PROCEDURE (this: Window) PUTDisplayGridlines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 645, val)
    END PUTDisplayGridlines;

    PROCEDURE (this: Window) DisplayHeadings* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 646)
    END DisplayHeadings;

    PROCEDURE (this: Window) PUTDisplayHeadings* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 646, val)
    END PUTDisplayHeadings;

    PROCEDURE (this: Window) DisplayHorizontalScrollBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 921)
    END DisplayHorizontalScrollBar;

    PROCEDURE (this: Window) PUTDisplayHorizontalScrollBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 921, val)
    END PUTDisplayHorizontalScrollBar;

    PROCEDURE (this: Window) DisplayOutline* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 647)
    END DisplayOutline;

    PROCEDURE (this: Window) PUTDisplayOutline* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 647, val)
    END PUTDisplayOutline;

    PROCEDURE (this: Window) DisplayRightToLeft* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 648)
    END DisplayRightToLeft;

    PROCEDURE (this: Window) PUTDisplayRightToLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 648, val)
    END PUTDisplayRightToLeft;

    PROCEDURE (this: Window) DisplayVerticalScrollBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: Window) PUTDisplayVerticalScrollBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 922, val)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: Window) DisplayWorkbookTabs* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 923)
    END DisplayWorkbookTabs;

    PROCEDURE (this: Window) PUTDisplayWorkbookTabs* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 923, val)
    END PUTDisplayWorkbookTabs;

    PROCEDURE (this: Window) DisplayZeros* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 649)
    END DisplayZeros;

    PROCEDURE (this: Window) PUTDisplayZeros* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 649, val)
    END PUTDisplayZeros;

    PROCEDURE (this: Window) FreezePanes* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 650)
    END FreezePanes;

    PROCEDURE (this: Window) PUTFreezePanes* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 650, val)
    END PUTFreezePanes;

    PROCEDURE (this: Window) GridlineColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 651)
    END GridlineColor;

    PROCEDURE (this: Window) PUTGridlineColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 651, val)
    END PUTGridlineColor;

    PROCEDURE (this: Window) GridlineColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 652)
    END GridlineColorIndex;

    PROCEDURE (this: Window) PUTGridlineColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 652, val)
    END PUTGridlineColorIndex;

    PROCEDURE (this: Window) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Window) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Window) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Window) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Window) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Window) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Window) OnWindow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 623)
    END OnWindow;

    PROCEDURE (this: Window) PUTOnWindow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 623, val)
    END PUTOnWindow;

    PROCEDURE (this: Window) PageSetup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 998)
    END PageSetup;

    PROCEDURE (this: Window) PUTPageSetup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 998, val)
    END PUTPageSetup;

    PROCEDURE (this: Window) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Window) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Window) RangeSelection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1189)
    END RangeSelection;

    PROCEDURE (this: Window) PUTRangeSelection* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1189, val)
    END PUTRangeSelection;

    PROCEDURE (this: Window) ScrollColumn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 654)
    END ScrollColumn;

    PROCEDURE (this: Window) PUTScrollColumn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 654, val)
    END PUTScrollColumn;

    PROCEDURE (this: Window) ScrollRow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 655)
    END ScrollRow;

    PROCEDURE (this: Window) PUTScrollRow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 655, val)
    END PUTScrollRow;

    PROCEDURE (this: Window) SelectedSheets* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 656)
    END SelectedSheets;

    PROCEDURE (this: Window) PUTSelectedSheets* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 656, val)
    END PUTSelectedSheets;

    PROCEDURE (this: Window) Selection* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 147)
    END Selection;

    PROCEDURE (this: Window) PUTSelection* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 147, val)
    END PUTSelection;

    PROCEDURE (this: Window) Split* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 657)
    END Split;

    PROCEDURE (this: Window) PUTSplit* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 657, val)
    END PUTSplit;

    PROCEDURE (this: Window) SplitColumn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 658)
    END SplitColumn;

    PROCEDURE (this: Window) PUTSplitColumn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 658, val)
    END PUTSplitColumn;

    PROCEDURE (this: Window) SplitHorizontal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 659)
    END SplitHorizontal;

    PROCEDURE (this: Window) PUTSplitHorizontal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 659, val)
    END PUTSplitHorizontal;

    PROCEDURE (this: Window) SplitRow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 660)
    END SplitRow;

    PROCEDURE (this: Window) PUTSplitRow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 660, val)
    END PUTSplitRow;

    PROCEDURE (this: Window) SplitVertical* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 661)
    END SplitVertical;

    PROCEDURE (this: Window) PUTSplitVertical* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 661, val)
    END PUTSplitVertical;

    PROCEDURE (this: Window) TabRatio* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 673)
    END TabRatio;

    PROCEDURE (this: Window) PUTTabRatio* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 673, val)
    END PUTTabRatio;

    PROCEDURE (this: Window) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Window) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Window) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: Window) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: Window) UsableHeight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 389)
    END UsableHeight;

    PROCEDURE (this: Window) PUTUsableHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 389, val)
    END PUTUsableHeight;

    PROCEDURE (this: Window) UsableWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 390)
    END UsableWidth;

    PROCEDURE (this: Window) PUTUsableWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 390, val)
    END PUTUsableWidth;

    PROCEDURE (this: Window) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Window) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Window) VisibleRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1118)
    END VisibleRange;

    PROCEDURE (this: Window) PUTVisibleRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1118, val)
    END PUTVisibleRange;

    PROCEDURE (this: Window) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Window) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Window) WindowNumber* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1119)
    END WindowNumber;

    PROCEDURE (this: Window) PUTWindowNumber* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1119, val)
    END PUTWindowNumber;

    PROCEDURE (this: Window) WindowState* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 396)
    END WindowState;

    PROCEDURE (this: Window) PUTWindowState* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 396, val)
    END PUTWindowState;

    PROCEDURE (this: Window) Zoom* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 663)
    END Zoom;

    PROCEDURE (this: Window) PUTZoom* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 663, val)
    END PUTZoom;

    PROCEDURE (this: Window) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: Window) ActivateNext* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1115, ret);
        RETURN CtlC.VarAny(ret)
    END ActivateNext;

    PROCEDURE (this: Window) ActivatePrevious* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1116, ret);
        RETURN CtlC.VarAny(ret)
    END ActivatePrevious;

    PROCEDURE (this: Window) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Window) Close* ((* optional *) SaveChanges: CtlT.Any; Filename: CtlT.Any; RouteWorkbook: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(SaveChanges, arg[2]);
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(RouteWorkbook, arg[0]);
        CtlC.CallParMethod(this, 277, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Close;

    PROCEDURE (this: Window) LargeScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 547, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LargeScroll;

    PROCEDURE (this: Window) NewWindow* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 280, ret);
        RETURN CtlC.VarAny(ret)
    END NewWindow;

    PROCEDURE (this: Window) Panes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 653, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Panes;

    PROCEDURE (this: Window) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Window) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Window) ScrollWorkbookTabs* ((* optional *) Sheets: CtlT.Any; Position: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Sheets, arg[1]);
        CtlC.AnyVar(Position, arg[0]);
        CtlC.CallParMethod(this, 662, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ScrollWorkbookTabs;

    PROCEDURE (this: Window) SetInfoDisplay* ((* optional *) Cell: CtlT.Any; Formula: CtlT.Any; Value: CtlT.Any; Format: CtlT.Any; Protection: CtlT.Any; Names: CtlT.Any; Precedents: CtlT.Any; Dependents: CtlT.Any; Note: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cell, arg[8]);
        CtlC.AnyVar(Formula, arg[7]);
        CtlC.AnyVar(Value, arg[6]);
        CtlC.AnyVar(Format, arg[5]);
        CtlC.AnyVar(Protection, arg[4]);
        CtlC.AnyVar(Names, arg[3]);
        CtlC.AnyVar(Precedents, arg[2]);
        CtlC.AnyVar(Dependents, arg[1]);
        CtlC.AnyVar(Note, arg[0]);
        CtlC.CallParMethod(this, 1043, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SetInfoDisplay;

    PROCEDURE (this: Window) SmallScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 548, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SmallScroll;


    (* ---------- Windows ---------- *)

    PROCEDURE (this: Windows) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Windows) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Windows) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Windows) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Windows) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Windows) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Windows) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Windows) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Windows) Arrange* ((* optional *) ArrangeStyle: CtlT.Any; ActiveWorkbook: CtlT.Any; SyncHorizontal: CtlT.Any; SyncVertical: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ArrangeStyle, arg[3]);
        CtlC.AnyVar(ActiveWorkbook, arg[2]);
        CtlC.AnyVar(SyncHorizontal, arg[1]);
        CtlC.AnyVar(SyncVertical, arg[0]);
        CtlC.CallParMethod(this, 638, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Arrange;

    PROCEDURE (this: Windows) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Pane ---------- *)

    PROCEDURE (this: Pane) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Pane) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Pane) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Pane) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Pane) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Pane) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Pane) ScrollColumn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 654)
    END ScrollColumn;

    PROCEDURE (this: Pane) PUTScrollColumn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 654, val)
    END PUTScrollColumn;

    PROCEDURE (this: Pane) ScrollRow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 655)
    END ScrollRow;

    PROCEDURE (this: Pane) PUTScrollRow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 655, val)
    END PUTScrollRow;

    PROCEDURE (this: Pane) VisibleRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1118)
    END VisibleRange;

    PROCEDURE (this: Pane) PUTVisibleRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1118, val)
    END PUTVisibleRange;

    PROCEDURE (this: Pane) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: Pane) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Pane) LargeScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 547, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LargeScroll;

    PROCEDURE (this: Pane) SmallScroll* ((* optional *) Down: CtlT.Any; Up: CtlT.Any; ToRight: CtlT.Any; ToLeft: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Down, arg[3]);
        CtlC.AnyVar(Up, arg[2]);
        CtlC.AnyVar(ToRight, arg[1]);
        CtlC.AnyVar(ToLeft, arg[0]);
        CtlC.CallParMethod(this, 548, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SmallScroll;


    (* ---------- Panes ---------- *)

    PROCEDURE (this: Panes) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Panes) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Panes) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Panes) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Panes) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Panes) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Panes) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Panes) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Name ---------- *)

    PROCEDURE (this: Name) Category* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 934)
    END Category;

    PROCEDURE (this: Name) PUTCategory* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 934, val)
    END PUTCategory;

    PROCEDURE (this: Name) CategoryLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 935)
    END CategoryLocal;

    PROCEDURE (this: Name) PUTCategoryLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 935, val)
    END PUTCategoryLocal;

    PROCEDURE (this: Name) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Name) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Name) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Name) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Name) MacroType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 936)
    END MacroType;

    PROCEDURE (this: Name) PUTMacroType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 936, val)
    END PUTMacroType;

    PROCEDURE (this: Name) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Name) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Name) NameLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 937)
    END NameLocal;

    PROCEDURE (this: Name) PUTNameLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 937, val)
    END PUTNameLocal;

    PROCEDURE (this: Name) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Name) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Name) RefersTo* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 938)
    END RefersTo;

    PROCEDURE (this: Name) PUTRefersTo* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 938, val)
    END PUTRefersTo;

    PROCEDURE (this: Name) RefersToLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 939)
    END RefersToLocal;

    PROCEDURE (this: Name) PUTRefersToLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 939, val)
    END PUTRefersToLocal;

    PROCEDURE (this: Name) RefersToR1C1* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 940)
    END RefersToR1C1;

    PROCEDURE (this: Name) PUTRefersToR1C1* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 940, val)
    END PUTRefersToR1C1;

    PROCEDURE (this: Name) RefersToR1C1Local* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 941)
    END RefersToR1C1Local;

    PROCEDURE (this: Name) PUTRefersToR1C1Local* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 941, val)
    END PUTRefersToR1C1Local;

    PROCEDURE (this: Name) RefersToRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1160)
    END RefersToRange;

    PROCEDURE (this: Name) PUTRefersToRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1160, val)
    END PUTRefersToRange;

    PROCEDURE (this: Name) ShortcutKey* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 597)
    END ShortcutKey;

    PROCEDURE (this: Name) PUTShortcutKey* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 597, val)
    END PUTShortcutKey;

    PROCEDURE (this: Name) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Name) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: Name) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Name) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Name) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Name) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;


    (* ---------- Names ---------- *)

    PROCEDURE (this: Names) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Names) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Names) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Names) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Names) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Names) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Names) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Names) Add* ((* optional *) Name: CtlT.Any; RefersTo: CtlT.Any; Visible: CtlT.Any; MacroType: CtlT.Any; ShortcutKey: CtlT.Any; Category: CtlT.Any; NameLocal: CtlT.Any; RefersToLocal: CtlT.Any; CategoryLocal: CtlT.Any; RefersToR1C1: CtlT.Any; RefersToR1C1Local: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[10]);
        CtlC.AnyVar(RefersTo, arg[9]);
        CtlC.AnyVar(Visible, arg[8]);
        CtlC.AnyVar(MacroType, arg[7]);
        CtlC.AnyVar(ShortcutKey, arg[6]);
        CtlC.AnyVar(Category, arg[5]);
        CtlC.AnyVar(NameLocal, arg[4]);
        CtlC.AnyVar(RefersToLocal, arg[3]);
        CtlC.AnyVar(CategoryLocal, arg[2]);
        CtlC.AnyVar(RefersToR1C1, arg[1]);
        CtlC.AnyVar(RefersToR1C1Local, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Names) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Names) Item* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- DrawingObjects ---------- *)

    PROCEDURE (this: DrawingObjects) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: DrawingObjects) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: DrawingObjects) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: DrawingObjects) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: DrawingObjects) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: DrawingObjects) PUTArrowHeadLength* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, val)
    END PUTArrowHeadLength;

    PROCEDURE (this: DrawingObjects) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: DrawingObjects) PUTArrowHeadStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, val)
    END PUTArrowHeadStyle;

    PROCEDURE (this: DrawingObjects) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: DrawingObjects) PUTArrowHeadWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, val)
    END PUTArrowHeadWidth;

    PROCEDURE (this: DrawingObjects) AutoSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 614)
    END AutoSize;

    PROCEDURE (this: DrawingObjects) PUTAutoSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 614, val)
    END PUTAutoSize;

    PROCEDURE (this: DrawingObjects) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: DrawingObjects) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: DrawingObjects) CancelButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 858)
    END CancelButton;

    PROCEDURE (this: DrawingObjects) PUTCancelButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 858, val)
    END PUTCancelButton;

    PROCEDURE (this: DrawingObjects) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: DrawingObjects) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: DrawingObjects) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: DrawingObjects) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: DrawingObjects) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DrawingObjects) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DrawingObjects) DefaultButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 857)
    END DefaultButton;

    PROCEDURE (this: DrawingObjects) PUTDefaultButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 857, val)
    END PUTDefaultButton;

    PROCEDURE (this: DrawingObjects) DismissButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 859)
    END DismissButton;

    PROCEDURE (this: DrawingObjects) PUTDismissButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 859, val)
    END PUTDismissButton;

    PROCEDURE (this: DrawingObjects) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: DrawingObjects) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: DrawingObjects) DisplayVerticalScrollBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: DrawingObjects) PUTDisplayVerticalScrollBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 922, val)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: DrawingObjects) DropDownLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 848)
    END DropDownLines;

    PROCEDURE (this: DrawingObjects) PUTDropDownLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 848, val)
    END PUTDropDownLines;

    PROCEDURE (this: DrawingObjects) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: DrawingObjects) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: DrawingObjects) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: DrawingObjects) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: DrawingObjects) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: DrawingObjects) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: DrawingObjects) HelpButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 860)
    END HelpButton;

    PROCEDURE (this: DrawingObjects) PUTHelpButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 860, val)
    END PUTHelpButton;

    PROCEDURE (this: DrawingObjects) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: DrawingObjects) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: DrawingObjects) InputType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 854)
    END InputType;

    PROCEDURE (this: DrawingObjects) PUTInputType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 854, val)
    END PUTInputType;

    PROCEDURE (this: DrawingObjects) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: DrawingObjects) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: DrawingObjects) LargeChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 845)
    END LargeChange;

    PROCEDURE (this: DrawingObjects) PUTLargeChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 845, val)
    END PUTLargeChange;

    PROCEDURE (this: DrawingObjects) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: DrawingObjects) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: DrawingObjects) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: DrawingObjects) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: DrawingObjects) List* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 861)
    END List;

    PROCEDURE (this: DrawingObjects) PUTList* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 861, val)
    END PUTList;

    PROCEDURE (this: DrawingObjects) ListFillRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 847)
    END ListFillRange;

    PROCEDURE (this: DrawingObjects) PUTListFillRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 847, val)
    END PUTListFillRange;

    PROCEDURE (this: DrawingObjects) ListIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 850)
    END ListIndex;

    PROCEDURE (this: DrawingObjects) PUTListIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 850, val)
    END PUTListIndex;

    PROCEDURE (this: DrawingObjects) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: DrawingObjects) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: DrawingObjects) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: DrawingObjects) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: DrawingObjects) Max* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 842)
    END Max;

    PROCEDURE (this: DrawingObjects) PUTMax* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 842, val)
    END PUTMax;

    PROCEDURE (this: DrawingObjects) Min* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 843)
    END Min;

    PROCEDURE (this: DrawingObjects) PUTMin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 843, val)
    END PUTMin;

    PROCEDURE (this: DrawingObjects) MultiLine* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 855)
    END MultiLine;

    PROCEDURE (this: DrawingObjects) PUTMultiLine* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 855, val)
    END PUTMultiLine;

    PROCEDURE (this: DrawingObjects) MultiSelect* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 32)
    END MultiSelect;

    PROCEDURE (this: DrawingObjects) PUTMultiSelect* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 32, val)
    END PUTMultiSelect;

    PROCEDURE (this: DrawingObjects) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: DrawingObjects) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: DrawingObjects) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: DrawingObjects) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: DrawingObjects) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DrawingObjects) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DrawingObjects) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: DrawingObjects) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: DrawingObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: DrawingObjects) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: DrawingObjects) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: DrawingObjects) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: DrawingObjects) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: DrawingObjects) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: DrawingObjects) Selected* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1123)
    END Selected;

    PROCEDURE (this: DrawingObjects) PUTSelected* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1123, val)
    END PUTSelected;

    PROCEDURE (this: DrawingObjects) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: DrawingObjects) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: DrawingObjects) SmallChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 844)
    END SmallChange;

    PROCEDURE (this: DrawingObjects) PUTSmallChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 844, val)
    END PUTSmallChange;

    PROCEDURE (this: DrawingObjects) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: DrawingObjects) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: DrawingObjects) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: DrawingObjects) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: DrawingObjects) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: DrawingObjects) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: DrawingObjects) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: DrawingObjects) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: DrawingObjects) Vertices* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 621)
    END Vertices;

    PROCEDURE (this: DrawingObjects) PUTVertices* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 621, val)
    END PUTVertices;

    PROCEDURE (this: DrawingObjects) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: DrawingObjects) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: DrawingObjects) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: DrawingObjects) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: DrawingObjects) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: DrawingObjects) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: DrawingObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: DrawingObjects) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddItem;

    PROCEDURE (this: DrawingObjects) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DrawingObjects) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: DrawingObjects) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: DrawingObjects) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: DrawingObjects) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: DrawingObjects) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: DrawingObjects) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: DrawingObjects) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DrawingObjects) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: DrawingObjects) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: DrawingObjects) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: DrawingObjects) LinkCombo* ((* optional *) Link: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 856, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LinkCombo;

    PROCEDURE (this: DrawingObjects) RemoveAllItems* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 853, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveAllItems;

    PROCEDURE (this: DrawingObjects) RemoveItem* (Index: CtlT.Any; (* optional *) Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveItem;

    PROCEDURE (this: DrawingObjects) Reshape* (Vertex: CtlT.Any; Insert: CtlT.Any; (* optional *) Left: CtlT.Any; Top: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Vertex, arg[3]);
        CtlC.AnyVar(Insert, arg[2]);
        CtlC.AnyVar(Left, arg[1]);
        CtlC.AnyVar(Top, arg[0]);
        CtlC.CallParMethod(this, 604, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Reshape;

    PROCEDURE (this: DrawingObjects) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: DrawingObjects) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;

    PROCEDURE (this: DrawingObjects) Ungroup* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN CtlC.VarAny(ret)
    END Ungroup;


    (* ---------- GroupObject ---------- *)

    PROCEDURE (this: GroupObject) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: GroupObject) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: GroupObject) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: GroupObject) PUTArrowHeadLength* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, val)
    END PUTArrowHeadLength;

    PROCEDURE (this: GroupObject) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: GroupObject) PUTArrowHeadStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, val)
    END PUTArrowHeadStyle;

    PROCEDURE (this: GroupObject) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: GroupObject) PUTArrowHeadWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, val)
    END PUTArrowHeadWidth;

    PROCEDURE (this: GroupObject) AutoSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 614)
    END AutoSize;

    PROCEDURE (this: GroupObject) PUTAutoSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 614, val)
    END PUTAutoSize;

    PROCEDURE (this: GroupObject) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: GroupObject) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: GroupObject) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: GroupObject) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: GroupObject) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: GroupObject) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: GroupObject) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: GroupObject) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: GroupObject) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: GroupObject) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: GroupObject) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: GroupObject) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: GroupObject) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: GroupObject) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: GroupObject) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: GroupObject) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: GroupObject) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: GroupObject) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: GroupObject) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: GroupObject) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: GroupObject) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: GroupObject) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: GroupObject) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: GroupObject) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: GroupObject) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: GroupObject) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: GroupObject) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: GroupObject) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: GroupObject) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: GroupObject) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: GroupObject) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupObject) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: GroupObject) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupObject) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: GroupObject) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: GroupObject) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: GroupObject) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: GroupObject) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: GroupObject) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: GroupObject) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: GroupObject) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: GroupObject) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: GroupObject) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: GroupObject) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: GroupObject) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: GroupObject) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: GroupObject) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: GroupObject) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: GroupObject) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupObject) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: GroupObject) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: GroupObject) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: GroupObject) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: GroupObject) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: GroupObject) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: GroupObject) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: GroupObject) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: GroupObject) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: GroupObject) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: GroupObject) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;

    PROCEDURE (this: GroupObject) Ungroup* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN CtlC.VarAny(ret)
    END Ungroup;


    (* ---------- GroupObjects ---------- *)

    PROCEDURE (this: GroupObjects) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: GroupObjects) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: GroupObjects) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: GroupObjects) PUTArrowHeadLength* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, val)
    END PUTArrowHeadLength;

    PROCEDURE (this: GroupObjects) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: GroupObjects) PUTArrowHeadStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, val)
    END PUTArrowHeadStyle;

    PROCEDURE (this: GroupObjects) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: GroupObjects) PUTArrowHeadWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, val)
    END PUTArrowHeadWidth;

    PROCEDURE (this: GroupObjects) AutoSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 614)
    END AutoSize;

    PROCEDURE (this: GroupObjects) PUTAutoSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 614, val)
    END PUTAutoSize;

    PROCEDURE (this: GroupObjects) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: GroupObjects) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: GroupObjects) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: GroupObjects) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: GroupObjects) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: GroupObjects) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: GroupObjects) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: GroupObjects) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: GroupObjects) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: GroupObjects) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: GroupObjects) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: GroupObjects) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: GroupObjects) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: GroupObjects) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: GroupObjects) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: GroupObjects) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: GroupObjects) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: GroupObjects) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: GroupObjects) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: GroupObjects) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: GroupObjects) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: GroupObjects) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: GroupObjects) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: GroupObjects) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: GroupObjects) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: GroupObjects) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: GroupObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupObjects) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: GroupObjects) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupObjects) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: GroupObjects) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: GroupObjects) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: GroupObjects) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: GroupObjects) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: GroupObjects) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: GroupObjects) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: GroupObjects) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: GroupObjects) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: GroupObjects) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: GroupObjects) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: GroupObjects) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: GroupObjects) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: GroupObjects) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupObjects) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: GroupObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: GroupObjects) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: GroupObjects) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: GroupObjects) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: GroupObjects) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: GroupObjects) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: GroupObjects) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: GroupObjects) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: GroupObjects) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: GroupObjects) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: GroupObjects) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: GroupObjects) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: GroupObjects) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;

    PROCEDURE (this: GroupObjects) Ungroup* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 244, ret);
        RETURN CtlC.VarAny(ret)
    END Ungroup;


    (* ---------- Line ---------- *)

    PROCEDURE (this: Line) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: Line) PUTArrowHeadLength* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, val)
    END PUTArrowHeadLength;

    PROCEDURE (this: Line) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: Line) PUTArrowHeadStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, val)
    END PUTArrowHeadStyle;

    PROCEDURE (this: Line) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: Line) PUTArrowHeadWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, val)
    END PUTArrowHeadWidth;

    PROCEDURE (this: Line) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Line) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Line) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Line) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Line) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Line) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Line) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Line) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Line) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Line) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Line) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Line) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Line) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Line) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Line) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Line) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Line) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Line) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Line) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Line) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Line) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Line) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Line) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Line) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Line) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Line) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Line) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Line) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Line) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Line) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Line) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Line) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Line) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Line) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Line) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Line) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Line) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Line) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Line) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Line) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Line) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Line) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Line) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Line) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Line) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Lines ---------- *)

    PROCEDURE (this: Lines) ArrowHeadLength* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 611)
    END ArrowHeadLength;

    PROCEDURE (this: Lines) PUTArrowHeadLength* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 611, val)
    END PUTArrowHeadLength;

    PROCEDURE (this: Lines) ArrowHeadStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 612)
    END ArrowHeadStyle;

    PROCEDURE (this: Lines) PUTArrowHeadStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 612, val)
    END PUTArrowHeadStyle;

    PROCEDURE (this: Lines) ArrowHeadWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 613)
    END ArrowHeadWidth;

    PROCEDURE (this: Lines) PUTArrowHeadWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 613, val)
    END PUTArrowHeadWidth;

    PROCEDURE (this: Lines) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Lines) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Lines) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Lines) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Lines) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Lines) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Lines) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Lines) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Lines) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Lines) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Lines) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Lines) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Lines) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Lines) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Lines) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Lines) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Lines) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Lines) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Lines) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Lines) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Lines) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Lines) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Lines) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Lines) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Lines) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Lines) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Lines) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Lines) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Lines) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Lines) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Lines) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Lines) Add* (X1: CtlT.Any; Y1: CtlT.Any; X2: CtlT.Any; Y2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(X1, arg[3]);
        CtlC.AnyVar(Y1, arg[2]);
        CtlC.AnyVar(X2, arg[1]);
        CtlC.AnyVar(Y2, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Lines) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Lines) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Lines) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Lines) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Lines) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Lines) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Lines) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Lines) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Lines) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Lines) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Lines) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Rectangle ---------- *)

    PROCEDURE (this: Rectangle) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Rectangle) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Rectangle) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Rectangle) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Rectangle) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Rectangle) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Rectangle) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Rectangle) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Rectangle) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Rectangle) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Rectangle) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Rectangle) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Rectangle) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Rectangle) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Rectangle) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Rectangle) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Rectangle) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Rectangle) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Rectangle) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Rectangle) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Rectangle) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Rectangle) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Rectangle) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Rectangle) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Rectangle) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Rectangle) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Rectangle) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Rectangle) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Rectangle) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: Rectangle) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: Rectangle) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Rectangle) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Rectangle) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Rectangle) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Rectangle) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Rectangle) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Rectangle) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Rectangle) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Rectangle) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Rectangle) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Rectangle) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Rectangle) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Rectangle) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Rectangle) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Rectangle) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Rectangle) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Rectangle) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Rectangle) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Rectangle) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Rectangle) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Rectangle) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Rectangles ---------- *)

    PROCEDURE (this: Rectangles) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Rectangles) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Rectangles) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Rectangles) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Rectangles) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Rectangles) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Rectangles) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Rectangles) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Rectangles) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Rectangles) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Rectangles) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Rectangles) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Rectangles) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Rectangles) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Rectangles) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Rectangles) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Rectangles) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Rectangles) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Rectangles) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Rectangles) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Rectangles) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Rectangles) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Rectangles) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Rectangles) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Rectangles) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: Rectangles) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: Rectangles) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Rectangles) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Rectangles) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Rectangles) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Rectangles) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Rectangles) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Rectangles) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Rectangles) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Rectangles) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Rectangles) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Rectangles) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Rectangles) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Rectangles) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Rectangles) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Rectangles) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Rectangles) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Rectangles) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Rectangles) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Rectangles) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Rectangles) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Rectangles) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Rectangles) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Rectangles) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Oval ---------- *)

    PROCEDURE (this: Oval) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Oval) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Oval) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Oval) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Oval) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Oval) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Oval) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Oval) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Oval) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Oval) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Oval) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Oval) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Oval) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Oval) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Oval) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Oval) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Oval) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Oval) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Oval) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Oval) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Oval) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Oval) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Oval) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Oval) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Oval) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Oval) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Oval) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Oval) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Oval) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Oval) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Oval) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Oval) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Oval) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Oval) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Oval) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Oval) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Oval) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Oval) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Oval) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Oval) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Oval) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Oval) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Oval) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Oval) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Oval) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Oval) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Oval) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Oval) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Oval) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Ovals ---------- *)

    PROCEDURE (this: Ovals) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Ovals) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Ovals) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Ovals) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Ovals) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Ovals) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Ovals) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Ovals) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Ovals) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Ovals) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Ovals) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Ovals) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Ovals) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Ovals) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Ovals) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Ovals) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Ovals) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Ovals) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Ovals) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Ovals) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Ovals) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Ovals) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Ovals) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Ovals) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Ovals) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Ovals) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Ovals) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Ovals) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Ovals) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Ovals) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Ovals) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Ovals) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Ovals) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Ovals) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Ovals) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Ovals) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Ovals) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Ovals) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Ovals) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Ovals) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Ovals) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Ovals) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Ovals) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Ovals) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Ovals) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Ovals) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Ovals) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Arc ---------- *)

    PROCEDURE (this: Arc) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Arc) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Arc) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Arc) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Arc) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Arc) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Arc) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Arc) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Arc) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Arc) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Arc) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Arc) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Arc) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Arc) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Arc) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Arc) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Arc) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Arc) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Arc) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Arc) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Arc) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Arc) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Arc) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Arc) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Arc) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Arc) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Arc) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Arc) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Arc) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Arc) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Arc) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Arc) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Arc) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Arc) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Arc) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Arc) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Arc) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Arc) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Arc) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Arc) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Arc) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Arc) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Arc) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Arc) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Arc) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Arc) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Arc) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Arcs ---------- *)

    PROCEDURE (this: Arcs) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Arcs) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Arcs) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Arcs) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Arcs) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Arcs) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Arcs) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Arcs) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Arcs) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Arcs) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Arcs) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Arcs) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Arcs) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Arcs) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Arcs) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Arcs) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Arcs) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Arcs) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Arcs) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Arcs) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Arcs) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Arcs) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Arcs) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Arcs) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Arcs) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Arcs) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Arcs) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Arcs) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Arcs) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Arcs) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Arcs) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Arcs) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Arcs) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Arcs) Add* (X1: CtlT.Any; Y1: CtlT.Any; X2: CtlT.Any; Y2: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(X1, arg[3]);
        CtlC.AnyVar(Y1, arg[2]);
        CtlC.AnyVar(X2, arg[1]);
        CtlC.AnyVar(Y2, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Arcs) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Arcs) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Arcs) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Arcs) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Arcs) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Arcs) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Arcs) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Arcs) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Arcs) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Arcs) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Arcs) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- TextBox ---------- *)

    PROCEDURE (this: TextBox) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: TextBox) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: TextBox) AutoSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 614)
    END AutoSize;

    PROCEDURE (this: TextBox) PUTAutoSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 614, val)
    END PUTAutoSize;

    PROCEDURE (this: TextBox) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: TextBox) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: TextBox) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: TextBox) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: TextBox) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: TextBox) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: TextBox) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: TextBox) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: TextBox) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: TextBox) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: TextBox) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: TextBox) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: TextBox) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: TextBox) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: TextBox) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: TextBox) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: TextBox) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: TextBox) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: TextBox) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: TextBox) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: TextBox) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: TextBox) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: TextBox) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: TextBox) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: TextBox) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: TextBox) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: TextBox) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: TextBox) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: TextBox) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: TextBox) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: TextBox) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: TextBox) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: TextBox) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: TextBox) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: TextBox) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: TextBox) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: TextBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: TextBox) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: TextBox) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: TextBox) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: TextBox) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: TextBox) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: TextBox) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: TextBox) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: TextBox) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: TextBox) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: TextBox) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: TextBox) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: TextBox) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: TextBox) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: TextBox) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: TextBox) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: TextBox) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: TextBox) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: TextBox) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: TextBox) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: TextBox) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: TextBox) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: TextBox) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: TextBox) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: TextBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: TextBox) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: TextBox) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: TextBox) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: TextBox) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: TextBox) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: TextBox) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: TextBox) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: TextBox) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- TextBoxes ---------- *)

    PROCEDURE (this: TextBoxes) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: TextBoxes) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: TextBoxes) AutoSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 614)
    END AutoSize;

    PROCEDURE (this: TextBoxes) PUTAutoSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 614, val)
    END PUTAutoSize;

    PROCEDURE (this: TextBoxes) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: TextBoxes) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: TextBoxes) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: TextBoxes) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: TextBoxes) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: TextBoxes) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: TextBoxes) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: TextBoxes) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: TextBoxes) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: TextBoxes) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: TextBoxes) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: TextBoxes) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: TextBoxes) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: TextBoxes) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: TextBoxes) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: TextBoxes) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: TextBoxes) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: TextBoxes) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: TextBoxes) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: TextBoxes) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: TextBoxes) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: TextBoxes) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: TextBoxes) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: TextBoxes) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: TextBoxes) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: TextBoxes) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: TextBoxes) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: TextBoxes) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: TextBoxes) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: TextBoxes) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: TextBoxes) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: TextBoxes) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: TextBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: TextBoxes) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: TextBoxes) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: TextBoxes) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: TextBoxes) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: TextBoxes) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: TextBoxes) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: TextBoxes) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: TextBoxes) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: TextBoxes) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: TextBoxes) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: TextBoxes) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: TextBoxes) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: TextBoxes) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: TextBoxes) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: TextBoxes) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: TextBoxes) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: TextBoxes) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: TextBoxes) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: TextBoxes) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: TextBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: TextBoxes) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: TextBoxes) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: TextBoxes) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: TextBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: TextBoxes) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: TextBoxes) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: TextBoxes) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: TextBoxes) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: TextBoxes) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: TextBoxes) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: TextBoxes) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: TextBoxes) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: TextBoxes) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: TextBoxes) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Picture ---------- *)

    PROCEDURE (this: Picture) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Picture) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Picture) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Picture) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Picture) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Picture) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Picture) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Picture) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Picture) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: Picture) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: Picture) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Picture) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Picture) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Picture) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Picture) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Picture) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Picture) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Picture) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Picture) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Picture) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Picture) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Picture) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Picture) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Picture) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Picture) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Picture) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Picture) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Picture) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Picture) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Picture) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Picture) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Picture) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Picture) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Picture) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Picture) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Picture) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Picture) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Picture) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Picture) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Picture) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Picture) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Picture) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Picture) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Picture) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Picture) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Picture) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Picture) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Picture) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Picture) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Picture) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Picture) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Pictures ---------- *)

    PROCEDURE (this: Pictures) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Pictures) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Pictures) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Pictures) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Pictures) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Pictures) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Pictures) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Pictures) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Pictures) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: Pictures) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: Pictures) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Pictures) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Pictures) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Pictures) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Pictures) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Pictures) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Pictures) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Pictures) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Pictures) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Pictures) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Pictures) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Pictures) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Pictures) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Pictures) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Pictures) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Pictures) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Pictures) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Pictures) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Pictures) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Pictures) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Pictures) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Pictures) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Pictures) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Pictures) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Pictures) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Pictures) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Pictures) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Pictures) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Pictures) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Pictures) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Pictures) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Pictures) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Pictures) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Pictures) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Pictures) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Pictures) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Pictures) Insert* (Filename: CtlT.Any; (* optional *) Converter: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(Converter, arg[0]);
        CtlC.CallParMethod(this, 252, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Insert;

    PROCEDURE (this: Pictures) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Pictures) Paste* ((* optional *) Link: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 211, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Paste;

    PROCEDURE (this: Pictures) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Pictures) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- OLEObject ---------- *)

    PROCEDURE (this: OLEObject) AutoLoad* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1186)
    END AutoLoad;

    PROCEDURE (this: OLEObject) PUTAutoLoad* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1186, val)
    END PUTAutoLoad;

    PROCEDURE (this: OLEObject) AutoUpdate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1048)
    END AutoUpdate;

    PROCEDURE (this: OLEObject) PUTAutoUpdate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1048, val)
    END PUTAutoUpdate;

    PROCEDURE (this: OLEObject) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: OLEObject) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: OLEObject) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: OLEObject) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: OLEObject) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: OLEObject) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: OLEObject) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: OLEObject) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: OLEObject) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: OLEObject) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: OLEObject) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: OLEObject) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: OLEObject) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: OLEObject) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: OLEObject) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: OLEObject) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: OLEObject) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: OLEObject) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: OLEObject) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: OLEObject) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: OLEObject) Object* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1049)
    END Object;

    PROCEDURE (this: OLEObject) PUTObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1049, val)
    END PUTObject;

    PROCEDURE (this: OLEObject) OLEType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1054)
    END OLEType;

    PROCEDURE (this: OLEObject) PUTOLEType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1054, val)
    END PUTOLEType;

    PROCEDURE (this: OLEObject) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: OLEObject) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: OLEObject) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: OLEObject) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: OLEObject) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: OLEObject) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: OLEObject) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: OLEObject) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: OLEObject) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: OLEObject) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: OLEObject) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: OLEObject) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: OLEObject) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: OLEObject) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: OLEObject) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: OLEObject) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: OLEObject) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: OLEObject) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: OLEObject) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: OLEObject) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: OLEObject) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: OLEObject) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: OLEObject) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: OLEObject) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: OLEObject) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: OLEObject) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: OLEObject) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: OLEObject) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: OLEObject) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: OLEObject) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;

    PROCEDURE (this: OLEObject) Update* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 680, ret);
        RETURN CtlC.VarAny(ret)
    END Update;

    PROCEDURE (this: OLEObject) Verb* ((* optional *) Verb: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Verb, arg[0]);
        CtlC.CallParMethod(this, 606, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Verb;


    (* ---------- OLEObjects ---------- *)

    PROCEDURE (this: OLEObjects) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: OLEObjects) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: OLEObjects) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: OLEObjects) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: OLEObjects) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: OLEObjects) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: OLEObjects) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: OLEObjects) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: OLEObjects) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: OLEObjects) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: OLEObjects) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: OLEObjects) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: OLEObjects) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: OLEObjects) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: OLEObjects) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: OLEObjects) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: OLEObjects) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: OLEObjects) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: OLEObjects) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: OLEObjects) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: OLEObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: OLEObjects) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: OLEObjects) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: OLEObjects) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: OLEObjects) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: OLEObjects) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: OLEObjects) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: OLEObjects) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: OLEObjects) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: OLEObjects) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: OLEObjects) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: OLEObjects) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: OLEObjects) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: OLEObjects) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: OLEObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: OLEObjects) Add* ((* optional *) ClassType: CtlT.Any; Filename: CtlT.Any; Link: CtlT.Any; DisplayAsIcon: CtlT.Any; IconFileName: CtlT.Any; IconIndex: CtlT.Any; IconLabel: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(ClassType, arg[6]);
        CtlC.AnyVar(Filename, arg[5]);
        CtlC.AnyVar(Link, arg[4]);
        CtlC.AnyVar(DisplayAsIcon, arg[3]);
        CtlC.AnyVar(IconFileName, arg[2]);
        CtlC.AnyVar(IconIndex, arg[1]);
        CtlC.AnyVar(IconLabel, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: OLEObjects) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: OLEObjects) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: OLEObjects) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: OLEObjects) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: OLEObjects) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: OLEObjects) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: OLEObjects) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: OLEObjects) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: OLEObjects) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: OLEObjects) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: OLEObjects) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- ChartObject ---------- *)

    PROCEDURE (this: ChartObject) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: ChartObject) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: ChartObject) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: ChartObject) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: ChartObject) Chart* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 7)
    END Chart;

    PROCEDURE (this: ChartObject) PUTChart* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 7, val)
    END PUTChart;

    PROCEDURE (this: ChartObject) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ChartObject) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ChartObject) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: ChartObject) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: ChartObject) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: ChartObject) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: ChartObject) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: ChartObject) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: ChartObject) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: ChartObject) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: ChartObject) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ChartObject) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ChartObject) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: ChartObject) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: ChartObject) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: ChartObject) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: ChartObject) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: ChartObject) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: ChartObject) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ChartObject) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ChartObject) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ChartObject) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: ChartObject) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: ChartObject) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: ChartObject) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: ChartObject) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: ChartObject) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: ChartObject) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: ChartObject) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ChartObject) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ChartObject) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: ChartObject) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: ChartObject) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: ChartObject) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: ChartObject) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ChartObject) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ChartObject) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: ChartObject) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: ChartObject) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: ChartObject) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ChartObject) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: ChartObject) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ChartObject) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: ChartObject) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: ChartObject) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ChartObject) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: ChartObject) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: ChartObject) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- ChartObjects ---------- *)

    PROCEDURE (this: ChartObjects) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: ChartObjects) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: ChartObjects) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: ChartObjects) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: ChartObjects) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ChartObjects) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ChartObjects) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: ChartObjects) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: ChartObjects) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: ChartObjects) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: ChartObjects) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: ChartObjects) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: ChartObjects) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ChartObjects) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ChartObjects) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: ChartObjects) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: ChartObjects) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: ChartObjects) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: ChartObjects) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ChartObjects) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ChartObjects) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ChartObjects) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: ChartObjects) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: ChartObjects) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: ChartObjects) RoundedCorners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 619)
    END RoundedCorners;

    PROCEDURE (this: ChartObjects) PUTRoundedCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 619, val)
    END PUTRoundedCorners;

    PROCEDURE (this: ChartObjects) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: ChartObjects) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: ChartObjects) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ChartObjects) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ChartObjects) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: ChartObjects) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: ChartObjects) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ChartObjects) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ChartObjects) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: ChartObjects) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: ChartObjects) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: ChartObjects) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: ChartObjects) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ChartObjects) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: ChartObjects) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ChartObjects) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: ChartObjects) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: ChartObjects) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ChartObjects) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: ChartObjects) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: ChartObjects) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: ChartObjects) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: ChartObjects) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Drawing ---------- *)

    PROCEDURE (this: Drawing) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Drawing) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Drawing) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Drawing) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Drawing) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Drawing) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Drawing) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Drawing) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Drawing) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Drawing) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Drawing) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Drawing) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Drawing) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Drawing) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Drawing) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Drawing) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Drawing) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Drawing) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Drawing) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Drawing) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Drawing) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Drawing) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Drawing) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Drawing) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Drawing) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Drawing) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Drawing) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Drawing) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Drawing) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Drawing) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Drawing) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Drawing) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Drawing) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Drawing) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Drawing) Vertices* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 621)
    END Vertices;

    PROCEDURE (this: Drawing) PUTVertices* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 621, val)
    END PUTVertices;

    PROCEDURE (this: Drawing) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Drawing) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Drawing) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Drawing) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Drawing) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Drawing) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Drawing) AddVertex* (Left: CtlT.Any; Top: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[1]);
        CtlC.AnyVar(Top, arg[0]);
        CtlC.CallParMethod(this, 601, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddVertex;

    PROCEDURE (this: Drawing) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Drawing) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Drawing) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Drawing) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Drawing) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Drawing) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Drawing) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Drawing) Reshape* (Vertex: CtlT.Any; Insert: CtlT.Any; (* optional *) Left: CtlT.Any; Top: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Vertex, arg[3]);
        CtlC.AnyVar(Insert, arg[2]);
        CtlC.AnyVar(Left, arg[1]);
        CtlC.AnyVar(Top, arg[0]);
        CtlC.CallParMethod(this, 604, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Reshape;

    PROCEDURE (this: Drawing) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Drawing) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Drawings ---------- *)

    PROCEDURE (this: Drawings) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Drawings) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Drawings) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Drawings) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Drawings) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Drawings) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Drawings) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Drawings) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Drawings) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Drawings) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Drawings) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Drawings) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Drawings) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Drawings) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Drawings) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Drawings) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Drawings) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Drawings) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Drawings) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Drawings) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Drawings) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Drawings) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Drawings) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Drawings) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Drawings) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Drawings) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Drawings) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Drawings) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Drawings) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Drawings) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Drawings) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Drawings) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Drawings) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Drawings) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Drawings) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Drawings) Add* (X1: CtlT.Any; Y1: CtlT.Any; X2: CtlT.Any; Y2: CtlT.Any; Closed: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(X1, arg[4]);
        CtlC.AnyVar(Y1, arg[3]);
        CtlC.AnyVar(X2, arg[2]);
        CtlC.AnyVar(Y2, arg[1]);
        CtlC.AnyVar(Closed, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Drawings) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Drawings) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Drawings) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Drawings) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Drawings) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Drawings) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Drawings) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Drawings) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Drawings) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Drawings) Reshape* (Vertex: CtlT.Any; Insert: CtlT.Any; (* optional *) Left: CtlT.Any; Top: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Vertex, arg[3]);
        CtlC.AnyVar(Insert, arg[2]);
        CtlC.AnyVar(Left, arg[1]);
        CtlC.AnyVar(Top, arg[0]);
        CtlC.CallParMethod(this, 604, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Reshape;

    PROCEDURE (this: Drawings) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Drawings) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Button ---------- *)

    PROCEDURE (this: Button) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Button) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: Button) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: Button) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: Button) AutoSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 614)
    END AutoSize;

    PROCEDURE (this: Button) PUTAutoSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 614, val)
    END PUTAutoSize;

    PROCEDURE (this: Button) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Button) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Button) CancelButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 858)
    END CancelButton;

    PROCEDURE (this: Button) PUTCancelButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 858, val)
    END PUTCancelButton;

    PROCEDURE (this: Button) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Button) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Button) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Button) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Button) DefaultButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 857)
    END DefaultButton;

    PROCEDURE (this: Button) PUTDefaultButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 857, val)
    END PUTDefaultButton;

    PROCEDURE (this: Button) DismissButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 859)
    END DismissButton;

    PROCEDURE (this: Button) PUTDismissButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 859, val)
    END PUTDismissButton;

    PROCEDURE (this: Button) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Button) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Button) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: Button) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: Button) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: Button) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: Button) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Button) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Button) HelpButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 860)
    END HelpButton;

    PROCEDURE (this: Button) PUTHelpButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 860, val)
    END PUTHelpButton;

    PROCEDURE (this: Button) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Button) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Button) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Button) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Button) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Button) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Button) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Button) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Button) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: Button) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: Button) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Button) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Button) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Button) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Button) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Button) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: Button) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Button) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Button) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Button) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: Button) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Button) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Button) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Button) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Button) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: Button) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: Button) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Button) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Button) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Button) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Button) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Button) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: Button) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Button) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Button) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Button) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Button) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Button) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Button) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Button) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Button) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: Button) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Button) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Button) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Button) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Button) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Button) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Button) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Button) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Buttons ---------- *)

    PROCEDURE (this: Buttons) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Buttons) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: Buttons) AddIndent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1063)
    END AddIndent;

    PROCEDURE (this: Buttons) PUTAddIndent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1063, val)
    END PUTAddIndent;

    PROCEDURE (this: Buttons) AutoSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 614)
    END AutoSize;

    PROCEDURE (this: Buttons) PUTAutoSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 614, val)
    END PUTAutoSize;

    PROCEDURE (this: Buttons) CancelButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 858)
    END CancelButton;

    PROCEDURE (this: Buttons) PUTCancelButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 858, val)
    END PUTCancelButton;

    PROCEDURE (this: Buttons) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Buttons) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Buttons) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Buttons) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Buttons) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Buttons) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Buttons) DefaultButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 857)
    END DefaultButton;

    PROCEDURE (this: Buttons) PUTDefaultButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 857, val)
    END PUTDefaultButton;

    PROCEDURE (this: Buttons) DismissButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 859)
    END DismissButton;

    PROCEDURE (this: Buttons) PUTDismissButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 859, val)
    END PUTDismissButton;

    PROCEDURE (this: Buttons) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Buttons) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Buttons) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: Buttons) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: Buttons) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: Buttons) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: Buttons) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Buttons) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Buttons) HelpButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 860)
    END HelpButton;

    PROCEDURE (this: Buttons) PUTHelpButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 860, val)
    END PUTHelpButton;

    PROCEDURE (this: Buttons) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: Buttons) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: Buttons) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Buttons) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Buttons) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Buttons) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Buttons) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: Buttons) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: Buttons) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Buttons) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Buttons) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: Buttons) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: Buttons) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Buttons) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Buttons) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Buttons) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: Buttons) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Buttons) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Buttons) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Buttons) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Buttons) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: Buttons) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: Buttons) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Buttons) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Buttons) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: Buttons) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: Buttons) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Buttons) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Buttons) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Buttons) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Buttons) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Buttons) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Buttons) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Buttons) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Buttons) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Buttons) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Buttons) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: Buttons) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Buttons) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Buttons) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Buttons) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Buttons) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Buttons) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Buttons) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Buttons) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Buttons) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Buttons) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- EditBox ---------- *)

    PROCEDURE (this: EditBox) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: EditBox) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: EditBox) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: EditBox) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: EditBox) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: EditBox) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: EditBox) DisplayVerticalScrollBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: EditBox) PUTDisplayVerticalScrollBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 922, val)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: EditBox) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: EditBox) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: EditBox) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: EditBox) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: EditBox) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: EditBox) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: EditBox) InputType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 854)
    END InputType;

    PROCEDURE (this: EditBox) PUTInputType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 854, val)
    END PUTInputType;

    PROCEDURE (this: EditBox) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: EditBox) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: EditBox) LinkedObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 862)
    END LinkedObject;

    PROCEDURE (this: EditBox) PUTLinkedObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 862, val)
    END PUTLinkedObject;

    PROCEDURE (this: EditBox) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: EditBox) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: EditBox) MultiLine* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 855)
    END MultiLine;

    PROCEDURE (this: EditBox) PUTMultiLine* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 855, val)
    END PUTMultiLine;

    PROCEDURE (this: EditBox) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: EditBox) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: EditBox) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: EditBox) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: EditBox) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: EditBox) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: EditBox) PasswordEdit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1162)
    END PasswordEdit;

    PROCEDURE (this: EditBox) PUTPasswordEdit* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1162, val)
    END PUTPasswordEdit;

    PROCEDURE (this: EditBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: EditBox) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: EditBox) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: EditBox) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: EditBox) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: EditBox) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: EditBox) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: EditBox) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: EditBox) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: EditBox) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: EditBox) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: EditBox) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: EditBox) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: EditBox) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: EditBox) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: EditBox) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: EditBox) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: EditBox) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: EditBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: EditBox) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: EditBox) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: EditBox) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: EditBox) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: EditBox) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: EditBox) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: EditBox) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- EditBoxes ---------- *)

    PROCEDURE (this: EditBoxes) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: EditBoxes) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: EditBoxes) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: EditBoxes) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: EditBoxes) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: EditBoxes) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: EditBoxes) DisplayVerticalScrollBar* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 922)
    END DisplayVerticalScrollBar;

    PROCEDURE (this: EditBoxes) PUTDisplayVerticalScrollBar* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 922, val)
    END PUTDisplayVerticalScrollBar;

    PROCEDURE (this: EditBoxes) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: EditBoxes) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: EditBoxes) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: EditBoxes) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: EditBoxes) InputType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 854)
    END InputType;

    PROCEDURE (this: EditBoxes) PUTInputType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 854, val)
    END PUTInputType;

    PROCEDURE (this: EditBoxes) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: EditBoxes) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: EditBoxes) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: EditBoxes) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: EditBoxes) MultiLine* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 855)
    END MultiLine;

    PROCEDURE (this: EditBoxes) PUTMultiLine* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 855, val)
    END PUTMultiLine;

    PROCEDURE (this: EditBoxes) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: EditBoxes) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: EditBoxes) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: EditBoxes) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: EditBoxes) PasswordEdit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1162)
    END PasswordEdit;

    PROCEDURE (this: EditBoxes) PUTPasswordEdit* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1162, val)
    END PUTPasswordEdit;

    PROCEDURE (this: EditBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: EditBoxes) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: EditBoxes) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: EditBoxes) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: EditBoxes) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: EditBoxes) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: EditBoxes) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: EditBoxes) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: EditBoxes) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: EditBoxes) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: EditBoxes) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: EditBoxes) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: EditBoxes) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: EditBoxes) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: EditBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: EditBoxes) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: EditBoxes) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: EditBoxes) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: EditBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: EditBoxes) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: EditBoxes) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: EditBoxes) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: EditBoxes) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: EditBoxes) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: EditBoxes) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: EditBoxes) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: EditBoxes) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: EditBoxes) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- CheckBox ---------- *)

    PROCEDURE (this: CheckBox) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: CheckBox) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: CheckBox) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: CheckBox) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: CheckBox) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: CheckBox) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: CheckBox) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: CheckBox) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: CheckBox) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: CheckBox) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: CheckBox) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: CheckBox) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: CheckBox) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: CheckBox) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: CheckBox) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: CheckBox) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: CheckBox) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: CheckBox) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: CheckBox) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: CheckBox) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: CheckBox) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: CheckBox) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: CheckBox) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: CheckBox) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: CheckBox) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: CheckBox) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: CheckBox) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: CheckBox) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: CheckBox) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: CheckBox) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: CheckBox) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: CheckBox) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: CheckBox) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: CheckBox) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: CheckBox) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: CheckBox) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: CheckBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: CheckBox) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: CheckBox) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: CheckBox) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: CheckBox) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: CheckBox) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: CheckBox) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: CheckBox) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: CheckBox) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: CheckBox) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: CheckBox) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: CheckBox) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: CheckBox) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: CheckBox) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: CheckBox) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: CheckBox) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: CheckBox) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: CheckBox) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: CheckBox) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: CheckBox) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: CheckBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: CheckBox) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: CheckBox) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: CheckBox) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: CheckBox) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: CheckBox) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: CheckBox) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: CheckBox) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: CheckBox) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- CheckBoxes ---------- *)

    PROCEDURE (this: CheckBoxes) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: CheckBoxes) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: CheckBoxes) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: CheckBoxes) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: CheckBoxes) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: CheckBoxes) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: CheckBoxes) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: CheckBoxes) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: CheckBoxes) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: CheckBoxes) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: CheckBoxes) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: CheckBoxes) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: CheckBoxes) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: CheckBoxes) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: CheckBoxes) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: CheckBoxes) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: CheckBoxes) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: CheckBoxes) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: CheckBoxes) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: CheckBoxes) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: CheckBoxes) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: CheckBoxes) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: CheckBoxes) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: CheckBoxes) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: CheckBoxes) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: CheckBoxes) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: CheckBoxes) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: CheckBoxes) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: CheckBoxes) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: CheckBoxes) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: CheckBoxes) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: CheckBoxes) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: CheckBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: CheckBoxes) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: CheckBoxes) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: CheckBoxes) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: CheckBoxes) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: CheckBoxes) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: CheckBoxes) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: CheckBoxes) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: CheckBoxes) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: CheckBoxes) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: CheckBoxes) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: CheckBoxes) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: CheckBoxes) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: CheckBoxes) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: CheckBoxes) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: CheckBoxes) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: CheckBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: CheckBoxes) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: CheckBoxes) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: CheckBoxes) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: CheckBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: CheckBoxes) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: CheckBoxes) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: CheckBoxes) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: CheckBoxes) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: CheckBoxes) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: CheckBoxes) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: CheckBoxes) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: CheckBoxes) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: CheckBoxes) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: CheckBoxes) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- OptionButton ---------- *)

    PROCEDURE (this: OptionButton) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: OptionButton) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: OptionButton) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: OptionButton) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: OptionButton) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: OptionButton) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: OptionButton) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: OptionButton) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: OptionButton) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: OptionButton) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: OptionButton) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: OptionButton) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: OptionButton) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: OptionButton) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: OptionButton) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: OptionButton) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: OptionButton) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: OptionButton) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: OptionButton) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: OptionButton) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: OptionButton) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: OptionButton) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: OptionButton) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: OptionButton) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: OptionButton) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: OptionButton) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: OptionButton) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: OptionButton) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: OptionButton) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: OptionButton) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: OptionButton) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: OptionButton) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: OptionButton) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: OptionButton) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: OptionButton) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: OptionButton) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: OptionButton) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: OptionButton) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: OptionButton) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: OptionButton) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: OptionButton) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: OptionButton) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: OptionButton) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: OptionButton) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: OptionButton) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: OptionButton) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: OptionButton) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: OptionButton) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: OptionButton) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: OptionButton) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: OptionButton) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: OptionButton) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: OptionButton) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: OptionButton) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: OptionButton) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: OptionButton) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: OptionButton) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: OptionButton) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: OptionButton) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: OptionButton) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: OptionButton) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: OptionButton) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: OptionButton) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: OptionButton) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: OptionButton) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- OptionButtons ---------- *)

    PROCEDURE (this: OptionButtons) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: OptionButtons) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: OptionButtons) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: OptionButtons) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: OptionButtons) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: OptionButtons) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: OptionButtons) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: OptionButtons) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: OptionButtons) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: OptionButtons) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: OptionButtons) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: OptionButtons) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: OptionButtons) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: OptionButtons) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: OptionButtons) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: OptionButtons) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: OptionButtons) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: OptionButtons) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: OptionButtons) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: OptionButtons) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: OptionButtons) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: OptionButtons) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: OptionButtons) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: OptionButtons) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: OptionButtons) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: OptionButtons) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: OptionButtons) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: OptionButtons) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: OptionButtons) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: OptionButtons) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: OptionButtons) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: OptionButtons) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: OptionButtons) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: OptionButtons) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: OptionButtons) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: OptionButtons) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: OptionButtons) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: OptionButtons) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: OptionButtons) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: OptionButtons) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: OptionButtons) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: OptionButtons) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: OptionButtons) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: OptionButtons) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: OptionButtons) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: OptionButtons) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: OptionButtons) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: OptionButtons) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: OptionButtons) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: OptionButtons) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: OptionButtons) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: OptionButtons) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: OptionButtons) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: OptionButtons) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: OptionButtons) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: OptionButtons) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: OptionButtons) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: OptionButtons) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: OptionButtons) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: OptionButtons) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: OptionButtons) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: OptionButtons) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: OptionButtons) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Spinner ---------- *)

    PROCEDURE (this: Spinner) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Spinner) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Spinner) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Spinner) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Spinner) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: Spinner) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: Spinner) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Spinner) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Spinner) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Spinner) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Spinner) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Spinner) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Spinner) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Spinner) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Spinner) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: Spinner) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: Spinner) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Spinner) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Spinner) Max* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 842)
    END Max;

    PROCEDURE (this: Spinner) PUTMax* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 842, val)
    END PUTMax;

    PROCEDURE (this: Spinner) Min* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 843)
    END Min;

    PROCEDURE (this: Spinner) PUTMin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 843, val)
    END PUTMin;

    PROCEDURE (this: Spinner) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Spinner) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Spinner) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Spinner) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Spinner) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Spinner) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Spinner) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Spinner) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Spinner) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Spinner) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Spinner) SmallChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 844)
    END SmallChange;

    PROCEDURE (this: Spinner) PUTSmallChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 844, val)
    END PUTSmallChange;

    PROCEDURE (this: Spinner) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Spinner) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Spinner) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Spinner) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Spinner) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Spinner) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: Spinner) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Spinner) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Spinner) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Spinner) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Spinner) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Spinner) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Spinner) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Spinner) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Spinner) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Spinner) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Spinner) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Spinner) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Spinner) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Spinner) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Spinner) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Spinners ---------- *)

    PROCEDURE (this: Spinners) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Spinners) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Spinners) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Spinners) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Spinners) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: Spinners) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: Spinners) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Spinners) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Spinners) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Spinners) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Spinners) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Spinners) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Spinners) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: Spinners) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: Spinners) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Spinners) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Spinners) Max* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 842)
    END Max;

    PROCEDURE (this: Spinners) PUTMax* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 842, val)
    END PUTMax;

    PROCEDURE (this: Spinners) Min* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 843)
    END Min;

    PROCEDURE (this: Spinners) PUTMin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 843, val)
    END PUTMin;

    PROCEDURE (this: Spinners) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Spinners) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Spinners) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Spinners) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Spinners) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Spinners) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Spinners) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Spinners) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Spinners) SmallChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 844)
    END SmallChange;

    PROCEDURE (this: Spinners) PUTSmallChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 844, val)
    END PUTSmallChange;

    PROCEDURE (this: Spinners) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Spinners) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Spinners) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Spinners) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: Spinners) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Spinners) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Spinners) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Spinners) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Spinners) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Spinners) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Spinners) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Spinners) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Spinners) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Spinners) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Spinners) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Spinners) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Spinners) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Spinners) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Spinners) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Spinners) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Spinners) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Spinners) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Spinners) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- ScrollBar ---------- *)

    PROCEDURE (this: ScrollBar) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: ScrollBar) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: ScrollBar) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ScrollBar) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ScrollBar) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ScrollBar) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: ScrollBar) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: ScrollBar) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: ScrollBar) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: ScrollBar) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: ScrollBar) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: ScrollBar) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: ScrollBar) LargeChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 845)
    END LargeChange;

    PROCEDURE (this: ScrollBar) PUTLargeChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 845, val)
    END PUTLargeChange;

    PROCEDURE (this: ScrollBar) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ScrollBar) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ScrollBar) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ScrollBar) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: ScrollBar) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: ScrollBar) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: ScrollBar) Max* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 842)
    END Max;

    PROCEDURE (this: ScrollBar) PUTMax* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 842, val)
    END PUTMax;

    PROCEDURE (this: ScrollBar) Min* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 843)
    END Min;

    PROCEDURE (this: ScrollBar) PUTMin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 843, val)
    END PUTMin;

    PROCEDURE (this: ScrollBar) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: ScrollBar) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: ScrollBar) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: ScrollBar) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: ScrollBar) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ScrollBar) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ScrollBar) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ScrollBar) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: ScrollBar) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: ScrollBar) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: ScrollBar) SmallChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 844)
    END SmallChange;

    PROCEDURE (this: ScrollBar) PUTSmallChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 844, val)
    END PUTSmallChange;

    PROCEDURE (this: ScrollBar) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ScrollBar) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ScrollBar) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: ScrollBar) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: ScrollBar) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: ScrollBar) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: ScrollBar) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: ScrollBar) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: ScrollBar) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ScrollBar) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ScrollBar) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: ScrollBar) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: ScrollBar) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ScrollBar) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: ScrollBar) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ScrollBar) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: ScrollBar) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: ScrollBar) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ScrollBar) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: ScrollBar) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: ScrollBar) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- ScrollBars ---------- *)

    PROCEDURE (this: ScrollBars) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: ScrollBars) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: ScrollBars) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ScrollBars) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ScrollBars) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ScrollBars) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: ScrollBars) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: ScrollBars) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: ScrollBars) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: ScrollBars) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: ScrollBars) LargeChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 845)
    END LargeChange;

    PROCEDURE (this: ScrollBars) PUTLargeChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 845, val)
    END PUTLargeChange;

    PROCEDURE (this: ScrollBars) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ScrollBars) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ScrollBars) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ScrollBars) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: ScrollBars) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: ScrollBars) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: ScrollBars) Max* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 842)
    END Max;

    PROCEDURE (this: ScrollBars) PUTMax* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 842, val)
    END PUTMax;

    PROCEDURE (this: ScrollBars) Min* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 843)
    END Min;

    PROCEDURE (this: ScrollBars) PUTMin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 843, val)
    END PUTMin;

    PROCEDURE (this: ScrollBars) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: ScrollBars) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: ScrollBars) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ScrollBars) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ScrollBars) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ScrollBars) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: ScrollBars) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: ScrollBars) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: ScrollBars) SmallChange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 844)
    END SmallChange;

    PROCEDURE (this: ScrollBars) PUTSmallChange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 844, val)
    END PUTSmallChange;

    PROCEDURE (this: ScrollBars) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ScrollBars) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ScrollBars) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: ScrollBars) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: ScrollBars) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: ScrollBars) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: ScrollBars) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ScrollBars) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ScrollBars) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: ScrollBars) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: ScrollBars) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: ScrollBars) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: ScrollBars) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ScrollBars) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: ScrollBars) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ScrollBars) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: ScrollBars) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: ScrollBars) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ScrollBars) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: ScrollBars) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: ScrollBars) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: ScrollBars) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: ScrollBars) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- ListBox ---------- *)

    PROCEDURE (this: ListBox) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: ListBox) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: ListBox) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ListBox) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ListBox) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ListBox) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: ListBox) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: ListBox) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: ListBox) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: ListBox) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: ListBox) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: ListBox) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: ListBox) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ListBox) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ListBox) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ListBox) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: ListBox) LinkedObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 862)
    END LinkedObject;

    PROCEDURE (this: ListBox) PUTLinkedObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 862, val)
    END PUTLinkedObject;

    PROCEDURE (this: ListBox) List* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 861)
    END List;

    PROCEDURE (this: ListBox) PUTList* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 861, val)
    END PUTList;

    PROCEDURE (this: ListBox) ListCount* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 849)
    END ListCount;

    PROCEDURE (this: ListBox) PUTListCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 849, val)
    END PUTListCount;

    PROCEDURE (this: ListBox) ListFillRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 847)
    END ListFillRange;

    PROCEDURE (this: ListBox) PUTListFillRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 847, val)
    END PUTListFillRange;

    PROCEDURE (this: ListBox) ListIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 850)
    END ListIndex;

    PROCEDURE (this: ListBox) PUTListIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 850, val)
    END PUTListIndex;

    PROCEDURE (this: ListBox) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: ListBox) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: ListBox) MultiSelect* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 32)
    END MultiSelect;

    PROCEDURE (this: ListBox) PUTMultiSelect* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 32, val)
    END PUTMultiSelect;

    PROCEDURE (this: ListBox) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: ListBox) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: ListBox) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: ListBox) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: ListBox) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ListBox) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ListBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ListBox) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: ListBox) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: ListBox) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: ListBox) Selected* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1123)
    END Selected;

    PROCEDURE (this: ListBox) PUTSelected* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1123, val)
    END PUTSelected;

    PROCEDURE (this: ListBox) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ListBox) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ListBox) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: ListBox) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: ListBox) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: ListBox) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: ListBox) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: ListBox) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: ListBox) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ListBox) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ListBox) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: ListBox) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: ListBox) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddItem;

    PROCEDURE (this: ListBox) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ListBox) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: ListBox) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ListBox) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: ListBox) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: ListBox) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ListBox) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: ListBox) RemoveAllItems* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 853, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveAllItems;

    PROCEDURE (this: ListBox) RemoveItem* (Index: CtlT.Any; (* optional *) Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveItem;

    PROCEDURE (this: ListBox) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: ListBox) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- ListBoxes ---------- *)

    PROCEDURE (this: ListBoxes) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: ListBoxes) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: ListBoxes) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ListBoxes) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ListBoxes) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: ListBoxes) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: ListBoxes) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: ListBoxes) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: ListBoxes) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: ListBoxes) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: ListBoxes) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ListBoxes) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ListBoxes) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: ListBoxes) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: ListBoxes) List* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 861)
    END List;

    PROCEDURE (this: ListBoxes) PUTList* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 861, val)
    END PUTList;

    PROCEDURE (this: ListBoxes) ListFillRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 847)
    END ListFillRange;

    PROCEDURE (this: ListBoxes) PUTListFillRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 847, val)
    END PUTListFillRange;

    PROCEDURE (this: ListBoxes) ListIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 850)
    END ListIndex;

    PROCEDURE (this: ListBoxes) PUTListIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 850, val)
    END PUTListIndex;

    PROCEDURE (this: ListBoxes) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: ListBoxes) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: ListBoxes) MultiSelect* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 32)
    END MultiSelect;

    PROCEDURE (this: ListBoxes) PUTMultiSelect* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 32, val)
    END PUTMultiSelect;

    PROCEDURE (this: ListBoxes) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: ListBoxes) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: ListBoxes) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ListBoxes) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ListBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: ListBoxes) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: ListBoxes) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: ListBoxes) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: ListBoxes) Selected* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1123)
    END Selected;

    PROCEDURE (this: ListBoxes) PUTSelected* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1123, val)
    END PUTSelected;

    PROCEDURE (this: ListBoxes) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ListBoxes) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ListBoxes) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: ListBoxes) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: ListBoxes) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: ListBoxes) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: ListBoxes) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ListBoxes) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ListBoxes) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: ListBoxes) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: ListBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: ListBoxes) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: ListBoxes) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddItem;

    PROCEDURE (this: ListBoxes) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ListBoxes) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: ListBoxes) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ListBoxes) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: ListBoxes) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: ListBoxes) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ListBoxes) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: ListBoxes) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: ListBoxes) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: ListBoxes) RemoveAllItems* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 853, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveAllItems;

    PROCEDURE (this: ListBoxes) RemoveItem* (Index: CtlT.Any; (* optional *) Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveItem;

    PROCEDURE (this: ListBoxes) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: ListBoxes) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- GroupBox ---------- *)

    PROCEDURE (this: GroupBox) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: GroupBox) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: GroupBox) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: GroupBox) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: GroupBox) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: GroupBox) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: GroupBox) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: GroupBox) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: GroupBox) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: GroupBox) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: GroupBox) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: GroupBox) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: GroupBox) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: GroupBox) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: GroupBox) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: GroupBox) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: GroupBox) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: GroupBox) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: GroupBox) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: GroupBox) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: GroupBox) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: GroupBox) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: GroupBox) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: GroupBox) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: GroupBox) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: GroupBox) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: GroupBox) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: GroupBox) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: GroupBox) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: GroupBox) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: GroupBox) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupBox) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: GroupBox) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupBox) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: GroupBox) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: GroupBox) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: GroupBox) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: GroupBox) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: GroupBox) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: GroupBox) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: GroupBox) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: GroupBox) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: GroupBox) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: GroupBox) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: GroupBox) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupBox) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: GroupBox) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: GroupBox) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: GroupBox) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: GroupBox) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: GroupBox) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: GroupBox) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: GroupBox) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: GroupBox) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: GroupBox) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: GroupBox) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: GroupBox) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- GroupBoxes ---------- *)

    PROCEDURE (this: GroupBoxes) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: GroupBoxes) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: GroupBoxes) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: GroupBoxes) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: GroupBoxes) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: GroupBoxes) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: GroupBoxes) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: GroupBoxes) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: GroupBoxes) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: GroupBoxes) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: GroupBoxes) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: GroupBoxes) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: GroupBoxes) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: GroupBoxes) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: GroupBoxes) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: GroupBoxes) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: GroupBoxes) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: GroupBoxes) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: GroupBoxes) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: GroupBoxes) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: GroupBoxes) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: GroupBoxes) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: GroupBoxes) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: GroupBoxes) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: GroupBoxes) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: GroupBoxes) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: GroupBoxes) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: GroupBoxes) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: GroupBoxes) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: GroupBoxes) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: GroupBoxes) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: GroupBoxes) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: GroupBoxes) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: GroupBoxes) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: GroupBoxes) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: GroupBoxes) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: GroupBoxes) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: GroupBoxes) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: GroupBoxes) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: GroupBoxes) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: GroupBoxes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: GroupBoxes) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: GroupBoxes) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: GroupBoxes) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: GroupBoxes) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: GroupBoxes) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: GroupBoxes) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: GroupBoxes) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: GroupBoxes) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: GroupBoxes) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: GroupBoxes) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: GroupBoxes) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: GroupBoxes) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: GroupBoxes) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: GroupBoxes) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- DropDown ---------- *)

    PROCEDURE (this: DropDown) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: DropDown) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: DropDown) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: DropDown) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: DropDown) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DropDown) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DropDown) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: DropDown) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: DropDown) DropDownLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 848)
    END DropDownLines;

    PROCEDURE (this: DropDown) PUTDropDownLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 848, val)
    END PUTDropDownLines;

    PROCEDURE (this: DropDown) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: DropDown) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: DropDown) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: DropDown) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: DropDown) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: DropDown) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: DropDown) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: DropDown) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: DropDown) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: DropDown) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: DropDown) LinkedObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 862)
    END LinkedObject;

    PROCEDURE (this: DropDown) PUTLinkedObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 862, val)
    END PUTLinkedObject;

    PROCEDURE (this: DropDown) List* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 861)
    END List;

    PROCEDURE (this: DropDown) PUTList* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 861, val)
    END PUTList;

    PROCEDURE (this: DropDown) ListCount* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 849)
    END ListCount;

    PROCEDURE (this: DropDown) PUTListCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 849, val)
    END PUTListCount;

    PROCEDURE (this: DropDown) ListFillRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 847)
    END ListFillRange;

    PROCEDURE (this: DropDown) PUTListFillRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 847, val)
    END PUTListFillRange;

    PROCEDURE (this: DropDown) ListIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 850)
    END ListIndex;

    PROCEDURE (this: DropDown) PUTListIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 850, val)
    END PUTListIndex;

    PROCEDURE (this: DropDown) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: DropDown) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: DropDown) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: DropDown) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: DropDown) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: DropDown) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: DropDown) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DropDown) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DropDown) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: DropDown) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: DropDown) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: DropDown) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: DropDown) Selected* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1123)
    END Selected;

    PROCEDURE (this: DropDown) PUTSelected* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1123, val)
    END PUTSelected;

    PROCEDURE (this: DropDown) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: DropDown) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: DropDown) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: DropDown) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: DropDown) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: DropDown) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: DropDown) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: DropDown) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: DropDown) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: DropDown) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: DropDown) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: DropDown) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: DropDown) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: DropDown) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: DropDown) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddItem;

    PROCEDURE (this: DropDown) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DropDown) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: DropDown) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: DropDown) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: DropDown) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: DropDown) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: DropDown) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DropDown) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: DropDown) RemoveAllItems* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 853, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveAllItems;

    PROCEDURE (this: DropDown) RemoveItem* (Index: CtlT.Any; (* optional *) Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveItem;

    PROCEDURE (this: DropDown) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: DropDown) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- DropDowns ---------- *)

    PROCEDURE (this: DropDowns) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: DropDowns) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: DropDowns) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: DropDowns) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: DropDowns) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DropDowns) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DropDowns) Display3DShading* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1122)
    END Display3DShading;

    PROCEDURE (this: DropDowns) PUTDisplay3DShading* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1122, val)
    END PUTDisplay3DShading;

    PROCEDURE (this: DropDowns) DropDownLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 848)
    END DropDownLines;

    PROCEDURE (this: DropDowns) PUTDropDownLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 848, val)
    END PUTDropDownLines;

    PROCEDURE (this: DropDowns) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: DropDowns) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: DropDowns) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: DropDowns) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: DropDowns) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: DropDowns) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: DropDowns) LinkedCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1058)
    END LinkedCell;

    PROCEDURE (this: DropDowns) PUTLinkedCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1058, val)
    END PUTLinkedCell;

    PROCEDURE (this: DropDowns) List* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 861)
    END List;

    PROCEDURE (this: DropDowns) PUTList* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 861, val)
    END PUTList;

    PROCEDURE (this: DropDowns) ListFillRange* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 847)
    END ListFillRange;

    PROCEDURE (this: DropDowns) PUTListFillRange* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 847, val)
    END PUTListFillRange;

    PROCEDURE (this: DropDowns) ListIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 850)
    END ListIndex;

    PROCEDURE (this: DropDowns) PUTListIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 850, val)
    END PUTListIndex;

    PROCEDURE (this: DropDowns) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: DropDowns) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: DropDowns) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: DropDowns) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: DropDowns) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DropDowns) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DropDowns) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: DropDowns) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: DropDowns) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: DropDowns) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: DropDowns) Selected* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1123)
    END Selected;

    PROCEDURE (this: DropDowns) PUTSelected* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1123, val)
    END PUTSelected;

    PROCEDURE (this: DropDowns) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: DropDowns) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: DropDowns) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: DropDowns) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: DropDowns) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: DropDowns) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: DropDowns) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: DropDowns) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: DropDowns) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: DropDowns) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: DropDowns) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: DropDowns) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: DropDowns) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: DropDowns) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any; (* optional *) Editable: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[4]);
        CtlC.AnyVar(Top, arg[3]);
        CtlC.AnyVar(Width, arg[2]);
        CtlC.AnyVar(Height, arg[1]);
        CtlC.AnyVar(Editable, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: DropDowns) AddItem* (Text: CtlT.Any; (* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Text, arg[1]);
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 851, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddItem;

    PROCEDURE (this: DropDowns) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DropDowns) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: DropDowns) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: DropDowns) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: DropDowns) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: DropDowns) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: DropDowns) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DropDowns) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: DropDowns) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: DropDowns) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: DropDowns) RemoveAllItems* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 853, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveAllItems;

    PROCEDURE (this: DropDowns) RemoveItem* (Index: CtlT.Any; (* optional *) Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 852, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RemoveItem;

    PROCEDURE (this: DropDowns) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: DropDowns) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- DialogFrame ---------- *)

    PROCEDURE (this: DialogFrame) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: DialogFrame) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: DialogFrame) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DialogFrame) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DialogFrame) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: DialogFrame) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: DialogFrame) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: DialogFrame) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: DialogFrame) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: DialogFrame) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: DialogFrame) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: DialogFrame) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: DialogFrame) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: DialogFrame) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: DialogFrame) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: DialogFrame) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: DialogFrame) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DialogFrame) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DialogFrame) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: DialogFrame) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: DialogFrame) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: DialogFrame) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: DialogFrame) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: DialogFrame) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: DialogFrame) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DialogFrame) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: DialogFrame) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: DialogFrame) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: DialogFrame) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Label ---------- *)

    PROCEDURE (this: Label) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Label) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: Label) BottomRightCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 615)
    END BottomRightCell;

    PROCEDURE (this: Label) PUTBottomRightCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 615, val)
    END PUTBottomRightCell;

    PROCEDURE (this: Label) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Label) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Label) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Label) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Label) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Label) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Label) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Label) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Label) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Label) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Label) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Label) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Label) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Label) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Label) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: Label) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: Label) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Label) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Label) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Label) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Label) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Label) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Label) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Label) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: Label) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Label) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Label) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Label) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Label) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: Label) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: Label) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Label) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Label) TopLeftCell* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 620)
    END TopLeftCell;

    PROCEDURE (this: Label) PUTTopLeftCell* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 620, val)
    END PUTTopLeftCell;

    PROCEDURE (this: Label) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Label) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Label) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Label) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Label) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Label) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Label) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Label) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Label) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: Label) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Label) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Label) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Label) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Label) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Label) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Label) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Label) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Labels ---------- *)

    PROCEDURE (this: Labels) Accelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 846)
    END Accelerator;

    PROCEDURE (this: Labels) PUTAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 846, val)
    END PUTAccelerator;

    PROCEDURE (this: Labels) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Labels) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Labels) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Labels) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Labels) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Labels) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Labels) Enabled* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 600)
    END Enabled;

    PROCEDURE (this: Labels) PUTEnabled* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 600, val)
    END PUTEnabled;

    PROCEDURE (this: Labels) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Labels) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Labels) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Labels) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Labels) Locked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 269)
    END Locked;

    PROCEDURE (this: Labels) PUTLocked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 269, val)
    END PUTLocked;

    PROCEDURE (this: Labels) LockedText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 616)
    END LockedText;

    PROCEDURE (this: Labels) PUTLockedText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 616, val)
    END PUTLockedText;

    PROCEDURE (this: Labels) OnAction* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 596)
    END OnAction;

    PROCEDURE (this: Labels) PUTOnAction* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 596, val)
    END PUTOnAction;

    PROCEDURE (this: Labels) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Labels) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Labels) PhoneticAccelerator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1121)
    END PhoneticAccelerator;

    PROCEDURE (this: Labels) PUTPhoneticAccelerator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1121, val)
    END PUTPhoneticAccelerator;

    PROCEDURE (this: Labels) Placement* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 617)
    END Placement;

    PROCEDURE (this: Labels) PUTPlacement* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 617, val)
    END PUTPlacement;

    PROCEDURE (this: Labels) PrintObject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 618)
    END PrintObject;

    PROCEDURE (this: Labels) PUTPrintObject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 618, val)
    END PUTPrintObject;

    PROCEDURE (this: Labels) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: Labels) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: Labels) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Labels) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Labels) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Labels) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Labels) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Labels) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Labels) ZOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 622)
    END ZOrder;

    PROCEDURE (this: Labels) PUTZOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 622, val)
    END PUTZOrder;

    PROCEDURE (this: Labels) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Labels) Add* (Left: CtlT.Any; Top: CtlT.Any; Width: CtlT.Any; Height: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 4 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Left, arg[3]);
        CtlC.AnyVar(Top, arg[2]);
        CtlC.AnyVar(Width, arg[1]);
        CtlC.AnyVar(Height, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Labels) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Labels) BringToFront* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 602, ret);
        RETURN CtlC.VarAny(ret)
    END BringToFront;

    PROCEDURE (this: Labels) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: Labels) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Labels) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Labels) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Labels) Cut* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 565, ret);
        RETURN CtlC.VarAny(ret)
    END Cut;

    PROCEDURE (this: Labels) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Labels) Duplicate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1039, ret);
        RETURN CtlC.VarAny(ret)
    END Duplicate;

    PROCEDURE (this: Labels) Group* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 46, ret);
        RETURN CtlC.VarAny(ret)
    END Group;

    PROCEDURE (this: Labels) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Labels) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Labels) SendToBack* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 605, ret);
        RETURN CtlC.VarAny(ret)
    END SendToBack;


    (* ---------- Interior ---------- *)

    PROCEDURE (this: Interior) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Interior) PUTColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, val)
    END PUTColor;

    PROCEDURE (this: Interior) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Interior) PUTColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, val)
    END PUTColorIndex;

    PROCEDURE (this: Interior) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Interior) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Interior) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Interior) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Interior) Pattern* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 95)
    END Pattern;

    PROCEDURE (this: Interior) PUTPattern* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 95, val)
    END PUTPattern;

    PROCEDURE (this: Interior) PatternColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 100)
    END PatternColor;

    PROCEDURE (this: Interior) PUTPatternColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 100, val)
    END PUTPatternColor;

    PROCEDURE (this: Interior) PatternColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 98)
    END PatternColorIndex;

    PROCEDURE (this: Interior) PUTPatternColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 98, val)
    END PUTPatternColorIndex;

    PROCEDURE (this: Interior) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;


    (* ---------- SoundNote ---------- *)

    PROCEDURE (this: SoundNote) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: SoundNote) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: SoundNote) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: SoundNote) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: SoundNote) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: SoundNote) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: SoundNote) Import* (Filename: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 917, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Import;

    PROCEDURE (this: SoundNote) Play* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 918, ret);
        RETURN CtlC.VarAny(ret)
    END Play;

    PROCEDURE (this: SoundNote) Record* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 919, ret);
        RETURN CtlC.VarAny(ret)
    END Record;


    (* ---------- Characters ---------- *)

    PROCEDURE (this: Characters) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: Characters) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: Characters) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Characters) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Characters) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Characters) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Characters) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: Characters) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: Characters) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Characters) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Characters) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: Characters) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: Characters) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Characters) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Characters) Insert* (String: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(String, arg[0]);
        CtlC.CallParMethod(this, 252, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Insert;


    (* ---------- Dialog ---------- *)

    PROCEDURE (this: Dialog) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Dialog) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Dialog) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Dialog) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Dialog) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Dialog) Show* ((* optional *) Arg1: CtlT.Any; Arg2: CtlT.Any; Arg3: CtlT.Any; Arg4: CtlT.Any; Arg5: CtlT.Any; Arg6: CtlT.Any; Arg7: CtlT.Any; Arg8: CtlT.Any; Arg9: CtlT.Any; Arg10: CtlT.Any; Arg11: CtlT.Any; Arg12: CtlT.Any; Arg13: CtlT.Any; Arg14: CtlT.Any; Arg15: CtlT.Any; Arg16: CtlT.Any; Arg17: CtlT.Any; Arg18: CtlT.Any; Arg19: CtlT.Any; Arg20: CtlT.Any; Arg21: CtlT.Any; Arg22: CtlT.Any; Arg23: CtlT.Any; Arg24: CtlT.Any; Arg25: CtlT.Any; Arg26: CtlT.Any; Arg27: CtlT.Any; Arg28: CtlT.Any; Arg29: CtlT.Any; Arg30: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 30 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Arg1, arg[29]);
        CtlC.AnyVar(Arg2, arg[28]);
        CtlC.AnyVar(Arg3, arg[27]);
        CtlC.AnyVar(Arg4, arg[26]);
        CtlC.AnyVar(Arg5, arg[25]);
        CtlC.AnyVar(Arg6, arg[24]);
        CtlC.AnyVar(Arg7, arg[23]);
        CtlC.AnyVar(Arg8, arg[22]);
        CtlC.AnyVar(Arg9, arg[21]);
        CtlC.AnyVar(Arg10, arg[20]);
        CtlC.AnyVar(Arg11, arg[19]);
        CtlC.AnyVar(Arg12, arg[18]);
        CtlC.AnyVar(Arg13, arg[17]);
        CtlC.AnyVar(Arg14, arg[16]);
        CtlC.AnyVar(Arg15, arg[15]);
        CtlC.AnyVar(Arg16, arg[14]);
        CtlC.AnyVar(Arg17, arg[13]);
        CtlC.AnyVar(Arg18, arg[12]);
        CtlC.AnyVar(Arg19, arg[11]);
        CtlC.AnyVar(Arg20, arg[10]);
        CtlC.AnyVar(Arg21, arg[9]);
        CtlC.AnyVar(Arg22, arg[8]);
        CtlC.AnyVar(Arg23, arg[7]);
        CtlC.AnyVar(Arg24, arg[6]);
        CtlC.AnyVar(Arg25, arg[5]);
        CtlC.AnyVar(Arg26, arg[4]);
        CtlC.AnyVar(Arg27, arg[3]);
        CtlC.AnyVar(Arg28, arg[2]);
        CtlC.AnyVar(Arg29, arg[1]);
        CtlC.AnyVar(Arg30, arg[0]);
        CtlC.CallParMethod(this, 496, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Show;


    (* ---------- Dialogs ---------- *)

    PROCEDURE (this: Dialogs) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Dialogs) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Dialogs) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Dialogs) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Dialogs) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Dialogs) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Dialogs) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Dialogs) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Outline ---------- *)

    PROCEDURE (this: Outline) AutomaticStyles* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 959)
    END AutomaticStyles;

    PROCEDURE (this: Outline) PUTAutomaticStyles* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 959, val)
    END PUTAutomaticStyles;

    PROCEDURE (this: Outline) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Outline) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Outline) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Outline) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Outline) SummaryColumn* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 961)
    END SummaryColumn;

    PROCEDURE (this: Outline) PUTSummaryColumn* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 961, val)
    END PUTSummaryColumn;

    PROCEDURE (this: Outline) SummaryRow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 902)
    END SummaryRow;

    PROCEDURE (this: Outline) PUTSummaryRow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 902, val)
    END PUTSummaryRow;

    PROCEDURE (this: Outline) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Outline) ShowLevels* ((* optional *) RowLevels: CtlT.Any; ColumnLevels: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(RowLevels, arg[1]);
        CtlC.AnyVar(ColumnLevels, arg[0]);
        CtlC.CallParMethod(this, 960, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ShowLevels;


    (* ---------- RoutingSlip ---------- *)

    PROCEDURE (this: RoutingSlip) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: RoutingSlip) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: RoutingSlip) Delivery* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 955)
    END Delivery;

    PROCEDURE (this: RoutingSlip) PUTDelivery* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 955, val)
    END PUTDelivery;

    PROCEDURE (this: RoutingSlip) Message* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 954)
    END Message;

    PROCEDURE (this: RoutingSlip) PUTMessage* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 954, val)
    END PUTMessage;

    PROCEDURE (this: RoutingSlip) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: RoutingSlip) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: RoutingSlip) Recipients* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 952)
    END Recipients;

    PROCEDURE (this: RoutingSlip) PUTRecipients* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 952, val)
    END PUTRecipients;

    PROCEDURE (this: RoutingSlip) ReturnWhenDone* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 956)
    END ReturnWhenDone;

    PROCEDURE (this: RoutingSlip) PUTReturnWhenDone* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 956, val)
    END PUTReturnWhenDone;

    PROCEDURE (this: RoutingSlip) Status* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 958)
    END Status;

    PROCEDURE (this: RoutingSlip) PUTStatus* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 958, val)
    END PUTStatus;

    PROCEDURE (this: RoutingSlip) Subject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 953)
    END Subject;

    PROCEDURE (this: RoutingSlip) PUTSubject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 953, val)
    END PUTSubject;

    PROCEDURE (this: RoutingSlip) TrackStatus* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 957)
    END TrackStatus;

    PROCEDURE (this: RoutingSlip) PUTTrackStatus* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 957, val)
    END PUTTrackStatus;

    PROCEDURE (this: RoutingSlip) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: RoutingSlip) Reset* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 555, ret);
        RETURN CtlC.VarAny(ret)
    END Reset;


    (* ---------- Module ---------- *)

    PROCEDURE (this: Module) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Module) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Module) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Module) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Module) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Module) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Module) Next* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 502)
    END Next;

    PROCEDURE (this: Module) PUTNext* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 502, val)
    END PUTNext;

    PROCEDURE (this: Module) OnDoubleClick* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: Module) PUTOnDoubleClick* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 628, val)
    END PUTOnDoubleClick;

    PROCEDURE (this: Module) OnSheetActivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: Module) PUTOnSheetActivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1031, val)
    END PUTOnSheetActivate;

    PROCEDURE (this: Module) OnSheetDeactivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: Module) PUTOnSheetDeactivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1081, val)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: Module) PageSetup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 998)
    END PageSetup;

    PROCEDURE (this: Module) PUTPageSetup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 998, val)
    END PUTPageSetup;

    PROCEDURE (this: Module) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Module) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Module) Previous* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 503)
    END Previous;

    PROCEDURE (this: Module) PUTPrevious* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 503, val)
    END PUTPrevious;

    PROCEDURE (this: Module) ProtectContents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 292)
    END ProtectContents;

    PROCEDURE (this: Module) PUTProtectContents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 292, val)
    END PUTProtectContents;

    PROCEDURE (this: Module) ProtectionMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: Module) PUTProtectionMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1159, val)
    END PUTProtectionMode;

    PROCEDURE (this: Module) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Module) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Module) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: Module) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Module) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Module) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Module) InsertFile* (Filename: CtlT.Any; (* optional *) Merge: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[1]);
        CtlC.AnyVar(Merge, arg[0]);
        CtlC.CallParMethod(this, 584, arg, ret);
        RETURN CtlC.VarAny(ret)
    END InsertFile;

    PROCEDURE (this: Module) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: Module) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Module) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Protect;

    PROCEDURE (this: Module) SaveAs* (Filename: CtlT.Any; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[5]);
        CtlC.AnyVar(FileFormat, arg[4]);
        CtlC.AnyVar(Password, arg[3]);
        CtlC.AnyVar(WriteResPassword, arg[2]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[1]);
        CtlC.AnyVar(CreateBackup, arg[0]);
        CtlC.CallParMethod(this, 284, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SaveAs;

    PROCEDURE (this: Module) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Module) Unprotect* ((* optional *) Password: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Unprotect;


    (* ---------- Modules ---------- *)

    PROCEDURE (this: Modules) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Modules) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Modules) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Modules) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Modules) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Modules) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Modules) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Modules) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Modules) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Modules) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[2]);
        CtlC.AnyVar(After, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Modules) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Modules) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Modules) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Modules) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Modules) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: Modules) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Modules) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- DialogSheet ---------- *)

    PROCEDURE (this: DialogSheet) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DialogSheet) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DialogSheet) DefaultButton* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 857)
    END DefaultButton;

    PROCEDURE (this: DialogSheet) PUTDefaultButton* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 857, val)
    END PUTDefaultButton;

    PROCEDURE (this: DialogSheet) DialogFrame* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 839)
    END DialogFrame;

    PROCEDURE (this: DialogSheet) PUTDialogFrame* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 839, val)
    END PUTDialogFrame;

    PROCEDURE (this: DialogSheet) DisplayAutomaticPageBreaks* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 643)
    END DisplayAutomaticPageBreaks;

    PROCEDURE (this: DialogSheet) PUTDisplayAutomaticPageBreaks* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 643, val)
    END PUTDisplayAutomaticPageBreaks;

    PROCEDURE (this: DialogSheet) EnableAutoFilter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1156)
    END EnableAutoFilter;

    PROCEDURE (this: DialogSheet) PUTEnableAutoFilter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1156, val)
    END PUTEnableAutoFilter;

    PROCEDURE (this: DialogSheet) EnableOutlining* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1157)
    END EnableOutlining;

    PROCEDURE (this: DialogSheet) PUTEnableOutlining* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1157, val)
    END PUTEnableOutlining;

    PROCEDURE (this: DialogSheet) EnablePivotTable* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1158)
    END EnablePivotTable;

    PROCEDURE (this: DialogSheet) PUTEnablePivotTable* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1158, val)
    END PUTEnablePivotTable;

    PROCEDURE (this: DialogSheet) Focus* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 814)
    END Focus;

    PROCEDURE (this: DialogSheet) PUTFocus* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 814, val)
    END PUTFocus;

    PROCEDURE (this: DialogSheet) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: DialogSheet) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: DialogSheet) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: DialogSheet) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: DialogSheet) Next* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 502)
    END Next;

    PROCEDURE (this: DialogSheet) PUTNext* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 502, val)
    END PUTNext;

    PROCEDURE (this: DialogSheet) OnDoubleClick* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: DialogSheet) PUTOnDoubleClick* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 628, val)
    END PUTOnDoubleClick;

    PROCEDURE (this: DialogSheet) OnSheetActivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: DialogSheet) PUTOnSheetActivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1031, val)
    END PUTOnSheetActivate;

    PROCEDURE (this: DialogSheet) OnSheetDeactivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: DialogSheet) PUTOnSheetDeactivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1081, val)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: DialogSheet) PageSetup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 998)
    END PageSetup;

    PROCEDURE (this: DialogSheet) PUTPageSetup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 998, val)
    END PUTPageSetup;

    PROCEDURE (this: DialogSheet) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DialogSheet) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DialogSheet) Previous* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 503)
    END Previous;

    PROCEDURE (this: DialogSheet) PUTPrevious* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 503, val)
    END PUTPrevious;

    PROCEDURE (this: DialogSheet) ProtectContents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 292)
    END ProtectContents;

    PROCEDURE (this: DialogSheet) PUTProtectContents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 292, val)
    END PUTProtectContents;

    PROCEDURE (this: DialogSheet) ProtectDrawingObjects* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 293)
    END ProtectDrawingObjects;

    PROCEDURE (this: DialogSheet) PUTProtectDrawingObjects* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 293, val)
    END PUTProtectDrawingObjects;

    PROCEDURE (this: DialogSheet) ProtectionMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: DialogSheet) PUTProtectionMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1159, val)
    END PUTProtectionMode;

    PROCEDURE (this: DialogSheet) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: DialogSheet) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: DialogSheet) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: DialogSheet) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DialogSheet) Arcs* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 760, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Arcs;

    PROCEDURE (this: DialogSheet) Buttons* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 557, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Buttons;

    PROCEDURE (this: DialogSheet) ChartObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1060, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChartObjects;

    PROCEDURE (this: DialogSheet) CheckBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 824, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckBoxes;

    PROCEDURE (this: DialogSheet) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: DialogSheet) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: DialogSheet) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DialogSheet) DrawingObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 88, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DrawingObjects;

    PROCEDURE (this: DialogSheet) Drawings* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 772, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Drawings;

    PROCEDURE (this: DialogSheet) DropDowns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 836, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DropDowns;

    PROCEDURE (this: DialogSheet) EditBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 828, arg, ret);
        RETURN CtlC.VarAny(ret)
    END EditBoxes;

    PROCEDURE (this: DialogSheet) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: DialogSheet) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: DialogSheet) GroupBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 834, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GroupBoxes;

    PROCEDURE (this: DialogSheet) GroupObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1113, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GroupObjects;

    PROCEDURE (this: DialogSheet) Hide* ((* optional *) Cancel: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Cancel, arg[0]);
        CtlC.CallParMethod(this, 813, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Hide;

    PROCEDURE (this: DialogSheet) Labels* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 841, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Labels;

    PROCEDURE (this: DialogSheet) Lines* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 767, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Lines;

    PROCEDURE (this: DialogSheet) ListBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 832, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ListBoxes;

    PROCEDURE (this: DialogSheet) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: DialogSheet) Names* ((* optional *) Index: CtlT.Any; IndexLocal: CtlT.Any; RefersTo: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[2]);
        CtlC.AnyVar(IndexLocal, arg[1]);
        CtlC.AnyVar(RefersTo, arg[0]);
        CtlC.CallParMethod(this, 442, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Names;

    PROCEDURE (this: DialogSheet) OLEObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 799, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OLEObjects;

    PROCEDURE (this: DialogSheet) OptionButtons* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 826, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OptionButtons;

    PROCEDURE (this: DialogSheet) Ovals* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 801, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Ovals;

    PROCEDURE (this: DialogSheet) Paste* ((* optional *) Destination: CtlT.Any; Link: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Destination, arg[1]);
        CtlC.AnyVar(Link, arg[0]);
        CtlC.CallParMethod(this, 211, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Paste;

    PROCEDURE (this: DialogSheet) PasteSpecial* ((* optional *) Format: CtlT.Any; Link: CtlT.Any; DisplayAsIcon: CtlT.Any; IconFileName: CtlT.Any; IconIndex: CtlT.Any; IconLabel: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Format, arg[5]);
        CtlC.AnyVar(Link, arg[4]);
        CtlC.AnyVar(DisplayAsIcon, arg[3]);
        CtlC.AnyVar(IconFileName, arg[2]);
        CtlC.AnyVar(IconIndex, arg[1]);
        CtlC.AnyVar(IconLabel, arg[0]);
        CtlC.CallParMethod(this, 1027, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PasteSpecial;

    PROCEDURE (this: DialogSheet) Pictures* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 771, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Pictures;

    PROCEDURE (this: DialogSheet) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: DialogSheet) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: DialogSheet) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Protect;

    PROCEDURE (this: DialogSheet) Rectangles* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 774, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Rectangles;

    PROCEDURE (this: DialogSheet) SaveAs* (Filename: CtlT.Any; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[5]);
        CtlC.AnyVar(FileFormat, arg[4]);
        CtlC.AnyVar(Password, arg[3]);
        CtlC.AnyVar(WriteResPassword, arg[2]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[1]);
        CtlC.AnyVar(CreateBackup, arg[0]);
        CtlC.CallParMethod(this, 284, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SaveAs;

    PROCEDURE (this: DialogSheet) ScrollBars* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 830, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ScrollBars;

    PROCEDURE (this: DialogSheet) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: DialogSheet) Show* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 496, ret);
        RETURN CtlC.VarAny(ret)
    END Show;

    PROCEDURE (this: DialogSheet) Spinners* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 838, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Spinners;

    PROCEDURE (this: DialogSheet) TextBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 777, arg, ret);
        RETURN CtlC.VarAny(ret)
    END TextBoxes;

    PROCEDURE (this: DialogSheet) Unprotect* ((* optional *) Password: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Unprotect;


    (* ---------- DialogSheets ---------- *)

    PROCEDURE (this: DialogSheets) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: DialogSheets) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: DialogSheets) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DialogSheets) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DialogSheets) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DialogSheets) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DialogSheets) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: DialogSheets) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: DialogSheets) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: DialogSheets) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[2]);
        CtlC.AnyVar(After, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: DialogSheets) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DialogSheets) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: DialogSheets) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DialogSheets) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: DialogSheets) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: DialogSheets) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: DialogSheets) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: DialogSheets) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- PageSetup ---------- *)

    PROCEDURE (this: PageSetup) BlackAndWhite* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1009)
    END BlackAndWhite;

    PROCEDURE (this: PageSetup) PUTBlackAndWhite* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1009, val)
    END PUTBlackAndWhite;

    PROCEDURE (this: PageSetup) BottomMargin* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1002)
    END BottomMargin;

    PROCEDURE (this: PageSetup) PUTBottomMargin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1002, val)
    END PUTBottomMargin;

    PROCEDURE (this: PageSetup) CenterFooter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1010)
    END CenterFooter;

    PROCEDURE (this: PageSetup) PUTCenterFooter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1010, val)
    END PUTCenterFooter;

    PROCEDURE (this: PageSetup) CenterHeader* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1011)
    END CenterHeader;

    PROCEDURE (this: PageSetup) PUTCenterHeader* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1011, val)
    END PUTCenterHeader;

    PROCEDURE (this: PageSetup) CenterHorizontally* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1005)
    END CenterHorizontally;

    PROCEDURE (this: PageSetup) PUTCenterHorizontally* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1005, val)
    END PUTCenterHorizontally;

    PROCEDURE (this: PageSetup) CenterVertically* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1006)
    END CenterVertically;

    PROCEDURE (this: PageSetup) PUTCenterVertically* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1006, val)
    END PUTCenterVertically;

    PROCEDURE (this: PageSetup) ChartSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1012)
    END ChartSize;

    PROCEDURE (this: PageSetup) PUTChartSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1012, val)
    END PUTChartSize;

    PROCEDURE (this: PageSetup) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PageSetup) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PageSetup) Draft* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1020)
    END Draft;

    PROCEDURE (this: PageSetup) PUTDraft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1020, val)
    END PUTDraft;

    PROCEDURE (this: PageSetup) FirstPageNumber* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1008)
    END FirstPageNumber;

    PROCEDURE (this: PageSetup) PUTFirstPageNumber* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1008, val)
    END PUTFirstPageNumber;

    PROCEDURE (this: PageSetup) FitToPagesTall* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1013)
    END FitToPagesTall;

    PROCEDURE (this: PageSetup) PUTFitToPagesTall* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1013, val)
    END PUTFitToPagesTall;

    PROCEDURE (this: PageSetup) FitToPagesWide* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1014)
    END FitToPagesWide;

    PROCEDURE (this: PageSetup) PUTFitToPagesWide* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1014, val)
    END PUTFitToPagesWide;

    PROCEDURE (this: PageSetup) FooterMargin* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1015)
    END FooterMargin;

    PROCEDURE (this: PageSetup) PUTFooterMargin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1015, val)
    END PUTFooterMargin;

    PROCEDURE (this: PageSetup) HeaderMargin* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1016)
    END HeaderMargin;

    PROCEDURE (this: PageSetup) PUTHeaderMargin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1016, val)
    END PUTHeaderMargin;

    PROCEDURE (this: PageSetup) LeftFooter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1017)
    END LeftFooter;

    PROCEDURE (this: PageSetup) PUTLeftFooter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1017, val)
    END PUTLeftFooter;

    PROCEDURE (this: PageSetup) LeftHeader* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1018)
    END LeftHeader;

    PROCEDURE (this: PageSetup) PUTLeftHeader* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1018, val)
    END PUTLeftHeader;

    PROCEDURE (this: PageSetup) LeftMargin* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 999)
    END LeftMargin;

    PROCEDURE (this: PageSetup) PUTLeftMargin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 999, val)
    END PUTLeftMargin;

    PROCEDURE (this: PageSetup) Order* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 192)
    END Order;

    PROCEDURE (this: PageSetup) PUTOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 192, val)
    END PUTOrder;

    PROCEDURE (this: PageSetup) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: PageSetup) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: PageSetup) PaperSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1007)
    END PaperSize;

    PROCEDURE (this: PageSetup) PUTPaperSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1007, val)
    END PUTPaperSize;

    PROCEDURE (this: PageSetup) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PageSetup) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PageSetup) PrintArea* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1019)
    END PrintArea;

    PROCEDURE (this: PageSetup) PUTPrintArea* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1019, val)
    END PUTPrintArea;

    PROCEDURE (this: PageSetup) PrintGridlines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1004)
    END PrintGridlines;

    PROCEDURE (this: PageSetup) PUTPrintGridlines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1004, val)
    END PUTPrintGridlines;

    PROCEDURE (this: PageSetup) PrintHeadings* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1003)
    END PrintHeadings;

    PROCEDURE (this: PageSetup) PUTPrintHeadings* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1003, val)
    END PUTPrintHeadings;

    PROCEDURE (this: PageSetup) PrintNotes* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1021)
    END PrintNotes;

    PROCEDURE (this: PageSetup) PUTPrintNotes* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1021, val)
    END PUTPrintNotes;

    PROCEDURE (this: PageSetup) PrintQuality* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1022)
    END PrintQuality;

    PROCEDURE (this: PageSetup) PUTPrintQuality* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1022, val)
    END PUTPrintQuality;

    PROCEDURE (this: PageSetup) PrintTitleColumns* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1023)
    END PrintTitleColumns;

    PROCEDURE (this: PageSetup) PUTPrintTitleColumns* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1023, val)
    END PUTPrintTitleColumns;

    PROCEDURE (this: PageSetup) PrintTitleRows* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1024)
    END PrintTitleRows;

    PROCEDURE (this: PageSetup) PUTPrintTitleRows* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1024, val)
    END PUTPrintTitleRows;

    PROCEDURE (this: PageSetup) RightFooter* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1025)
    END RightFooter;

    PROCEDURE (this: PageSetup) PUTRightFooter* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1025, val)
    END PUTRightFooter;

    PROCEDURE (this: PageSetup) RightHeader* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1026)
    END RightHeader;

    PROCEDURE (this: PageSetup) PUTRightHeader* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1026, val)
    END PUTRightHeader;

    PROCEDURE (this: PageSetup) RightMargin* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1000)
    END RightMargin;

    PROCEDURE (this: PageSetup) PUTRightMargin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1000, val)
    END PUTRightMargin;

    PROCEDURE (this: PageSetup) TopMargin* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1001)
    END TopMargin;

    PROCEDURE (this: PageSetup) PUTTopMargin* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1001, val)
    END PUTTopMargin;

    PROCEDURE (this: PageSetup) Zoom* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 663)
    END Zoom;

    PROCEDURE (this: PageSetup) PUTZoom* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 663, val)
    END PUTZoom;

    PROCEDURE (this: PageSetup) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;


    (* ---------- Mailer ---------- *)

    PROCEDURE (this: Mailer) BCCRecipients* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 983)
    END BCCRecipients;

    PROCEDURE (this: Mailer) PUTBCCRecipients* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 983, val)
    END PUTBCCRecipients;

    PROCEDURE (this: Mailer) CCRecipients* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 982)
    END CCRecipients;

    PROCEDURE (this: Mailer) PUTCCRecipients* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 982, val)
    END PUTCCRecipients;

    PROCEDURE (this: Mailer) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Mailer) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Mailer) Enclosures* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 984)
    END Enclosures;

    PROCEDURE (this: Mailer) PUTEnclosures* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 984, val)
    END PUTEnclosures;

    PROCEDURE (this: Mailer) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Mailer) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Mailer) Received* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 986)
    END Received;

    PROCEDURE (this: Mailer) PUTReceived* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 986, val)
    END PUTReceived;

    PROCEDURE (this: Mailer) SendDateTime* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 987)
    END SendDateTime;

    PROCEDURE (this: Mailer) PUTSendDateTime* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 987, val)
    END PUTSendDateTime;

    PROCEDURE (this: Mailer) Sender* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 988)
    END Sender;

    PROCEDURE (this: Mailer) PUTSender* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 988, val)
    END PUTSender;

    PROCEDURE (this: Mailer) Subject* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 953)
    END Subject;

    PROCEDURE (this: Mailer) PUTSubject* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 953, val)
    END PUTSubject;

    PROCEDURE (this: Mailer) ToRecipients* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 981)
    END ToRecipients;

    PROCEDURE (this: Mailer) PUTToRecipients* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 981, val)
    END PUTToRecipients;

    PROCEDURE (this: Mailer) WhichAddress* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 974)
    END WhichAddress;

    PROCEDURE (this: Mailer) PUTWhichAddress* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 974, val)
    END PUTWhichAddress;

    PROCEDURE (this: Mailer) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;


    (* ---------- Font ---------- *)

    PROCEDURE (this: Font) Background* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 180)
    END Background;

    PROCEDURE (this: Font) PUTBackground* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 180, val)
    END PUTBackground;

    PROCEDURE (this: Font) Bold* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 96)
    END Bold;

    PROCEDURE (this: Font) PUTBold* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 96, val)
    END PUTBold;

    PROCEDURE (this: Font) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Font) PUTColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, val)
    END PUTColor;

    PROCEDURE (this: Font) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Font) PUTColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, val)
    END PUTColorIndex;

    PROCEDURE (this: Font) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Font) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Font) FontStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 177)
    END FontStyle;

    PROCEDURE (this: Font) PUTFontStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 177, val)
    END PUTFontStyle;

    PROCEDURE (this: Font) Italic* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 101)
    END Italic;

    PROCEDURE (this: Font) PUTItalic* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 101, val)
    END PUTItalic;

    PROCEDURE (this: Font) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Font) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Font) OutlineFont* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 221)
    END OutlineFont;

    PROCEDURE (this: Font) PUTOutlineFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 221, val)
    END PUTOutlineFont;

    PROCEDURE (this: Font) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Font) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Font) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Font) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Font) Size* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 104)
    END Size;

    PROCEDURE (this: Font) PUTSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 104, val)
    END PUTSize;

    PROCEDURE (this: Font) Strikethrough* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 105)
    END Strikethrough;

    PROCEDURE (this: Font) PUTStrikethrough* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 105, val)
    END PUTStrikethrough;

    PROCEDURE (this: Font) Subscript* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 179)
    END Subscript;

    PROCEDURE (this: Font) PUTSubscript* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 179, val)
    END PUTSubscript;

    PROCEDURE (this: Font) Superscript* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 178)
    END Superscript;

    PROCEDURE (this: Font) PUTSuperscript* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 178, val)
    END PUTSuperscript;

    PROCEDURE (this: Font) Underline* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 106)
    END Underline;

    PROCEDURE (this: Font) PUTUnderline* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 106, val)
    END PUTUnderline;

    PROCEDURE (this: Font) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;


    (* ---------- Border ---------- *)

    PROCEDURE (this: Border) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Border) PUTColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, val)
    END PUTColor;

    PROCEDURE (this: Border) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Border) PUTColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, val)
    END PUTColorIndex;

    PROCEDURE (this: Border) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Border) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Border) LineStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 119)
    END LineStyle;

    PROCEDURE (this: Border) PUTLineStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 119, val)
    END PUTLineStyle;

    PROCEDURE (this: Border) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Border) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Border) Weight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 120)
    END Weight;

    PROCEDURE (this: Border) PUTWeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 120, val)
    END PUTWeight;

    PROCEDURE (this: Border) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;


    (* ---------- Borders ---------- *)

    PROCEDURE (this: Borders) Color* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 99)
    END Color;

    PROCEDURE (this: Borders) PUTColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 99, val)
    END PUTColor;

    PROCEDURE (this: Borders) ColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 97)
    END ColorIndex;

    PROCEDURE (this: Borders) PUTColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 97, val)
    END PUTColorIndex;

    PROCEDURE (this: Borders) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Borders) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Borders) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Borders) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Borders) LineStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 119)
    END LineStyle;

    PROCEDURE (this: Borders) PUTLineStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 119, val)
    END PUTLineStyle;

    PROCEDURE (this: Borders) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Borders) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Borders) Value* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 6)
    END Value;

    PROCEDURE (this: Borders) PUTValue* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 6, val)
    END PUTValue;

    PROCEDURE (this: Borders) Weight* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 120)
    END Weight;

    PROCEDURE (this: Borders) PUTWeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 120, val)
    END PUTWeight;

    PROCEDURE (this: Borders) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Borders) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Borders) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Corners ---------- *)

    PROCEDURE (this: Corners) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Corners) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Corners) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Corners) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Corners) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Corners) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Corners) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Corners) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- SeriesLines ---------- *)

    PROCEDURE (this: SeriesLines) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: SeriesLines) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: SeriesLines) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: SeriesLines) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: SeriesLines) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: SeriesLines) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: SeriesLines) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: SeriesLines) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: SeriesLines) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: SeriesLines) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: SeriesLines) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- HiLoLines ---------- *)

    PROCEDURE (this: HiLoLines) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: HiLoLines) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: HiLoLines) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: HiLoLines) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: HiLoLines) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: HiLoLines) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: HiLoLines) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: HiLoLines) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: HiLoLines) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: HiLoLines) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: HiLoLines) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Gridlines ---------- *)

    PROCEDURE (this: Gridlines) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Gridlines) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Gridlines) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Gridlines) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Gridlines) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Gridlines) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Gridlines) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Gridlines) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Gridlines) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Gridlines) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Gridlines) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- DropLines ---------- *)

    PROCEDURE (this: DropLines) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: DropLines) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: DropLines) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DropLines) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DropLines) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: DropLines) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: DropLines) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DropLines) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DropLines) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DropLines) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DropLines) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- ErrorBars ---------- *)

    PROCEDURE (this: ErrorBars) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: ErrorBars) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: ErrorBars) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ErrorBars) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ErrorBars) EndStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1124)
    END EndStyle;

    PROCEDURE (this: ErrorBars) PUTEndStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1124, val)
    END PUTEndStyle;

    PROCEDURE (this: ErrorBars) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: ErrorBars) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: ErrorBars) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ErrorBars) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ErrorBars) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ErrorBars) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: ErrorBars) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ErrorBars) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- UpBars ---------- *)

    PROCEDURE (this: UpBars) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: UpBars) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: UpBars) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: UpBars) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: UpBars) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: UpBars) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: UpBars) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: UpBars) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: UpBars) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: UpBars) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: UpBars) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: UpBars) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: UpBars) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- DownBars ---------- *)

    PROCEDURE (this: DownBars) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: DownBars) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: DownBars) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DownBars) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DownBars) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: DownBars) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: DownBars) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: DownBars) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: DownBars) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DownBars) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DownBars) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DownBars) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DownBars) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- ChartTitle ---------- *)

    PROCEDURE (this: ChartTitle) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: ChartTitle) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: ChartTitle) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: ChartTitle) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: ChartTitle) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ChartTitle) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ChartTitle) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: ChartTitle) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: ChartTitle) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: ChartTitle) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: ChartTitle) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: ChartTitle) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: ChartTitle) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ChartTitle) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ChartTitle) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: ChartTitle) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: ChartTitle) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: ChartTitle) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: ChartTitle) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ChartTitle) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ChartTitle) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: ChartTitle) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: ChartTitle) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: ChartTitle) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: ChartTitle) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ChartTitle) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ChartTitle) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: ChartTitle) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: ChartTitle) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ChartTitle) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: ChartTitle) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: ChartTitle) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- AxisTitle ---------- *)

    PROCEDURE (this: AxisTitle) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: AxisTitle) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: AxisTitle) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: AxisTitle) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: AxisTitle) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: AxisTitle) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: AxisTitle) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: AxisTitle) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: AxisTitle) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: AxisTitle) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: AxisTitle) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: AxisTitle) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: AxisTitle) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: AxisTitle) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: AxisTitle) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: AxisTitle) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: AxisTitle) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: AxisTitle) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: AxisTitle) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: AxisTitle) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: AxisTitle) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: AxisTitle) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: AxisTitle) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: AxisTitle) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: AxisTitle) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: AxisTitle) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: AxisTitle) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: AxisTitle) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: AxisTitle) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: AxisTitle) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: AxisTitle) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: AxisTitle) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Floor ---------- *)

    PROCEDURE (this: Floor) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Floor) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Floor) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Floor) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Floor) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Floor) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Floor) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Floor) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Floor) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Floor) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Floor) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Floor) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: Floor) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Walls ---------- *)

    PROCEDURE (this: Walls) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Walls) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Walls) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Walls) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Walls) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Walls) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Walls) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Walls) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Walls) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Walls) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Walls) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Walls) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: Walls) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- PlotArea ---------- *)

    PROCEDURE (this: PlotArea) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: PlotArea) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: PlotArea) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: PlotArea) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: PlotArea) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: PlotArea) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: PlotArea) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: PlotArea) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: PlotArea) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: PlotArea) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: PlotArea) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: PlotArea) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: PlotArea) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: PlotArea) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: PlotArea) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: PlotArea) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: PlotArea) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: PlotArea) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: PlotArea) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: PlotArea) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: PlotArea) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- ChartArea ---------- *)

    PROCEDURE (this: ChartArea) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: ChartArea) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: ChartArea) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ChartArea) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ChartArea) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: ChartArea) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: ChartArea) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: ChartArea) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: ChartArea) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: ChartArea) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: ChartArea) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: ChartArea) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: ChartArea) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: ChartArea) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: ChartArea) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ChartArea) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ChartArea) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: ChartArea) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: ChartArea) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: ChartArea) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: ChartArea) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: ChartArea) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: ChartArea) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ChartArea) Clear* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 111, ret);
        RETURN CtlC.VarAny(ret)
    END Clear;

    PROCEDURE (this: ChartArea) ClearContents* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 113, ret);
        RETURN CtlC.VarAny(ret)
    END ClearContents;

    PROCEDURE (this: ChartArea) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: ChartArea) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: ChartArea) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Legend ---------- *)

    PROCEDURE (this: Legend) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Legend) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Legend) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Legend) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Legend) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: Legend) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: Legend) Height* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 123)
    END Height;

    PROCEDURE (this: Legend) PUTHeight* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 123, val)
    END PUTHeight;

    PROCEDURE (this: Legend) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Legend) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Legend) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: Legend) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: Legend) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Legend) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Legend) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Legend) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Legend) Position* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 133)
    END Position;

    PROCEDURE (this: Legend) PUTPosition* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 133, val)
    END PUTPosition;

    PROCEDURE (this: Legend) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: Legend) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: Legend) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: Legend) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: Legend) Width* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 122)
    END Width;

    PROCEDURE (this: Legend) PUTWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 122, val)
    END PUTWidth;

    PROCEDURE (this: Legend) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Legend) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Legend) LegendEntries* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 173, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LegendEntries;

    PROCEDURE (this: Legend) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- TickLabels ---------- *)

    PROCEDURE (this: TickLabels) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: TickLabels) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: TickLabels) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: TickLabels) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: TickLabels) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: TickLabels) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: TickLabels) NumberFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 193)
    END NumberFormat;

    PROCEDURE (this: TickLabels) PUTNumberFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 193, val)
    END PUTNumberFormat;

    PROCEDURE (this: TickLabels) NumberFormatLinked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 194)
    END NumberFormatLinked;

    PROCEDURE (this: TickLabels) PUTNumberFormatLinked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 194, val)
    END PUTNumberFormatLinked;

    PROCEDURE (this: TickLabels) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: TickLabels) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: TickLabels) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: TickLabels) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: TickLabels) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: TickLabels) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: TickLabels) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Chart ---------- *)

    PROCEDURE (this: Chart) Area3DGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 17)
    END Area3DGroup;

    PROCEDURE (this: Chart) PUTArea3DGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 17, val)
    END PUTArea3DGroup;

    PROCEDURE (this: Chart) AutoScaling* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 107)
    END AutoScaling;

    PROCEDURE (this: Chart) PUTAutoScaling* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 107, val)
    END PUTAutoScaling;

    PROCEDURE (this: Chart) Bar3DGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 18)
    END Bar3DGroup;

    PROCEDURE (this: Chart) PUTBar3DGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 18, val)
    END PUTBar3DGroup;

    PROCEDURE (this: Chart) ChartArea* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 80)
    END ChartArea;

    PROCEDURE (this: Chart) PUTChartArea* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 80, val)
    END PUTChartArea;

    PROCEDURE (this: Chart) ChartTitle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 81)
    END ChartTitle;

    PROCEDURE (this: Chart) PUTChartTitle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 81, val)
    END PUTChartTitle;

    PROCEDURE (this: Chart) Column3DGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 19)
    END Column3DGroup;

    PROCEDURE (this: Chart) PUTColumn3DGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 19, val)
    END PUTColumn3DGroup;

    PROCEDURE (this: Chart) Corners* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 79)
    END Corners;

    PROCEDURE (this: Chart) PUTCorners* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 79, val)
    END PUTCorners;

    PROCEDURE (this: Chart) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Chart) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Chart) DepthPercent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 48)
    END DepthPercent;

    PROCEDURE (this: Chart) PUTDepthPercent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 48, val)
    END PUTDepthPercent;

    PROCEDURE (this: Chart) DisplayBlanksAs* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 93)
    END DisplayBlanksAs;

    PROCEDURE (this: Chart) PUTDisplayBlanksAs* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 93, val)
    END PUTDisplayBlanksAs;

    PROCEDURE (this: Chart) Elevation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 49)
    END Elevation;

    PROCEDURE (this: Chart) PUTElevation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 49, val)
    END PUTElevation;

    PROCEDURE (this: Chart) Floor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 83)
    END Floor;

    PROCEDURE (this: Chart) PUTFloor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 83, val)
    END PUTFloor;

    PROCEDURE (this: Chart) GapDepth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 50)
    END GapDepth;

    PROCEDURE (this: Chart) PUTGapDepth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 50, val)
    END PUTGapDepth;

    PROCEDURE (this: Chart) HasAxis* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 52)
    END HasAxis;

    PROCEDURE (this: Chart) PUTHasAxis* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 52, val)
    END PUTHasAxis;

    PROCEDURE (this: Chart) HasLegend* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 53)
    END HasLegend;

    PROCEDURE (this: Chart) PUTHasLegend* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 53, val)
    END PUTHasLegend;

    PROCEDURE (this: Chart) HasTitle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 54)
    END HasTitle;

    PROCEDURE (this: Chart) PUTHasTitle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 54, val)
    END PUTHasTitle;

    PROCEDURE (this: Chart) HeightPercent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 55)
    END HeightPercent;

    PROCEDURE (this: Chart) PUTHeightPercent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 55, val)
    END PUTHeightPercent;

    PROCEDURE (this: Chart) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Chart) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Chart) Legend* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 84)
    END Legend;

    PROCEDURE (this: Chart) PUTLegend* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 84, val)
    END PUTLegend;

    PROCEDURE (this: Chart) Line3DGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 20)
    END Line3DGroup;

    PROCEDURE (this: Chart) PUTLine3DGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 20, val)
    END PUTLine3DGroup;

    PROCEDURE (this: Chart) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Chart) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Chart) Next* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 502)
    END Next;

    PROCEDURE (this: Chart) PUTNext* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 502, val)
    END PUTNext;

    PROCEDURE (this: Chart) OnDoubleClick* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 628)
    END OnDoubleClick;

    PROCEDURE (this: Chart) PUTOnDoubleClick* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 628, val)
    END PUTOnDoubleClick;

    PROCEDURE (this: Chart) OnSheetActivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1031)
    END OnSheetActivate;

    PROCEDURE (this: Chart) PUTOnSheetActivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1031, val)
    END PUTOnSheetActivate;

    PROCEDURE (this: Chart) OnSheetDeactivate* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1081)
    END OnSheetDeactivate;

    PROCEDURE (this: Chart) PUTOnSheetDeactivate* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1081, val)
    END PUTOnSheetDeactivate;

    PROCEDURE (this: Chart) PageSetup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 998)
    END PageSetup;

    PROCEDURE (this: Chart) PUTPageSetup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 998, val)
    END PUTPageSetup;

    PROCEDURE (this: Chart) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Chart) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Chart) Perspective* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 57)
    END Perspective;

    PROCEDURE (this: Chart) PUTPerspective* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 57, val)
    END PUTPerspective;

    PROCEDURE (this: Chart) Pie3DGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 21)
    END Pie3DGroup;

    PROCEDURE (this: Chart) PUTPie3DGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 21, val)
    END PUTPie3DGroup;

    PROCEDURE (this: Chart) PlotArea* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 85)
    END PlotArea;

    PROCEDURE (this: Chart) PUTPlotArea* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 85, val)
    END PUTPlotArea;

    PROCEDURE (this: Chart) PlotVisibleOnly* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 92)
    END PlotVisibleOnly;

    PROCEDURE (this: Chart) PUTPlotVisibleOnly* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 92, val)
    END PUTPlotVisibleOnly;

    PROCEDURE (this: Chart) Previous* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 503)
    END Previous;

    PROCEDURE (this: Chart) PUTPrevious* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 503, val)
    END PUTPrevious;

    PROCEDURE (this: Chart) ProtectContents* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 292)
    END ProtectContents;

    PROCEDURE (this: Chart) PUTProtectContents* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 292, val)
    END PUTProtectContents;

    PROCEDURE (this: Chart) ProtectDrawingObjects* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 293)
    END ProtectDrawingObjects;

    PROCEDURE (this: Chart) PUTProtectDrawingObjects* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 293, val)
    END PUTProtectDrawingObjects;

    PROCEDURE (this: Chart) ProtectionMode* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1159)
    END ProtectionMode;

    PROCEDURE (this: Chart) PUTProtectionMode* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1159, val)
    END PUTProtectionMode;

    PROCEDURE (this: Chart) RightAngleAxes* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 58)
    END RightAngleAxes;

    PROCEDURE (this: Chart) PUTRightAngleAxes* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 58, val)
    END PUTRightAngleAxes;

    PROCEDURE (this: Chart) Rotation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 59)
    END Rotation;

    PROCEDURE (this: Chart) PUTRotation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 59, val)
    END PUTRotation;

    PROCEDURE (this: Chart) SizeWithWindow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 94)
    END SizeWithWindow;

    PROCEDURE (this: Chart) PUTSizeWithWindow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 94, val)
    END PUTSizeWithWindow;

    PROCEDURE (this: Chart) SubType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 109)
    END SubType;

    PROCEDURE (this: Chart) PUTSubType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 109, val)
    END PUTSubType;

    PROCEDURE (this: Chart) SurfaceGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 22)
    END SurfaceGroup;

    PROCEDURE (this: Chart) PUTSurfaceGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 22, val)
    END PUTSurfaceGroup;

    PROCEDURE (this: Chart) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: Chart) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: Chart) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Chart) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Chart) Walls* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 86)
    END Walls;

    PROCEDURE (this: Chart) PUTWalls* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 86, val)
    END PUTWalls;

    PROCEDURE (this: Chart) WallsAndGridlines2D* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 210)
    END WallsAndGridlines2D;

    PROCEDURE (this: Chart) PUTWallsAndGridlines2D* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 210, val)
    END PUTWallsAndGridlines2D;

    PROCEDURE (this: Chart) Activate* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 304, ret);
        RETURN CtlC.VarAny(ret)
    END Activate;

    PROCEDURE (this: Chart) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Chart) ApplyDataLabels* ((* optional *) Type: CtlT.Any; LegendKey: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(LegendKey, arg[0]);
        CtlC.CallParMethod(this, 151, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ApplyDataLabels;

    PROCEDURE (this: Chart) Arcs* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 760, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Arcs;

    PROCEDURE (this: Chart) AreaGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 9, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AreaGroups;

    PROCEDURE (this: Chart) AutoFormat* (Gallery: CtlT.Any; (* optional *) Format: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Gallery, arg[1]);
        CtlC.AnyVar(Format, arg[0]);
        CtlC.CallParMethod(this, 114, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AutoFormat;

    PROCEDURE (this: Chart) Axes* ((* optional *) Type: CtlT.Any; AxisGroup: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(AxisGroup, arg[0]);
        CtlC.CallParMethod(this, 23, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Axes;

    PROCEDURE (this: Chart) BarGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 10, arg, ret);
        RETURN CtlC.VarAny(ret)
    END BarGroups;

    PROCEDURE (this: Chart) Buttons* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 557, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Buttons;

    PROCEDURE (this: Chart) ChartGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 8, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChartGroups;

    PROCEDURE (this: Chart) ChartObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1060, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChartObjects;

    PROCEDURE (this: Chart) ChartWizard* ((* optional *) Source: CtlT.Any; Gallery: CtlT.Any; Format: CtlT.Any; PlotBy: CtlT.Any; CategoryLabels: CtlT.Any; SeriesLabels: CtlT.Any; HasLegend: CtlT.Any; Title: CtlT.Any; CategoryTitle: CtlT.Any; ValueTitle: CtlT.Any; ExtraTitle: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 11 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[10]);
        CtlC.AnyVar(Gallery, arg[9]);
        CtlC.AnyVar(Format, arg[8]);
        CtlC.AnyVar(PlotBy, arg[7]);
        CtlC.AnyVar(CategoryLabels, arg[6]);
        CtlC.AnyVar(SeriesLabels, arg[5]);
        CtlC.AnyVar(HasLegend, arg[4]);
        CtlC.AnyVar(Title, arg[3]);
        CtlC.AnyVar(CategoryTitle, arg[2]);
        CtlC.AnyVar(ValueTitle, arg[1]);
        CtlC.AnyVar(ExtraTitle, arg[0]);
        CtlC.CallParMethod(this, 196, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ChartWizard;

    PROCEDURE (this: Chart) CheckBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 824, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckBoxes;

    PROCEDURE (this: Chart) CheckSpelling* ((* optional *) CustomDictionary: CtlT.Any; IgnoreUppercase: CtlT.Any; AlwaysSuggest: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(CustomDictionary, arg[2]);
        CtlC.AnyVar(IgnoreUppercase, arg[1]);
        CtlC.AnyVar(AlwaysSuggest, arg[0]);
        CtlC.CallParMethod(this, 505, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CheckSpelling;

    PROCEDURE (this: Chart) ColumnGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 11, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ColumnGroups;

    PROCEDURE (this: Chart) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Chart) CopyPicture* ((* optional *) Appearance: CtlT.Any; Format: CtlT.Any; Size: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Appearance, arg[2]);
        CtlC.AnyVar(Format, arg[1]);
        CtlC.AnyVar(Size, arg[0]);
        CtlC.CallParMethod(this, 213, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CopyPicture;

    PROCEDURE (this: Chart) CreatePublisher* ((* optional *) Edition: CtlT.Any; Appearance: CtlT.Any; Size: CtlT.Any; ContainsPICT: CtlT.Any; ContainsBIFF: CtlT.Any; ContainsRTF: CtlT.Any; ContainsVALU: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Edition, arg[6]);
        CtlC.AnyVar(Appearance, arg[5]);
        CtlC.AnyVar(Size, arg[4]);
        CtlC.AnyVar(ContainsPICT, arg[3]);
        CtlC.AnyVar(ContainsBIFF, arg[2]);
        CtlC.AnyVar(ContainsRTF, arg[1]);
        CtlC.AnyVar(ContainsVALU, arg[0]);
        CtlC.CallParMethod(this, 458, arg, ret);
        RETURN CtlC.VarAny(ret)
    END CreatePublisher;

    PROCEDURE (this: Chart) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Chart) Deselect* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 1120, ret);
        RETURN CtlC.VarAny(ret)
    END Deselect;

    PROCEDURE (this: Chart) DoughnutGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 14, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DoughnutGroups;

    PROCEDURE (this: Chart) DrawingObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 88, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DrawingObjects;

    PROCEDURE (this: Chart) Drawings* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 772, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Drawings;

    PROCEDURE (this: Chart) DropDowns* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 836, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DropDowns;

    PROCEDURE (this: Chart) _Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 1, arg, ret);
        RETURN CtlC.VarAny(ret)
    END _Evaluate;

    PROCEDURE (this: Chart) Evaluate* (Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, -5, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Evaluate;

    PROCEDURE (this: Chart) GroupBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 834, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GroupBoxes;

    PROCEDURE (this: Chart) GroupObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 1113, arg, ret);
        RETURN CtlC.VarAny(ret)
    END GroupObjects;

    PROCEDURE (this: Chart) Labels* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 841, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Labels;

    PROCEDURE (this: Chart) LineGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 12, arg, ret);
        RETURN CtlC.VarAny(ret)
    END LineGroups;

    PROCEDURE (this: Chart) Lines* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 767, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Lines;

    PROCEDURE (this: Chart) ListBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 832, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ListBoxes;

    PROCEDURE (this: Chart) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: Chart) OLEObjects* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 799, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OLEObjects;

    PROCEDURE (this: Chart) OptionButtons* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 826, arg, ret);
        RETURN CtlC.VarAny(ret)
    END OptionButtons;

    PROCEDURE (this: Chart) Ovals* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 801, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Ovals;

    PROCEDURE (this: Chart) Paste* ((* optional *) Type: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[0]);
        CtlC.CallParMethod(this, 211, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Paste;

    PROCEDURE (this: Chart) Pictures* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 771, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Pictures;

    PROCEDURE (this: Chart) PieGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 13, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PieGroups;

    PROCEDURE (this: Chart) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Chart) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Chart) Protect* ((* optional *) Password: CtlT.Any; DrawingObjects: CtlT.Any; Contents: CtlT.Any; Scenarios: CtlT.Any; UserInterfaceOnly: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[4]);
        CtlC.AnyVar(DrawingObjects, arg[3]);
        CtlC.AnyVar(Contents, arg[2]);
        CtlC.AnyVar(Scenarios, arg[1]);
        CtlC.AnyVar(UserInterfaceOnly, arg[0]);
        CtlC.CallParMethod(this, 282, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Protect;

    PROCEDURE (this: Chart) RadarGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 15, arg, ret);
        RETURN CtlC.VarAny(ret)
    END RadarGroups;

    PROCEDURE (this: Chart) Rectangles* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 774, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Rectangles;

    PROCEDURE (this: Chart) SaveAs* (Filename: CtlT.Any; (* optional *) FileFormat: CtlT.Any; Password: CtlT.Any; WriteResPassword: CtlT.Any; ReadOnlyRecommended: CtlT.Any; CreateBackup: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 6 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[5]);
        CtlC.AnyVar(FileFormat, arg[4]);
        CtlC.AnyVar(Password, arg[3]);
        CtlC.AnyVar(WriteResPassword, arg[2]);
        CtlC.AnyVar(ReadOnlyRecommended, arg[1]);
        CtlC.AnyVar(CreateBackup, arg[0]);
        CtlC.CallParMethod(this, 284, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SaveAs;

    PROCEDURE (this: Chart) ScrollBars* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 830, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ScrollBars;

    PROCEDURE (this: Chart) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Chart) SeriesCollection* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 68, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SeriesCollection;

    PROCEDURE (this: Chart) SetBackgroundPicture* ((* optional *) Filename: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Filename, arg[0]);
        CtlC.CallParMethod(this, 1188, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SetBackgroundPicture;

    PROCEDURE (this: Chart) Spinners* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 838, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Spinners;

    PROCEDURE (this: Chart) TextBoxes* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 777, arg, ret);
        RETURN CtlC.VarAny(ret)
    END TextBoxes;

    PROCEDURE (this: Chart) Unprotect* ((* optional *) Password: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Password, arg[0]);
        CtlC.CallParMethod(this, 285, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Unprotect;

    PROCEDURE (this: Chart) XYGroups* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 16, arg, ret);
        RETURN CtlC.VarAny(ret)
    END XYGroups;


    (* ---------- Charts ---------- *)

    PROCEDURE (this: Charts) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Charts) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Charts) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Charts) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Charts) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Charts) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Charts) Visible* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 558)
    END Visible;

    PROCEDURE (this: Charts) PUTVisible* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 558, val)
    END PUTVisible;

    PROCEDURE (this: Charts) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Charts) Add* ((* optional *) Before: CtlT.Any; After: CtlT.Any; Count: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[2]);
        CtlC.AnyVar(After, arg[1]);
        CtlC.AnyVar(Count, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Charts) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Charts) Copy* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 551, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Charts) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Charts) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: Charts) Move* ((* optional *) Before: CtlT.Any; After: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Before, arg[1]);
        CtlC.AnyVar(After, arg[0]);
        CtlC.CallParMethod(this, 637, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Move;

    PROCEDURE (this: Charts) PrintOut* ((* optional *) From: CtlT.Any; To: CtlT.Any; Copies: CtlT.Any; Preview: CtlT.Any; ActivePrinter: CtlT.Any; PrintToFile: CtlT.Any; Collate: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 7 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(From, arg[6]);
        CtlC.AnyVar(To, arg[5]);
        CtlC.AnyVar(Copies, arg[4]);
        CtlC.AnyVar(Preview, arg[3]);
        CtlC.AnyVar(ActivePrinter, arg[2]);
        CtlC.AnyVar(PrintToFile, arg[1]);
        CtlC.AnyVar(Collate, arg[0]);
        CtlC.CallParMethod(this, 905, arg, ret);
        RETURN CtlC.VarAny(ret)
    END PrintOut;

    PROCEDURE (this: Charts) PrintPreview* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 281, ret);
        RETURN CtlC.VarAny(ret)
    END PrintPreview;

    PROCEDURE (this: Charts) Select* ((* optional *) Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 235, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- ChartGroup ---------- *)

    PROCEDURE (this: ChartGroup) AxisGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 47)
    END AxisGroup;

    PROCEDURE (this: ChartGroup) PUTAxisGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 47, val)
    END PUTAxisGroup;

    PROCEDURE (this: ChartGroup) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ChartGroup) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ChartGroup) DoughnutHoleSize* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1126)
    END DoughnutHoleSize;

    PROCEDURE (this: ChartGroup) PUTDoughnutHoleSize* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1126, val)
    END PUTDoughnutHoleSize;

    PROCEDURE (this: ChartGroup) DownBars* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 141)
    END DownBars;

    PROCEDURE (this: ChartGroup) PUTDownBars* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 141, val)
    END PUTDownBars;

    PROCEDURE (this: ChartGroup) DropLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 142)
    END DropLines;

    PROCEDURE (this: ChartGroup) PUTDropLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 142, val)
    END PUTDropLines;

    PROCEDURE (this: ChartGroup) FirstSliceAngle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 63)
    END FirstSliceAngle;

    PROCEDURE (this: ChartGroup) PUTFirstSliceAngle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 63, val)
    END PUTFirstSliceAngle;

    PROCEDURE (this: ChartGroup) GapWidth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 51)
    END GapWidth;

    PROCEDURE (this: ChartGroup) PUTGapWidth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 51, val)
    END PUTGapWidth;

    PROCEDURE (this: ChartGroup) HasDropLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 61)
    END HasDropLines;

    PROCEDURE (this: ChartGroup) PUTHasDropLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 61, val)
    END PUTHasDropLines;

    PROCEDURE (this: ChartGroup) HasHiLoLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 62)
    END HasHiLoLines;

    PROCEDURE (this: ChartGroup) PUTHasHiLoLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 62, val)
    END PUTHasHiLoLines;

    PROCEDURE (this: ChartGroup) HasRadarAxisLabels* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 64)
    END HasRadarAxisLabels;

    PROCEDURE (this: ChartGroup) PUTHasRadarAxisLabels* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 64, val)
    END PUTHasRadarAxisLabels;

    PROCEDURE (this: ChartGroup) HasSeriesLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 65)
    END HasSeriesLines;

    PROCEDURE (this: ChartGroup) PUTHasSeriesLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 65, val)
    END PUTHasSeriesLines;

    PROCEDURE (this: ChartGroup) HasUpDownBars* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 66)
    END HasUpDownBars;

    PROCEDURE (this: ChartGroup) PUTHasUpDownBars* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 66, val)
    END PUTHasUpDownBars;

    PROCEDURE (this: ChartGroup) HiLoLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 143)
    END HiLoLines;

    PROCEDURE (this: ChartGroup) PUTHiLoLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 143, val)
    END PUTHiLoLines;

    PROCEDURE (this: ChartGroup) Overlap* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 56)
    END Overlap;

    PROCEDURE (this: ChartGroup) PUTOverlap* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 56, val)
    END PUTOverlap;

    PROCEDURE (this: ChartGroup) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ChartGroup) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ChartGroup) RadarAxisLabels* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 144)
    END RadarAxisLabels;

    PROCEDURE (this: ChartGroup) PUTRadarAxisLabels* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 144, val)
    END PUTRadarAxisLabels;

    PROCEDURE (this: ChartGroup) SeriesLines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 145)
    END SeriesLines;

    PROCEDURE (this: ChartGroup) PUTSeriesLines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 145, val)
    END PUTSeriesLines;

    PROCEDURE (this: ChartGroup) SubType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 109)
    END SubType;

    PROCEDURE (this: ChartGroup) PUTSubType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 109, val)
    END PUTSubType;

    PROCEDURE (this: ChartGroup) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: ChartGroup) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: ChartGroup) UpBars* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 140)
    END UpBars;

    PROCEDURE (this: ChartGroup) PUTUpBars* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 140, val)
    END PUTUpBars;

    PROCEDURE (this: ChartGroup) VaryByCategories* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 60)
    END VaryByCategories;

    PROCEDURE (this: ChartGroup) PUTVaryByCategories* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 60, val)
    END PUTVaryByCategories;

    PROCEDURE (this: ChartGroup) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ChartGroup) SeriesCollection* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 68, arg, ret);
        RETURN CtlC.VarAny(ret)
    END SeriesCollection;


    (* ---------- ChartGroups ---------- *)

    PROCEDURE (this: ChartGroups) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: ChartGroups) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: ChartGroups) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: ChartGroups) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: ChartGroups) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: ChartGroups) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: ChartGroups) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: ChartGroups) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: ChartGroups) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Axis ---------- *)

    PROCEDURE (this: Axis) AxisBetweenCategories* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 45)
    END AxisBetweenCategories;

    PROCEDURE (this: Axis) PUTAxisBetweenCategories* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 45, val)
    END PUTAxisBetweenCategories;

    PROCEDURE (this: Axis) AxisGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 47)
    END AxisGroup;

    PROCEDURE (this: Axis) PUTAxisGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 47, val)
    END PUTAxisGroup;

    PROCEDURE (this: Axis) AxisTitle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 82)
    END AxisTitle;

    PROCEDURE (this: Axis) PUTAxisTitle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 82, val)
    END PUTAxisTitle;

    PROCEDURE (this: Axis) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Axis) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Axis) CategoryNames* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 156)
    END CategoryNames;

    PROCEDURE (this: Axis) PUTCategoryNames* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 156, val)
    END PUTCategoryNames;

    PROCEDURE (this: Axis) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Axis) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Axis) Crosses* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 42)
    END Crosses;

    PROCEDURE (this: Axis) PUTCrosses* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 42, val)
    END PUTCrosses;

    PROCEDURE (this: Axis) CrossesAt* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 43)
    END CrossesAt;

    PROCEDURE (this: Axis) PUTCrossesAt* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 43, val)
    END PUTCrossesAt;

    PROCEDURE (this: Axis) HasMajorGridlines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 24)
    END HasMajorGridlines;

    PROCEDURE (this: Axis) PUTHasMajorGridlines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 24, val)
    END PUTHasMajorGridlines;

    PROCEDURE (this: Axis) HasMinorGridlines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 25)
    END HasMinorGridlines;

    PROCEDURE (this: Axis) PUTHasMinorGridlines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 25, val)
    END PUTHasMinorGridlines;

    PROCEDURE (this: Axis) HasTitle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 54)
    END HasTitle;

    PROCEDURE (this: Axis) PUTHasTitle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 54, val)
    END PUTHasTitle;

    PROCEDURE (this: Axis) MajorGridlines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 89)
    END MajorGridlines;

    PROCEDURE (this: Axis) PUTMajorGridlines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 89, val)
    END PUTMajorGridlines;

    PROCEDURE (this: Axis) MajorTickMark* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 26)
    END MajorTickMark;

    PROCEDURE (this: Axis) PUTMajorTickMark* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 26, val)
    END PUTMajorTickMark;

    PROCEDURE (this: Axis) MajorUnit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 37)
    END MajorUnit;

    PROCEDURE (this: Axis) PUTMajorUnit* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 37, val)
    END PUTMajorUnit;

    PROCEDURE (this: Axis) MajorUnitIsAuto* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 38)
    END MajorUnitIsAuto;

    PROCEDURE (this: Axis) PUTMajorUnitIsAuto* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 38, val)
    END PUTMajorUnitIsAuto;

    PROCEDURE (this: Axis) MaximumScale* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 35)
    END MaximumScale;

    PROCEDURE (this: Axis) PUTMaximumScale* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 35, val)
    END PUTMaximumScale;

    PROCEDURE (this: Axis) MaximumScaleIsAuto* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 36)
    END MaximumScaleIsAuto;

    PROCEDURE (this: Axis) PUTMaximumScaleIsAuto* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 36, val)
    END PUTMaximumScaleIsAuto;

    PROCEDURE (this: Axis) MinimumScale* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 33)
    END MinimumScale;

    PROCEDURE (this: Axis) PUTMinimumScale* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 33, val)
    END PUTMinimumScale;

    PROCEDURE (this: Axis) MinimumScaleIsAuto* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 34)
    END MinimumScaleIsAuto;

    PROCEDURE (this: Axis) PUTMinimumScaleIsAuto* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 34, val)
    END PUTMinimumScaleIsAuto;

    PROCEDURE (this: Axis) MinorGridlines* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 90)
    END MinorGridlines;

    PROCEDURE (this: Axis) PUTMinorGridlines* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 90, val)
    END PUTMinorGridlines;

    PROCEDURE (this: Axis) MinorTickMark* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 27)
    END MinorTickMark;

    PROCEDURE (this: Axis) PUTMinorTickMark* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 27, val)
    END PUTMinorTickMark;

    PROCEDURE (this: Axis) MinorUnit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 39)
    END MinorUnit;

    PROCEDURE (this: Axis) PUTMinorUnit* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 39, val)
    END PUTMinorUnit;

    PROCEDURE (this: Axis) MinorUnitIsAuto* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 40)
    END MinorUnitIsAuto;

    PROCEDURE (this: Axis) PUTMinorUnitIsAuto* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 40, val)
    END PUTMinorUnitIsAuto;

    PROCEDURE (this: Axis) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Axis) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Axis) ReversePlotOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 44)
    END ReversePlotOrder;

    PROCEDURE (this: Axis) PUTReversePlotOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 44, val)
    END PUTReversePlotOrder;

    PROCEDURE (this: Axis) ScaleType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 41)
    END ScaleType;

    PROCEDURE (this: Axis) PUTScaleType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 41, val)
    END PUTScaleType;

    PROCEDURE (this: Axis) TickLabelPosition* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 28)
    END TickLabelPosition;

    PROCEDURE (this: Axis) PUTTickLabelPosition* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 28, val)
    END PUTTickLabelPosition;

    PROCEDURE (this: Axis) TickLabels* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 91)
    END TickLabels;

    PROCEDURE (this: Axis) PUTTickLabels* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 91, val)
    END PUTTickLabels;

    PROCEDURE (this: Axis) TickLabelSpacing* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 29)
    END TickLabelSpacing;

    PROCEDURE (this: Axis) PUTTickLabelSpacing* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 29, val)
    END PUTTickLabelSpacing;

    PROCEDURE (this: Axis) TickMarkSpacing* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 31)
    END TickMarkSpacing;

    PROCEDURE (this: Axis) PUTTickMarkSpacing* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 31, val)
    END PUTTickMarkSpacing;

    PROCEDURE (this: Axis) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: Axis) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: Axis) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Axis) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Axis) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Axes ---------- *)

    PROCEDURE (this: Axes) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Axes) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Axes) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Axes) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Axes) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Axes) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Axes) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Axes) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Axes) Item* (Type: CtlT.Any; (* optional *) AxisGroup: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(AxisGroup, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- DataLabel ---------- *)

    PROCEDURE (this: DataLabel) AutoText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 135)
    END AutoText;

    PROCEDURE (this: DataLabel) PUTAutoText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 135, val)
    END PUTAutoText;

    PROCEDURE (this: DataLabel) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: DataLabel) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: DataLabel) Caption* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 139)
    END Caption;

    PROCEDURE (this: DataLabel) PUTCaption* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 139, val)
    END PUTCaption;

    PROCEDURE (this: DataLabel) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DataLabel) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DataLabel) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: DataLabel) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: DataLabel) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: DataLabel) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: DataLabel) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: DataLabel) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: DataLabel) Left* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 127)
    END Left;

    PROCEDURE (this: DataLabel) PUTLeft* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 127, val)
    END PUTLeft;

    PROCEDURE (this: DataLabel) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: DataLabel) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: DataLabel) NumberFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 193)
    END NumberFormat;

    PROCEDURE (this: DataLabel) PUTNumberFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 193, val)
    END PUTNumberFormat;

    PROCEDURE (this: DataLabel) NumberFormatLinked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 194)
    END NumberFormatLinked;

    PROCEDURE (this: DataLabel) PUTNumberFormatLinked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 194, val)
    END PUTNumberFormatLinked;

    PROCEDURE (this: DataLabel) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: DataLabel) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: DataLabel) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DataLabel) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DataLabel) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: DataLabel) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: DataLabel) ShowLegendKey* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 171)
    END ShowLegendKey;

    PROCEDURE (this: DataLabel) PUTShowLegendKey* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 171, val)
    END PUTShowLegendKey;

    PROCEDURE (this: DataLabel) Text* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 138)
    END Text;

    PROCEDURE (this: DataLabel) PUTText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 138, val)
    END PUTText;

    PROCEDURE (this: DataLabel) Top* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 126)
    END Top;

    PROCEDURE (this: DataLabel) PUTTop* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 126, val)
    END PUTTop;

    PROCEDURE (this: DataLabel) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: DataLabel) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: DataLabel) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: DataLabel) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: DataLabel) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DataLabel) Characters* ((* optional *) Start: CtlT.Any; Length: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Start, arg[1]);
        CtlC.AnyVar(Length, arg[0]);
        CtlC.CallParMethod(this, 603, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Characters;

    PROCEDURE (this: DataLabel) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DataLabel) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- DataLabels ---------- *)

    PROCEDURE (this: DataLabels) AutoText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 135)
    END AutoText;

    PROCEDURE (this: DataLabels) PUTAutoText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 135, val)
    END PUTAutoText;

    PROCEDURE (this: DataLabels) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: DataLabels) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: DataLabels) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: DataLabels) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: DataLabels) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: DataLabels) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: DataLabels) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: DataLabels) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: DataLabels) HorizontalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 136)
    END HorizontalAlignment;

    PROCEDURE (this: DataLabels) PUTHorizontalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 136, val)
    END PUTHorizontalAlignment;

    PROCEDURE (this: DataLabels) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: DataLabels) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: DataLabels) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: DataLabels) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: DataLabels) NumberFormat* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 193)
    END NumberFormat;

    PROCEDURE (this: DataLabels) PUTNumberFormat* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 193, val)
    END PUTNumberFormat;

    PROCEDURE (this: DataLabels) NumberFormatLinked* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 194)
    END NumberFormatLinked;

    PROCEDURE (this: DataLabels) PUTNumberFormatLinked* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 194, val)
    END PUTNumberFormatLinked;

    PROCEDURE (this: DataLabels) Orientation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 134)
    END Orientation;

    PROCEDURE (this: DataLabels) PUTOrientation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 134, val)
    END PUTOrientation;

    PROCEDURE (this: DataLabels) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: DataLabels) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: DataLabels) Shadow* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 103)
    END Shadow;

    PROCEDURE (this: DataLabels) PUTShadow* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 103, val)
    END PUTShadow;

    PROCEDURE (this: DataLabels) ShowLegendKey* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 171)
    END ShowLegendKey;

    PROCEDURE (this: DataLabels) PUTShowLegendKey* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 171, val)
    END PUTShowLegendKey;

    PROCEDURE (this: DataLabels) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: DataLabels) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: DataLabels) VerticalAlignment* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 137)
    END VerticalAlignment;

    PROCEDURE (this: DataLabels) PUTVerticalAlignment* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 137, val)
    END PUTVerticalAlignment;

    PROCEDURE (this: DataLabels) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: DataLabels) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: DataLabels) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: DataLabels) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: DataLabels) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Point ---------- *)

    PROCEDURE (this: Point) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Point) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Point) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Point) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Point) DataLabel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 158)
    END DataLabel;

    PROCEDURE (this: Point) PUTDataLabel* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 158, val)
    END PUTDataLabel;

    PROCEDURE (this: Point) Explosion* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 182)
    END Explosion;

    PROCEDURE (this: Point) PUTExplosion* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 182, val)
    END PUTExplosion;

    PROCEDURE (this: Point) HasDataLabel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 77)
    END HasDataLabel;

    PROCEDURE (this: Point) PUTHasDataLabel* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 77, val)
    END PUTHasDataLabel;

    PROCEDURE (this: Point) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Point) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Point) InvertIfNegative* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 132)
    END InvertIfNegative;

    PROCEDURE (this: Point) PUTInvertIfNegative* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 132, val)
    END PUTInvertIfNegative;

    PROCEDURE (this: Point) MarkerBackgroundColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 73)
    END MarkerBackgroundColor;

    PROCEDURE (this: Point) PUTMarkerBackgroundColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 73, val)
    END PUTMarkerBackgroundColor;

    PROCEDURE (this: Point) MarkerBackgroundColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 74)
    END MarkerBackgroundColorIndex;

    PROCEDURE (this: Point) PUTMarkerBackgroundColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 74, val)
    END PUTMarkerBackgroundColorIndex;

    PROCEDURE (this: Point) MarkerForegroundColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 75)
    END MarkerForegroundColor;

    PROCEDURE (this: Point) PUTMarkerForegroundColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 75, val)
    END PUTMarkerForegroundColor;

    PROCEDURE (this: Point) MarkerForegroundColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 76)
    END MarkerForegroundColorIndex;

    PROCEDURE (this: Point) PUTMarkerForegroundColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 76, val)
    END PUTMarkerForegroundColorIndex;

    PROCEDURE (this: Point) MarkerStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 72)
    END MarkerStyle;

    PROCEDURE (this: Point) PUTMarkerStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 72, val)
    END PUTMarkerStyle;

    PROCEDURE (this: Point) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Point) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Point) PictureType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 161)
    END PictureType;

    PROCEDURE (this: Point) PUTPictureType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 161, val)
    END PUTPictureType;

    PROCEDURE (this: Point) PictureUnit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 162)
    END PictureUnit;

    PROCEDURE (this: Point) PUTPictureUnit* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 162, val)
    END PUTPictureUnit;

    PROCEDURE (this: Point) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Point) ApplyDataLabels* ((* optional *) Type: CtlT.Any; LegendKey: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(LegendKey, arg[0]);
        CtlC.CallParMethod(this, 151, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ApplyDataLabels;

    PROCEDURE (this: Point) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: Point) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Point) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Point) Paste* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 211, ret);
        RETURN CtlC.VarAny(ret)
    END Paste;

    PROCEDURE (this: Point) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Points ---------- *)

    PROCEDURE (this: Points) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Points) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Points) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Points) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Points) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Points) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Points) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Points) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Points) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- Series ---------- *)

    PROCEDURE (this: Series) AxisGroup* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 47)
    END AxisGroup;

    PROCEDURE (this: Series) PUTAxisGroup* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 47, val)
    END PUTAxisGroup;

    PROCEDURE (this: Series) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Series) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Series) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Series) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Series) ErrorBars* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 159)
    END ErrorBars;

    PROCEDURE (this: Series) PUTErrorBars* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 159, val)
    END PUTErrorBars;

    PROCEDURE (this: Series) Explosion* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 182)
    END Explosion;

    PROCEDURE (this: Series) PUTExplosion* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 182, val)
    END PUTExplosion;

    PROCEDURE (this: Series) Formula* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 261)
    END Formula;

    PROCEDURE (this: Series) PUTFormula* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 261, val)
    END PUTFormula;

    PROCEDURE (this: Series) FormulaLocal* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 263)
    END FormulaLocal;

    PROCEDURE (this: Series) PUTFormulaLocal* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 263, val)
    END PUTFormulaLocal;

    PROCEDURE (this: Series) FormulaR1C1* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 264)
    END FormulaR1C1;

    PROCEDURE (this: Series) PUTFormulaR1C1* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 264, val)
    END PUTFormulaR1C1;

    PROCEDURE (this: Series) FormulaR1C1Local* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 265)
    END FormulaR1C1Local;

    PROCEDURE (this: Series) PUTFormulaR1C1Local* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 265, val)
    END PUTFormulaR1C1Local;

    PROCEDURE (this: Series) HasDataLabels* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 78)
    END HasDataLabels;

    PROCEDURE (this: Series) PUTHasDataLabels* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 78, val)
    END PUTHasDataLabels;

    PROCEDURE (this: Series) HasErrorBars* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 160)
    END HasErrorBars;

    PROCEDURE (this: Series) PUTHasErrorBars* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 160, val)
    END PUTHasErrorBars;

    PROCEDURE (this: Series) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: Series) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: Series) InvertIfNegative* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 132)
    END InvertIfNegative;

    PROCEDURE (this: Series) PUTInvertIfNegative* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 132, val)
    END PUTInvertIfNegative;

    PROCEDURE (this: Series) MarkerBackgroundColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 73)
    END MarkerBackgroundColor;

    PROCEDURE (this: Series) PUTMarkerBackgroundColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 73, val)
    END PUTMarkerBackgroundColor;

    PROCEDURE (this: Series) MarkerBackgroundColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 74)
    END MarkerBackgroundColorIndex;

    PROCEDURE (this: Series) PUTMarkerBackgroundColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 74, val)
    END PUTMarkerBackgroundColorIndex;

    PROCEDURE (this: Series) MarkerForegroundColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 75)
    END MarkerForegroundColor;

    PROCEDURE (this: Series) PUTMarkerForegroundColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 75, val)
    END PUTMarkerForegroundColor;

    PROCEDURE (this: Series) MarkerForegroundColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 76)
    END MarkerForegroundColorIndex;

    PROCEDURE (this: Series) PUTMarkerForegroundColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 76, val)
    END PUTMarkerForegroundColorIndex;

    PROCEDURE (this: Series) MarkerStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 72)
    END MarkerStyle;

    PROCEDURE (this: Series) PUTMarkerStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 72, val)
    END PUTMarkerStyle;

    PROCEDURE (this: Series) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Series) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Series) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Series) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Series) PictureType* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 161)
    END PictureType;

    PROCEDURE (this: Series) PUTPictureType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 161, val)
    END PUTPictureType;

    PROCEDURE (this: Series) PictureUnit* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 162)
    END PictureUnit;

    PROCEDURE (this: Series) PUTPictureUnit* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 162, val)
    END PUTPictureUnit;

    PROCEDURE (this: Series) PlotOrder* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 228)
    END PlotOrder;

    PROCEDURE (this: Series) PUTPlotOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 228, val)
    END PUTPlotOrder;

    PROCEDURE (this: Series) Smooth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 163)
    END Smooth;

    PROCEDURE (this: Series) PUTSmooth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 163, val)
    END PUTSmooth;

    PROCEDURE (this: Series) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: Series) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: Series) Values* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 164)
    END Values;

    PROCEDURE (this: Series) PUTValues* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 164, val)
    END PUTValues;

    PROCEDURE (this: Series) XValues* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1111)
    END XValues;

    PROCEDURE (this: Series) PUTXValues* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1111, val)
    END PUTXValues;

    PROCEDURE (this: Series) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Series) ApplyDataLabels* ((* optional *) Type: CtlT.Any; LegendKey: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[1]);
        CtlC.AnyVar(LegendKey, arg[0]);
        CtlC.CallParMethod(this, 151, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ApplyDataLabels;

    PROCEDURE (this: Series) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: Series) Copy* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 551, ret);
        RETURN CtlC.VarAny(ret)
    END Copy;

    PROCEDURE (this: Series) DataLabels* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 157, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DataLabels;

    PROCEDURE (this: Series) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Series) ErrorBar* (Direction: CtlT.Any; Include: CtlT.Any; Type: CtlT.Any; (* optional *) Amount: CtlT.Any; MinusValues: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Direction, arg[4]);
        CtlC.AnyVar(Include, arg[3]);
        CtlC.AnyVar(Type, arg[2]);
        CtlC.AnyVar(Amount, arg[1]);
        CtlC.AnyVar(MinusValues, arg[0]);
        CtlC.CallParMethod(this, 152, arg, ret);
        RETURN CtlC.VarAny(ret)
    END ErrorBar;

    PROCEDURE (this: Series) Paste* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 211, ret);
        RETURN CtlC.VarAny(ret)
    END Paste;

    PROCEDURE (this: Series) Points* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 70, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Points;

    PROCEDURE (this: Series) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;

    PROCEDURE (this: Series) Trendlines* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 154, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Trendlines;


    (* ---------- SeriesCollection ---------- *)

    PROCEDURE (this: SeriesCollection) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: SeriesCollection) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: SeriesCollection) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: SeriesCollection) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: SeriesCollection) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: SeriesCollection) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: SeriesCollection) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: SeriesCollection) Add* (Source: CtlT.Any; (* optional *) Rowcol: CtlT.Any; SeriesLabels: CtlT.Any; CategoryLabels: CtlT.Any; Replace: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[4]);
        CtlC.AnyVar(Rowcol, arg[3]);
        CtlC.AnyVar(SeriesLabels, arg[2]);
        CtlC.AnyVar(CategoryLabels, arg[1]);
        CtlC.AnyVar(Replace, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: SeriesCollection) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: SeriesCollection) Extend* (Source: CtlT.Any; (* optional *) Rowcol: CtlT.Any; CategoryLabels: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 3 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Source, arg[2]);
        CtlC.AnyVar(Rowcol, arg[1]);
        CtlC.AnyVar(CategoryLabels, arg[0]);
        CtlC.CallParMethod(this, 227, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Extend;

    PROCEDURE (this: SeriesCollection) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;

    PROCEDURE (this: SeriesCollection) Paste* ((* optional *) Rowcol: CtlT.Any; SeriesLabels: CtlT.Any; CategoryLabels: CtlT.Any; Replace: CtlT.Any; NewSeries: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 5 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Rowcol, arg[4]);
        CtlC.AnyVar(SeriesLabels, arg[3]);
        CtlC.AnyVar(CategoryLabels, arg[2]);
        CtlC.AnyVar(Replace, arg[1]);
        CtlC.AnyVar(NewSeries, arg[0]);
        CtlC.CallParMethod(this, 211, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Paste;


    (* ---------- LegendEntry ---------- *)

    PROCEDURE (this: LegendEntry) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: LegendEntry) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: LegendEntry) Font* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 146)
    END Font;

    PROCEDURE (this: LegendEntry) PUTFont* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 146, val)
    END PUTFont;

    PROCEDURE (this: LegendEntry) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: LegendEntry) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: LegendEntry) LegendKey* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 174)
    END LegendKey;

    PROCEDURE (this: LegendEntry) PUTLegendKey* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 174, val)
    END PUTLegendKey;

    PROCEDURE (this: LegendEntry) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: LegendEntry) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: LegendEntry) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: LegendEntry) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: LegendEntry) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- LegendEntries ---------- *)

    PROCEDURE (this: LegendEntries) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: LegendEntries) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: LegendEntries) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: LegendEntries) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: LegendEntries) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: LegendEntries) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: LegendEntries) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: LegendEntries) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: LegendEntries) Item* (Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- LegendKey ---------- *)

    PROCEDURE (this: LegendKey) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: LegendKey) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: LegendKey) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: LegendKey) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: LegendKey) Interior* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 129)
    END Interior;

    PROCEDURE (this: LegendKey) PUTInterior* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 129, val)
    END PUTInterior;

    PROCEDURE (this: LegendKey) InvertIfNegative* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 132)
    END InvertIfNegative;

    PROCEDURE (this: LegendKey) PUTInvertIfNegative* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 132, val)
    END PUTInvertIfNegative;

    PROCEDURE (this: LegendKey) MarkerBackgroundColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 73)
    END MarkerBackgroundColor;

    PROCEDURE (this: LegendKey) PUTMarkerBackgroundColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 73, val)
    END PUTMarkerBackgroundColor;

    PROCEDURE (this: LegendKey) MarkerBackgroundColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 74)
    END MarkerBackgroundColorIndex;

    PROCEDURE (this: LegendKey) PUTMarkerBackgroundColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 74, val)
    END PUTMarkerBackgroundColorIndex;

    PROCEDURE (this: LegendKey) MarkerForegroundColor* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 75)
    END MarkerForegroundColor;

    PROCEDURE (this: LegendKey) PUTMarkerForegroundColor* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 75, val)
    END PUTMarkerForegroundColor;

    PROCEDURE (this: LegendKey) MarkerForegroundColorIndex* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 76)
    END MarkerForegroundColorIndex;

    PROCEDURE (this: LegendKey) PUTMarkerForegroundColorIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 76, val)
    END PUTMarkerForegroundColorIndex;

    PROCEDURE (this: LegendKey) MarkerStyle* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 72)
    END MarkerStyle;

    PROCEDURE (this: LegendKey) PUTMarkerStyle* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 72, val)
    END PUTMarkerStyle;

    PROCEDURE (this: LegendKey) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: LegendKey) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: LegendKey) Smooth* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 163)
    END Smooth;

    PROCEDURE (this: LegendKey) PUTSmooth* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 163, val)
    END PUTSmooth;

    PROCEDURE (this: LegendKey) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: LegendKey) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: LegendKey) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: LegendKey) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Trendline ---------- *)

    PROCEDURE (this: Trendline) Backward* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 185)
    END Backward;

    PROCEDURE (this: Trendline) PUTBackward* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 185, val)
    END PUTBackward;

    PROCEDURE (this: Trendline) Border* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 128)
    END Border;

    PROCEDURE (this: Trendline) PUTBorder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 128, val)
    END PUTBorder;

    PROCEDURE (this: Trendline) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Trendline) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Trendline) DataLabel* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 158)
    END DataLabel;

    PROCEDURE (this: Trendline) PUTDataLabel* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 158, val)
    END PUTDataLabel;

    PROCEDURE (this: Trendline) DisplayEquation* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 190)
    END DisplayEquation;

    PROCEDURE (this: Trendline) PUTDisplayEquation* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 190, val)
    END PUTDisplayEquation;

    PROCEDURE (this: Trendline) DisplayRSquared* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 189)
    END DisplayRSquared;

    PROCEDURE (this: Trendline) PUTDisplayRSquared* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 189, val)
    END PUTDisplayRSquared;

    PROCEDURE (this: Trendline) Forward* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 191)
    END Forward;

    PROCEDURE (this: Trendline) PUTForward* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 191, val)
    END PUTForward;

    PROCEDURE (this: Trendline) Index* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 486)
    END Index;

    PROCEDURE (this: Trendline) PUTIndex* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 486, val)
    END PUTIndex;

    PROCEDURE (this: Trendline) Intercept* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 186)
    END Intercept;

    PROCEDURE (this: Trendline) PUTIntercept* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 186, val)
    END PUTIntercept;

    PROCEDURE (this: Trendline) InterceptIsAuto* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 187)
    END InterceptIsAuto;

    PROCEDURE (this: Trendline) PUTInterceptIsAuto* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 187, val)
    END PUTInterceptIsAuto;

    PROCEDURE (this: Trendline) Name* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 110)
    END Name;

    PROCEDURE (this: Trendline) PUTName* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 110, val)
    END PUTName;

    PROCEDURE (this: Trendline) NameIsAuto* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 188)
    END NameIsAuto;

    PROCEDURE (this: Trendline) PUTNameIsAuto* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 188, val)
    END PUTNameIsAuto;

    PROCEDURE (this: Trendline) Order* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 192)
    END Order;

    PROCEDURE (this: Trendline) PUTOrder* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 192, val)
    END PUTOrder;

    PROCEDURE (this: Trendline) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Trendline) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Trendline) Period* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 184)
    END Period;

    PROCEDURE (this: Trendline) PUTPeriod* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 184, val)
    END PUTPeriod;

    PROCEDURE (this: Trendline) Type* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 108)
    END Type;

    PROCEDURE (this: Trendline) PUTType* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 108, val)
    END PUTType;

    PROCEDURE (this: Trendline) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Trendline) ClearFormats* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 112, ret);
        RETURN CtlC.VarAny(ret)
    END ClearFormats;

    PROCEDURE (this: Trendline) Delete* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 117, ret);
        RETURN CtlC.VarAny(ret)
    END Delete;

    PROCEDURE (this: Trendline) Select* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 235, ret);
        RETURN CtlC.VarAny(ret)
    END Select;


    (* ---------- Trendlines ---------- *)

    PROCEDURE (this: Trendlines) Count* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 118)
    END Count;

    PROCEDURE (this: Trendlines) PUTCount* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 118, val)
    END PUTCount;

    PROCEDURE (this: Trendlines) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: Trendlines) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: Trendlines) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: Trendlines) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: Trendlines) _NewEnum* (): CtlT.Enumerator, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 2, ret);
        RETURN CtlC.VarEnum(ret)
    END _NewEnum;

    PROCEDURE (this: Trendlines) Add* ((* optional *) Type: CtlT.Any; Order: CtlT.Any; Period: CtlT.Any; Forward: CtlT.Any; Backward: CtlT.Any; Intercept: CtlT.Any; DisplayEquation: CtlT.Any; DisplayRSquared: CtlT.Any; Name: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 9 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Type, arg[8]);
        CtlC.AnyVar(Order, arg[7]);
        CtlC.AnyVar(Period, arg[6]);
        CtlC.AnyVar(Forward, arg[5]);
        CtlC.AnyVar(Backward, arg[4]);
        CtlC.AnyVar(Intercept, arg[3]);
        CtlC.AnyVar(DisplayEquation, arg[2]);
        CtlC.AnyVar(DisplayRSquared, arg[1]);
        CtlC.AnyVar(Name, arg[0]);
        CtlC.CallParMethod(this, 181, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Add;

    PROCEDURE (this: Trendlines) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: Trendlines) Item* ((* optional *) Index: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(Index, arg[0]);
        CtlC.CallParMethod(this, 170, arg, ret);
        RETURN CtlC.VarAny(ret)
    END Item;


    (* ---------- AutoCorrect ---------- *)

    PROCEDURE (this: AutoCorrect) CapitalizeNamesOfDays* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1150)
    END CapitalizeNamesOfDays;

    PROCEDURE (this: AutoCorrect) PUTCapitalizeNamesOfDays* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1150, val)
    END PUTCapitalizeNamesOfDays;

    PROCEDURE (this: AutoCorrect) Creator* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 149)
    END Creator;

    PROCEDURE (this: AutoCorrect) PUTCreator* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 149, val)
    END PUTCreator;

    PROCEDURE (this: AutoCorrect) Parent* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 150)
    END Parent;

    PROCEDURE (this: AutoCorrect) PUTParent* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 150, val)
    END PUTParent;

    PROCEDURE (this: AutoCorrect) ReplacementList* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1151)
    END ReplacementList;

    PROCEDURE (this: AutoCorrect) PUTReplacementList* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1151, val)
    END PUTReplacementList;

    PROCEDURE (this: AutoCorrect) ReplaceText* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1148)
    END ReplaceText;

    PROCEDURE (this: AutoCorrect) PUTReplaceText* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1148, val)
    END PUTReplaceText;

    PROCEDURE (this: AutoCorrect) TwoInitialCapitals* (): CtlT.Any, NEW;
    BEGIN
        RETURN CtlC.GetAny(this, 1149)
    END TwoInitialCapitals;

    PROCEDURE (this: AutoCorrect) PUTTwoInitialCapitals* (val: CtlT.Any), NEW;
    BEGIN
        CtlC.PutAny(this, 1149, val)
    END PUTTwoInitialCapitals;

    PROCEDURE (this: AutoCorrect) AddReplacement* (What: CtlT.Any; Replacement: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 2 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(What, arg[1]);
        CtlC.AnyVar(Replacement, arg[0]);
        CtlC.CallParMethod(this, 1146, arg, ret);
        RETURN CtlC.VarAny(ret)
    END AddReplacement;

    PROCEDURE (this: AutoCorrect) Application* (): CtlT.Any, NEW;
        VAR ret: CtlT.Variant;
    BEGIN
        CtlC.CallMethod(this, 148, ret);
        RETURN CtlC.VarAny(ret)
    END Application;

    PROCEDURE (this: AutoCorrect) DeleteReplacement* (What: CtlT.Any): CtlT.Any, NEW;
        VAR arg: ARRAY 1 OF CtlT.Variant; ret: CtlT.Variant;
    BEGIN
        CtlC.AnyVar(What, arg[0]);
        CtlC.CallParMethod(this, 1147, arg, ret);
        RETURN CtlC.VarAny(ret)
    END DeleteReplacement;


    PROCEDURE New_ExcelApplication* (): _Global;
    BEGIN
        RETURN This_Global(CtlC.NewObj("{00020812-0000-0000-C000-000000000046}"))
    END New_ExcelApplication;

    PROCEDURE New_ExcelSheet* (): Worksheet;
    BEGIN
        RETURN ThisWorksheet(CtlC.NewObj("{00020810-0000-0000-C000-000000000046}"))
    END New_ExcelSheet;

    PROCEDURE New_ExcelChart* (): Chart;
    BEGIN
        RETURN ThisChart(CtlC.NewObj("{00020811-0000-0000-C000-000000000046}"))
    END New_ExcelChart;

END CtlExcel5.
